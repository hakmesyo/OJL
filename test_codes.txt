============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme2.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Point;
import java.awt.Polygon;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import jazari.types.TMatrixOperator;
import jazari.utils.pascalvoc.AnnotationPascalVOCFormat;

/**
 *
 * @author cezerilab
 */
public class Deneme2 {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().range(100).perlinNoise().tr().plot();
        System.out.println("merhaba");
//        Polygon poly=new Polygon();
//        for (int i = 0; i < 10; i++) {
//            Point p=new Point(i,2*i);
//            poly.addPoint(p.x, p.y);
//            System.out.println(poly.npoints);
//        }
        //AnnotationPascalVOCFormat apv= FactoryUtils.deserializePascalVocXML("images/pullar.xml");
        //FactoryUtils.serializePascalVocXML("images", "pullar_2.xml", "images/pullar.png", apv.source, apv.lstObjects);
//        CMatrix cm = CMatrix.getInstance()
//                .rand(5,3)
//                .dump()
//                ;
//        cm.clone().mean().mean().println();
//        cm.clone().std().std().println();
        
//        CMatrix cm = CMatrix.getInstance()
//                .rand(4,3,0,30)
//                .round()
//                .println()
//                
//                
//                ;
//        CMatrix cm_index = cm.clone().findIndex(TMatrixOperator.GREATER, 15).println();
//        CMatrix cm_value = cm.clone().findValuesByIndex(cm_index).println();

//        CMatrix cm_value = cm.clone().reshape(12, 1).println();
//        float f=cm_value.getValue((int)cm_index.getValue(0, 0), 0);
//        System.out.println("cm_value = " +f );
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme3.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Random;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class Deneme3 {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .annotateImage("images/bird.jpg")
                
                ;
//        Random r=new Random(123);
//        for (int i = 0; i < 10; i++) {
//            System.out.println(r.nextFloat());
//        }
//        System.out.println("--------------------------");
//        r=new Random(123);
//        for (int i = 0; i < 10; i++) {
//            System.out.println(r.nextFloat());
//        }
        
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/pullar.png")
//                .imshow()
//                
//                ;
//        String path="D:\\DATASETS\\VisDrone\\visdrone_selected\\test";
//        FactoryUtils.convertPascalVoc2YoloFormat(path, "class.txt");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\DenemeDataAugmentation.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class DenemeDataAugmentation {
    public static void main(String[] args) {
        double[] d1=new double[5];
        double[] d2=new double[5];
        for (int i = 0; i < 5; i++) {
            d1[i]=Math.random();
        }
        for (int i = 0; i < 5; i++) {
            d2[i]=Math.random();
        }
        
        System.out.println(Arrays.toString(d1));
        System.out.println(Arrays.toString(d2));
        double corr=korelasyonHesapla(d1,d2);
        System.out.println("corr = " + corr);
        
//        double[][] veri = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
//        double[] hedef = {10, 20, 30};
//        
//        for (int i = 0; i < veri[0].length; i++) {
//            double[] ozellik = new double[veri.length];
//            for (int j = 0; j < veri.length; j++) {
//                ozellik[j] = veri[j][i];
//            }
//            double korelasyon = korelasyonHesapla(ozellik, hedef);
//            System.out.println("Özellik " + i + " korelasyonu: " + korelasyon);
//        }
    }
    
    private static double korelasyonHesapla(double[] x, double[] y) {
        double ortalamX = Arrays.stream(x).average().orElse(0.0);
        double ortalamY = Arrays.stream(y).average().orElse(0.0);
        
        double pay = 0, paydaX = 0, paydaY = 0;
        for (int i = 0; i < x.length; i++) {
            pay += (x[i] - ortalamX) * (y[i] - ortalamY);
            paydaX += Math.pow(x[i] - ortalamX, 2);
            paydaY += Math.pow(y[i] - ortalamY, 2);
        }
        
        return pay / Math.sqrt(paydaX * paydaY);
    }

//    public static void main(String[] args) {
//        double[] d={-5000.0, -200.0, -300.0, -240.0, -210.0,-300.0, -10.0};
//        double sum=0;
//        for (int i = 0; i < d.length; i++) {
//            sum+=d[i];
//        }
//        double mean=sum/d.length;
//        System.out.println("mean = " + mean);
//        
//        double max=0;
//        int index=0;
//        for (int i = 0; i < d.length; i++) {
//            if (Math.abs(mean-d[i])>max) {
//                max=Math.abs(mean-d[i]);
//                index=i;
//            }
//        }
//        System.out.println(index+". eleman aykırıdır "+d[index]);
//        
//        
//        
//        List<Double> veriler = new ArrayList<>(List.of(1.0, 200.0, 300.0, 240.0, 210.0,300.0));
//
//        Collections.sort(veriler);
//        int n = veriler.size();
//        double q1 = veriler.get(n / (n-1));
//        double q3 = veriler.get((n-2) * n / (n-1));
//        double iqr = q3 - q1;
//        double altSinir = q1 - (n-2)/2 * iqr;
//        double ustSinir = q3 + (n-2)/2 * iqr;
//
//        List<Double> aykiriDegerler = new ArrayList<>();
//        for (Double veri : veriler) {
//            if (veri < altSinir || veri > ustSinir) {
//                aykiriDegerler.add(veri);
//            }
//        }
//
//        System.out.println("Aykırı değerler: " + aykiriDegerler);
    //}
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\DenemeMatlabFunctions.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Arrays;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class DenemeMatlabFunctions {
    public static void main(String[] args) {
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/babun.jpg")
//                .imshow("original babun image")
//                .rgb2gray()
//                .imshow()
//                //.imwrite("images/babun_1.png")
//                ;
//        CMatrix cm2 = cm.clone().hist(25).println();
        //CMatrix cm_red = CMatrix.getInstance().values(90, 150, 0).reshape(3,90,50).cmd("0", ":").println();
//        CMatrix cm_green = cm_red.clone();
//        CMatrix cm_blue = cm_red.clone();

        CMatrix cm = CMatrix.getInstance()
                .imread("C:\\Users\\cezerilab\\Desktop/ideal_contrast.jpg")
                .rgb2gray()
                .imshow()
                
                ;
        int[] indexes=cm.clone().shufflePixelImage().imshow().shuffleIndexes;
        System.out.println(Arrays.toString(indexes));
        
        //cm.clone().threshold(100).imshow();
        //cm.clone().rgb2hsv().imcomplement().imshow();
        
//                cm.clone().getRedChannelColor().imshow();
//                cm.clone().getGreenChannelColor().imshow();
//                cm.clone().getBlueChannelColor().imshow();
        
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_1.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class Deneme_1 {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread()
                .imshow()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_100_exercises.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Point;
import java.util.Arrays;
import jazari.matrix.CMatrix;
import jazari.matrix.CPoint;
import jazari.types.TMatrixOperator;

/**
 *
 * @author cezerilab
 */
public class Deneme_100_exercises {

    public static void main(String[] args) {
               CMatrix cm = CMatrix.getInstance()
                    .ones(16)
                    .setValue("1:17:2", "0:16:2", 0)
                    .setValue("0:16:2", "1:17:2", 0)
                    .resize(40)
                    .map(0, 255)
                    .imshow()
                    .println()
               ;

        
        
        
//        //Q24- How to stack two matrices vertically?
//        CMatrix cm1 = CMatrix.getInstance().rand(5,2).dump();
//        CMatrix cm2 = CMatrix.getInstance().rand(3,2).dump();
//        CMatrix cm = cm1.clone().catFirst(2,cm2).println();
        
        
//        //Q23- How to reshape a matrix of any shape to new shape?
//        CMatrix cm = CMatrix.getInstance()
//                //.range(0, 20)
//                .ones(20,1)
//                .println()
//                .reshape(1,2,5,2,1)
//                .println()
//                ;
        
//        //Q22- How to add a border (filled with 0's) around an existing array?
//        CMatrix cm = CMatrix.getInstance().zeros(10, 10);
//        cm.clone().setValue("2:-2", "2:-2", 1).println().map(0, 255).resize(50).imshow();
        
//        //*Q21- Find indices of non-zero elements from [1,2,0,0,4,0]
//        CMatrix cm = CMatrix.getInstance(1, 2, 0, 0, 4, 0).println();
//        cm.clone(cm).nonZeroIndices().println();
//        cm.clone(cm).nonZeroValues().println();

        //CMatrix cm = CMatrix.getInstance().rand(5, 1).println().replicate(3,2).println();
//        //Q19- Extract the integer part of a random array using 4 different methods.
//        //System.out.println(Math.floor(-58.0768));
//        CMatrix cm = CMatrix.getInstance().rand(5, 3, 0, 100).println();
//        
//        cm.clone().trunc().println();
//        cm.clone().floor().println();
//        cm.clone().round().println();
        //error Q17- Given a random 1D array with size 11 in range 0..10, negate all elements which are between 3 and 8, in place. 
//        CMatrix cm = CMatrix.getInstance()
//                .rand(1, 11,0,10)
//                .println()
//                ;
//        CMatrix cm_index = cm.clone().findIndex(TMatrixOperator.BETWEEN, 3,8).dump();
//        cm.clone().negate(cm_index).dump();
//        //CMatrix cm1 = cm.clone().negate().dump();
        //Q16_Extended- Multiply (dot product) a 5x3 matrix by a 5x3 matrix.
//        CMatrix cm = CMatrix.getInstance()
//                .rand(5,3)
//                .dump()
//                .dotProduct(CMatrix.getInstance().rand(5,3).dump())
//                .dump()
//                ;
//        //Q16- Multiply a 5x3 matrix by a 3x2 matrix (real matrix dot) .
//        CMatrix cm1 = CMatrix.getInstance().rand(5, 2).dump();
//        CMatrix cm2 = CMatrix.getInstance().rand(2, 2).dump();
//        CMatrix cm = cm1.dot(cm2).dump();
//        //Q15- Normalize as min-max a 5x5 random matrix [0..100] range.
//        CMatrix cm = CMatrix.getInstance()
//                .rand(5,1,-100,100)
//                .replicateColumn(5)
//                .dump();
//        CMatrix cm1 = cm.clone()
//                .normalizeMinMax()
//                .dump() ;
//        CMatrix cm2 = cm.clone()
//                .map(0, 1)
//                .dump() ;
//        //Round a 5x5 random matrix from double to int for [0..100] range
//        
//        CMatrix cm = CMatrix.getInstance()
//                .rand(5, 5)
//                .map(0, 100)
//                .println()
//                .round()
//                .println()
//                ;
//        int[][] d=cm.toIntArray2D();
//        System.out.println(Arrays.toString(d[0]));
        //Build a diagonal 5x5 matrix with values 0,1,2,3,4
        //CMatrix ret = CMatrix.getInstance().range(0, 5).replicateColumn(5).println();
        //CMatrix cm = CMatrix.getInstance().diag("1:11:2").println();
        //Build a diagonal 5x5 matrix with values 0,1,2,3,4
//        //1.yöntem geleneksel Java yaklaşımı
//        float[][] d=new float[5][5];
//        for (int i = 0; i < 5; i++) {
//            for (int j = 0; j < 5; j++) {
//                d[i][i]=i;
//            }
//        }
//        CMatrix.getInstance(d).println();
        //2.yöntem OJL yaklaşımı
        // CMatrix.getInstance().diag(5).println();
//       CMatrix cm = CMatrix.getInstance()
//                    .zeros(8)
//                    .setValue("1:9:2", "0:8:2", 1)
//                    .setValue("0:8:2", "1:9:2", 1)
//                    .map(0, 255)
//                    .resize(80)
//                    //.imshow()
//                    .println()
//               ;
        //3.yöntem tile approach
        //atomic tile pattern
//        CMatrix cm_atomic = CMatrix.getInstance(new int[][]{{0,1},{1,0}});
//        CMatrix cm = cm_atomic.clone().replicateColumn(3).println().replicateRow(3).println();
//        //Build a 2d array [10x10] with 1 on the border and 0 inside
//        //CMatrix cm = CMatrix.getInstance().rand(10, 10, -10, 10).round().println();
//        //CMatrix cm_index = cm.clone().findIndex(TMatrixOperator.SMALLER_EQUALS, -2).println();
//        CMatrix cm = CMatrix.getInstance().ones(10,10).println();
//        cm.clone().setValue("1:-1", "1:-1", 0).println();
//        //System.out.println(Arrays.toString(cm_index.toFloatArray1D()));
//        //How to add a border (filled with 0's) around an existing array?
//        CMatrix cm = CMatrix.getInstance().ones(5, 5).padarray(1, 1, 0).println();
//        //Find indices of non-zero elements from [1,2,0,0,4,0]
//        CMatrix cm = CMatrix.getInstance(1,2,0,0,4,0)                
//                .println()                 
//                ;
//        CMatrix.getInstance().clone(cm).println();
//        CMatrix.getInstance(1,2,0,0,4,0).clone().nonZeroIndices().println();
//        CMatrix.getInstance(1,2,0,0,4,0).clone().nonZeroValues().println();
//        
////        CMatrix cm_index = cm.clone().findIndex(TMatrixOperator.NOT_EQUALS, 0).println();
////        CMatrix cm_values = cm.clone().findItemsByIndex(cm_index).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_2.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class Deneme_2 {
    public static void main(String[] args) {
        CMatrix cm_x = CMatrix.getInstance().range(-5, 5,0.1f);
        CMatrix cm_1 = cm_x
                //.sigmoid()
                .negate()
                .multiplyScalar(2)
                .exp()
                //.divideByScalar(1)
                .addScalar(1)
                //.divideByScalar(1)
                .pow(-1)
                .plot()
                ;
//        CMatrix cm = CMatrix.getInstance().range(1,5).divideByScalar(1).println();        
        
                ;
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_computer_vision.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Arrays;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class Deneme_computer_vision {

    static void crossProduct(int vect_A[], int vect_B[],int cross_P[]) {
        cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];
        cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];
    }

    public static void main(String[] args) {
        int[][] d={{3,12},{2,8}};
        CMatrix cm = CMatrix.getInstance().setArray(d).println().pinv().println();
        
//        CMatrix cm = CMatrix.getInstance().rand(5,5).println();
//        CMatrix cm_inv = cm.clone().inv().println();
//        CMatrix cm_eye = cm.clone().dot(cm_inv).round().println();
//        CMatrix v1 = CMatrix.getInstance().rand(5,1).println();
//        CMatrix cm_2 = v1.clone().transpose().dot(CMatrix.getInstance().eye(5)).println(); 
        
        //matrix multiplication için dot kullanılır
        //dot product dotProduct
//        CMatrix cm1 = CMatrix.getInstance().rand(5,5).println();
//        CMatrix cm2 = CMatrix.getInstance().rand(5,5).println();
//        CMatrix cm3 = cm1.clone().dot(cm2).println();
        
//        int vect_A[] = { 2,0};
//        int vect_B[] = { 0,2 };
//        int cross_P[] = new int[2];
//        System.out.println(Arrays.toString(cross_P));
//        
//        //9. cross product
//        CMatrix v1 = CMatrix.getInstance().setArray(2, 0).println();
//        CMatrix v2 = CMatrix.getInstance().setArray(0, 2).println();
//
//        CMatrix cm = v1.clone().transpose().mul(v2).println();

//        //8. vector projection or dot
//        CMatrix v1 = CMatrix.getInstance().setArray(2,2).println();
//        CMatrix v2 = CMatrix.getInstance().setArray(-2,2).println();
//        CMatrix cm1 = v2.clone().transpose().dot(v1).println();
//        //7. inner dot product
//        CMatrix v1 = CMatrix.getInstance()
//                .setArray(new float[]{3,4})
//                .println()
//                ;
//        CMatrix v2 = CMatrix.getInstance()
//                .setArray(new float[]{5,12})
//                .println()
//                ;
//        
//        CMatrix v3 = v1.clone().dotProduct(v2.clone()).println("v3");
//        
//        CMatrix derece = v1.clone().getAngle(v2.clone().transpose()).println();
//        
//        double t1=Math.toDegrees(Math.atan(4.0/3.0));
//        System.out.println("t1 = " + t1);
//        double t2=Math.toDegrees(Math.atan(12.0/5.0));
//        System.out.println("t2 = " + t2);
//        double t=t2-t1;
//        System.out.println("t = " + t);
//        CMatrix cm = v1.clone().magnitude().println("m1").timesScalar(v2.clone().magnitude().println("m2").getValue()).timesScalar(Math.cos(t*Math.PI/180)).println();
//        //6. multiply a vector with scalar
//        CMatrix cm = CMatrix.getInstance()
//                .rand(2,1)
//                .println()
//                .scale(2)
//                .println()
//                ;
//        //5. add two vectors
////        CMatrix v1 = CMatrix.getInstance().rand(2, 1).println();
////        CMatrix v2 = CMatrix.getInstance().rand(2, 1).println();
////        CMatrix cm = v1.clone().add(v2).println();
////        v1.println();
//        
//        CMatrix cm1 = CMatrix.getInstance()
//                .rand(2,1)
//                .println()
//                .minus(CMatrix.getInstance().rand(2, 1).println())
//                .println()
//                ;
//        double teta=45;
//        double tan_teta=Math.tan(teta*Math.PI/180);
//        double derece=Math.toDegrees(Math.asin(0.5));
//        System.out.println("derece = " + derece);
        //System.out.println("tan_teta = " + tan_teta);
        //4. make a vector having 5 elements
//        CMatrix cm = CMatrix.getInstance()                
//                .range(100) //vector
//                .println()
//                ;
//        CMatrix cm = CMatrix.getInstance()
//                .rand(1, 5)                
//                .println()
//                .transpose()
//                .println()
//                .plot()
//                ;
//        //3. show binary, grayscale, colored image
//        CMatrix cm = CMatrix.getInstance()
//                .imread("D:\\Dropbox\\NetbeansProjects\\open-jazari-library\\images\\bird.jpg")
//                .imshow()
//                ;
//        //2. make a sound (random) 1-D signal and represent it
//           CMatrix cm = CMatrix.getInstance()
//                   .rand(100, 1, 25, 75)
//                   //.transpose()
//                   .plot("1-D random signal")
//                   ;     
//        //1. make a 256x256 image with random binary pixels
//        CMatrix cm = CMatrix.getInstance()
//                .rand(256, 256)
//                .round()
//                .map(0, 255)
//                .println()
//                .imshow()
//                
//                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_dental.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Random;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class Deneme_dental {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                //.imread("images/artificial.jpg")
                //.imread("images/bird.jpg")
                //.imread("C:\\Users\\cezerilab\\Desktop\\dataset\\ds_robotaksi\\robotaksi_dataset\\levhalar\\images\\train")
                //.imread("images/pistachio/Yeni klasör")
                .imread("C:\\Users\\cezerilab\\Desktop\\dataset\\pistachio\\train\\undefined")
                //.imread("C:\\Users\\cezerilab\\Desktop\\dataset\\istanbul_dis_segmentation\\ds_1") //.imread("C:\\Users\\cezerilab\\Desktop\\dataset\\butterfly_segmentation_yolov8\\butterfly_dataset\\Nature\\train\\butterfly (1).png")
                //.imshow()
                ;
        String folderPath = "C:\\Users\\cezerilab\\Desktop\\dataset\\pistachio\\train\\all";
        //FactoryUtils.generateYoloDetectionDataSet(folderPath, "yolov8_pistachio", "detection");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Deneme_florosis_ds.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.File;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class Deneme_florosis_ds {

    public static void main(String[] args) {
        String path = "C:\\Users\\dell_lab\\Desktop\\ds";

        splitDataSet(path, new String[]{"2", "3", "4", "5"}, 0.85, 0.15);

    }

    private static void splitDataSet(String path, String[] className, double train_r, double test_r) {
        for (int k = 0; k < className.length; k++) {
            File[] folders = FactoryUtils.getFolderListInFolder(path + "/" + className[k]);
            folders = FactoryUtils.shuffle(folders, 123);
            int nr = folders.length;
            int n_train = (int) Math.round(nr * train_r);
            int n_test = nr - n_train;
            String dest_path = "C:\\Users\\dell_lab\\Desktop\\ds_split";
            FactoryUtils.makeDirectory(dest_path + "/" + className[k]);
            String train_path = dest_path + "/" + className[k] + "/train";
            FactoryUtils.makeDirectory(train_path);
            String test_path = dest_path + "/" + className[k] + "/test";
            FactoryUtils.makeDirectory(test_path);
            for (int i = 0; i < nr; i++) {
                if (i < n_train) {
                    FactoryUtils.copyDirectory(folders[i], new File(train_path + "\\" +folders[i].getName()));
                } else {
                    FactoryUtils.copyDirectory(folders[i], new File(test_path + "\\"  +folders[i].getName()));
                }
            }
        }

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\DynamicCodeExecution.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 *
 * @author cezerilab
 */

public class DynamicCodeExecution {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        // Yazılan sınıfın kodunu String olarak girin.
        String sinifKodu = "public class SinifOrnek {" +
                "    public static void main(String[] args) {" +
                "        System.out.println(\"Merhaba Dünya!\");" +
                "    }" +
                "}";

        // Sınıf kodunu byte dizisine dönüştürme.
        byte[] sinifByteDizisi = sinifKodu.getBytes();

        // Sınıfı yükleme.
        ClassLoader classLoader = new ByteClassLoader();
        
        try {
            Class<?> sinif = classLoader.loadClass("SinifOrnek");

            // Sınıfın main metodunu bulma.
            Method mainMetod = sinif.getMethod("main", String[].class);

            // main metodunu çalıştırma.
            mainMetod.invoke(null, new Object[] {new String[] {}});
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    static class ByteClassLoader extends ClassLoader {
        public Class<?> loadClass(String name, byte[] bytecode) {
            return defineClass(name, bytecode, 0, bytecode.length);
        }
    }
}



============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TaskList.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class TaskList {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        
        String line;
        Process p = Runtime.getRuntime().exec("tasklist.exe");
        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
        while ((line = input.readLine()) != null) {
            System.out.println(line);
        }
        input.close();
        
        CMatrix cm = CMatrix.getInstance().randn(5000,2).map(0, 100).hist(100);
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\Test4KImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.image.BufferedImage;

/**
 *
 * @author BAP1
 */
public class Test4KImage {

    public static void main(String[] args) {
//        BufferedImage
        CMatrix cm=CMatrix.getInstance().imread("images\\leopard4k.jpeg")
//        CMatrix cm=CMatrix.getInstance().imread("images\\kaplan1.jpg")
//        CMatrix cm = CMatrix.getInstance().imread("images\\pullar.png")
                .imshow("rgb")
                .imhist("rgb")
                .rgb2hsv()
                .imshow("hsv")
                .im2bw()
                .imshow("binary")
//                .rgb2hsv()
//                .imshow("hsv")
//                .rgb2gray()
//                .imshow("gray")
//                .im2bw(185,195)
//                .imshow("binary")
//                .imwrite("images\\output.png")
                //                .imhist("pullar rgb")                
                //                .imhistRed("red channel histogram")
                //                .imhistGreen("green channel histogram")
                //                .imhistBlue("blue channel histogram")
//                .rgb2hsv()
//                .imshow("hsv")
//                .hsv2rgb()
//                .imshow("rgb yeniden") 
//                .imhist("hsv")
                //                .rgb2gray()
                //                .imshow("gray")
                //                .toNewColorSpace(BufferedImage.TYPE_3BYTE_BGR)
                //                .imshow("rgb")
                //                .imhist()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAdaptiveClaheImageEnhancement.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import jazari.image_processing.AdaptiveConcurrentClahe;
import jazari.matrix.CMatrix;
import org.opencv.core.Core;

/**
 *
 * @author cezerilab
 */
public class TestAdaptiveClaheImageEnhancement {
    static{
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    public static void main(String[] args) {
        //String filePath = "images/1-126.jpg"; // Resim dosyasının yolu
//        String filePath = "images/e1.jpg"; // Resim dosyasının yolu
        String filePath = "images/bf.jpg"; // Resim dosyasının yolu
        BufferedImage image = CMatrix.getInstance().imread(filePath).imshow().getImage();
        AdaptiveConcurrentClahe clahe=new AdaptiveConcurrentClahe();
        BufferedImage img2=clahe.process(image);
        CMatrix cm = CMatrix.getInstance(img2).imshow();
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAdaptiveThreshold.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;

/**
 *
 * @author cezerilab
 */
public class TestAdaptiveThreshold {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/pullar.png")
                //.imread("images/bird.jpg")
                //.drawLine(0, 100, 300, 100, 3, Color.yellow)
                .imshow("original")
//                .imthresholdColorRange(100,255,10,70,20,100)
//                .imshow()
//                .rgb2gray()
//                //.threshold(45)
//                //.threshold(45,110)
//                //.thresholdOtsu()
//                .binarizeOtsu()
//                .imshow("after threshold")
//                //.drawLine(0, 0, 300, 0, 3, Color.white)
//                
//                .imshow()
                ;
//        float[] ff=cm.getPixelColorARGB(11,11);
//        float f=cm.clone().rgb2gray().getPixelColorGray(11,11);
//        int a=3;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAlmondClassification.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.io.File;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestAlmondClassification {

    int[][] griGoruntu = {
        {100, 150, 200},
        {50, 75, 125},
        {25, 60, 80}
    };

    static String path = "D:\\DATASETS\\classification\\almond_dataset";

    public static void main(String[] args) {
        preAnalysis(path + "/DAMAGED/Damaged (221).JPG");
        preAnalysis(path + "/NODAMAGE/nodamage (85).JPG");
//        checkRoughness("NODAMAGE");
//        checkRoughness("DAMAGED");
    }

    private static void preAnalysis(String p) {
        CMatrix cm = CMatrix.getInstance()
                .imread(p)
                //.imshowAutoResized(true)
                .rgb2gray()
                //.imshowAutoResized(true)
                .filterGaussian(3)
                //                .filterGaussian(3)
                //                .filterGaussian(3)
                //.imshowAutoResized(true)
                .edgeDetectionCanny()
                .imshowAutoResized(true);
        float m = cm.meanTotal();
        System.out.println("mean = " + m);
    }

    private static void checkRoughness(String className) {
        String p = path + "/" + className;
        File[] imageFiles = FactoryUtils.getFileArrayInFolderByExtension(p, "JPG");
        float[] means = new float[imageFiles.length];
        int i = 0;
        for (File imageFile : imageFiles) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(imageFile)
                    .rgb2gray()
                    .filterGaussian(3)
                    .filterGaussian(3)
                    .filterGaussian(3)
                    .edgeDetectionCanny();
            means[i] = cm.meanTotal();
            System.out.println(imageFile.getName() + ":" + means[i]);
            i++;
        }
        CMatrix cm = CMatrix.getInstance(means).transpose().plot();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAlphaBlendingDistributionHistogram.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestAlphaBlendingDistributionHistogram {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\pullar.png").imshow();//.imhist();
        CMatrix cm1 = CMatrix.getInstance().randn(1,1000, -12.3f,23.5f).transpose();
        CMatrix cm2 = CMatrix.getInstance().randn(1, 1000, 144.5f, 165.65f).transpose();
        CMatrix cm3 = CMatrix.getInstance().randn(1, 1000, -500.5f, -15.65f).transpose();
        CMatrix cm4 = cm1.cat(1, cm2).cat(1, cm3).hist(100);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAMass.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestAMass {

    public static void main(String[] args) {
        String path = "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\corrected_ds";
        //deneme();
        FactoryUtils.makeDirectory(path + "/yolods");
        FactoryUtils.makeDirectory(path + "/yolods/calc");
        FactoryUtils.makeDirectory(path + "/yolods/calc/train");
        FactoryUtils.makeDirectory(path + "/yolods/calc/test");
        FactoryUtils.makeDirectory(path + "/yolods/mass");
        FactoryUtils.makeDirectory(path + "/yolods/mass/train");
        FactoryUtils.makeDirectory(path + "/yolods/mass/test");
        //generateYoloTxt4OJL(path + "/calc/test", "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\csv\\calc_test.csv", path + "/yolods/calc/test");
        //generateYoloTxt4OJL(path + "/calc/train", "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\csv\\calc_train.csv", path + "/yolods/calc/train");
        //generateYoloTxt4OJL(path + "/mass/test", "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\csv\\mass_test.csv", path + "/yolods/mass/test");
        generateYoloTxt4OJL(path + "/mass/train", "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\csv\\mass_train.csv", path + "/yolods/mass/train");
    }

    private static void deneme() {
        String pp = "D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\corrected_ds\\mass\\train";
        CMatrix cm = CMatrix.getInstance()
                .imread(pp + "/benign_Mass-Training_P_00027_RIGHT_MLO_1_1.jpg")
                .rgb2gray();
        Rectangle rect = FactoryUtils.getWeightCenteredROIAsRectangle(cm.toFloatArray2D());
        System.out.println("rect = " + rect);
//        BufferedImage img=ImageProcess.imread(pp+"/benign_Mass-Training_P_00027_RIGHT_MLO_0.jpg");
//        img=ImageProcess.drawRectangle(img, rect, 5, Color.yellow);
//        CMatrix.getInstance(img).imshow();
        int w = 541;
        int h = 850;
        String txt = FactoryUtils.toYoloNativeTxtFormat(0, rect, w, h);
        System.out.println("txt = " + txt);
        FactoryUtils.saveFile(pp + "/benign_Mass-Training_P_00027_RIGHT_MLO_0.txt", txt);
    }

    private static void generateYoloTxt4OJL(String dsPath, String csvPath, String targetPath) {
        File[] files = FactoryUtils.getFileArrayInFolderByExtension(dsPath, "jpg");
        List<File> lst = Arrays.asList(files);
        String[] content = FactoryUtils.readFile(csvPath).split("\n");
        for (int i = 1; i < content.length; i += 2) {
            String[] s = content[i].split(",");
            String ss = s[11].split("/")[0];
            List<File> filteredFiles = lst.stream()
                    .filter(file -> file.getName().contains(ss))
                    .collect(Collectors.toList());
            String name = "";
            String txt = "";
            for (File filteredFile : filteredFiles) {
                if (filteredFile == filteredFiles.get(0)) {
                    FactoryUtils.copyFile(filteredFile, new File(targetPath + "/" + filteredFile.getName()));
                    name = FactoryUtils.getFileName(filteredFile.getName()) + ".txt";
                } else {
                    BufferedImage img = ImageProcess.imread(filteredFile);
//                    if (filteredFile.getAbsolutePath().equals("D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\corrected_ds\\calc\\train\\malignant_Calc-Training_P_00266_LEFT_MLO_1_1.jpg")) {
//                        System.out.println("burada dur");
//                    }
                    float[][] f = ImageProcess.to2DFloat(img);
                    Rectangle rect=null;
                    try {
                        rect = FactoryUtils.getWeightCenteredROIAsRectangle(f);
                    } catch (Exception e) {
                        System.out.println("************************* hata ******************* -->"+e.toString());
                    }
                    //1 0.68960524 0.5822785 0.23180008 0.1107595
                     
                    int w = img.getWidth();
                    int h = img.getHeight();
                    if (1.0f*rect.width/w > 0.95 || 1.0f*rect.height/h > 0.95) {
                        continue;
                    }
                    int classIndex = name.contains("benign") ? 0 : 1;
                    txt += FactoryUtils.toYoloNativeTxtFormat(classIndex, rect, w, h) + "\n";
                }
            }
            System.out.println("txt = " + txt);
            FactoryUtils.saveFile(targetPath + "/" + name, txt);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAnimatedPlot.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.interfaces.call_back_interface.CallBackAppend;
import jazari.matrix.CMatrix;

/**
 *
 * @author HP-pc
 */
public class TestAnimatedPlot {

    public static void main(String[] args) {

        CMatrix cm = CMatrix.getInstance()
                .range(0, 100)
                .perlinNoise()                
                .plotAnimated(1000, 100, new CallBackAppend() {
                    @Override
                    public float[] append(int index) {
                        float f1 = FactoryUtils.perlinNoise(index, 0.07f);
                        return new float[]{f1};
                    }
                });

//        CMatrix cm=CMatrix.getInstance();
//        cm.holdOn();
////        FramePlot frm=new FramePlot(cm);
////        frm.setVisible(true);
//        for (int i = 0; i < 1000; i++) {
//            float incr=i/10.0f;
//            //cm=cm.vector(12, 0.1,24).gaussmf(1.23, 17+i/100.0);
//            cm=cm
//                    .range(0.0f-incr, 0.1f,100-incr)
//                    .timesScalar(10*(float)Math.PI/180).cos();
//            
//            cm.plot();
//            try {
//                Thread.sleep(10);
//            } catch (InterruptedException ex) {
//                ex.printStackTrace();
//            }
//        }
//        cm.holdOff();
////        cm.plot();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAnnotations.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestAnnotations {
    public static void main(String[] args) {
        String path="C:\\Users\\cezerilab\\Desktop\\object_detection_dataset\\images\\val";
        CMatrix cm = CMatrix.getInstance()
//                .imread(path)
//                .imshow()
//                .reduceImageSize(path,1500,1000)
//                .annotateImages(path)
                .convertPascalVoc2Yolo(path,new String[]{"0:object"})
//                .convertPascalVoc2Yolo(path,new String[]{""
//                      + "0:park_yapilmaz",
//                        "1:car",
//                        "2:person",
//                        "3:park",
//                        "4:stop",
//                        "5:engelli_park",
//                        "6:truck",
//                        "7:bisiklet",
//                        "8:sola_viraj",
//                        "9:bus",
//                        "10:durak",
//                        "11:sola_donulmez",
//                        "12:yaya_gecidi",
//                        "13:green_light",
//                        "14:girilmez",
//                        "15:ileri_veya_saga",
//                        "16:ileri_veya_sola",
//                        "17:ileri",
//                        "18:red_light",
//                        "19:ada",
//                        "20:saga_mecburi",
//                        "21:sola_mecburi",
//                        "22:saga_viraj",
//                        "23:saga_donulmez",
//                        "24:gidis_gelis",
//                        "25:saga_serite_gir",
//                        "26:sola_serite_gir",
//                        "27:duba"
//                })
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAPIDocJS.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import java.lang.reflect.Method;

/**
 *
 * @author cezerilab
 */
public class TestAPIDocJS {
    public static void main(String[] args) {
        String s=FactoryUtils.readFile("src/cezeri/matrix/CMatrix.java");
        String[] ss=s.split("public ");
        System.out.println("len:"+ss.length);
        Method[] methods=CMatrix.class.getDeclaredMethods();
        System.out.println("length:"+methods.length);
        for (Method method : methods) {
            String s1=method.toString()
                    .replace("cezeri.matrix.", "")
                    .replace("CMatrix.", "")
                    .replace("java.lang.", "")
                    .replace("call_back_interface.", "")
                    .replace("cezeri.interfaces.", "")
                    .replace("java.awt.", "")
                    .replace("java.awt.image.", "")
                    .replace("java.awt.", "")
                    .replace("java.util.", "")
                    .replace("cezeri.types.", "")
                    .replace("cezeri.gui.", "")
                    .replace("cezeri.enums.", "")
                    ;
            System.out.println(s1);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestApplyFunction.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestApplyFunction {
    public static void main(String[] args) {
        CMatrix cm_1 = CMatrix.getInstance()
                .range(0,80)
                .multiplyScalar(0.33f)               
                ;
        CMatrix cm_2 = CMatrix.getInstance()
                .range(80,180)
                .multiplyScalar(3.7f)
                .minusScalar(269.93f)
                ;
        CMatrix cm_3 = CMatrix.getInstance()
                .range(180,256)
                .multiplyScalar(0.56f) 
                .addScalar(292.43f)
                ;
        CMatrix cm_total = cm_1.cat(2, cm_2).cat(2, cm_3)
                .map(0, 255)
                .round()
                .transpose()
                .plot()
                ;
        
        CMatrix cm = CMatrix.getInstance().imread("images/alyuvar.jpg")
                .rgb2gray()
                .imshow()
                .applyFunction(cm_total)
                .imshow();
         
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestARFFWeka.java
============================================================

package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author elcezerilab
 */
public class TestARFFWeka {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.fromARFF("data\\digit.arff").showDataGrid();
        
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestArrayConversion.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author HP-pc
 */
public class TestArrayConversion {
    public static void main(String[] args){
        CMatrix cm=CMatrix.getInstance().tic().readImage("images\\horoz.jpg").toc("img read:").
                showImage().toc("show:").
                edgeDetectionCanny().toc("canny:").imshow().
                edgeDetectionSobel(50).toc("sobel:").imshow().
                edgeDetectionMusa(150).toc("musa:").imshow();
//        CMatrix cm=CMatrix.getInstance()
//                .tic()
//                .rand(1500,200).toc("rand:")
//                .eig().toc("eig:")
//                .entropy().toc("entropy:");
//        
//       CMatrix cm=CMatrix.getInstance(CMatrix.getInstance().
//               rand(5, 10).
//               //println().
//               to1DArrayDouble());
               //println().
               //toNewFile();
    //CMatrix cm2=CMatrix.getInstance().readFile("C:\\Users\\HP-pc\\Documents\\cm.txt");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestAssert.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

/**
 *
 * @author BAP1
 */
public class TestAssert {
/**
 * For regular Apps and Swing Apps:

Right click on the project in the Project Explorer
Choose Properties (at the bottom of pop up menu)
Choose Run (under Categories)
Set the VM Options field to include -enableassertions
Click [OK]
 * @param args 
 */
    public static void main(String[] args) {
        int b = 110;
        int c = 0;
        int a = divide(b, c);
        System.out.println("a:" + a);
        doSomething(null);
    }

    private static int divide(int b, int c) {
        assert (c == 0);
        return b / c;
    }

    /**
     * Assertions are a development-phase tool to catch bugs in your code. 
     * They're designed to be easily removed, so they won't exist in production code. 
     * So assertions are not part of the "solution" that you deliver to the customer. 
     * They're internal checks to make sure that the assumptions you're making are correct. 
     * The most common example is to test for null. Many methods are written like this:
     * 
     * Very often in a method like this, the widget should simply never be null. 
     * So if it's null, there's a bug in your code somewhere that you need to track down. 
     * But the code above will never tell you this. So in a well-intentioned effort to write 
     * "safe" code, you're also hiding a bug. It's much better to write code like this:
     * @param Widget widget Should never be null
     */
    static void doSomething(String widget) {
        assert widget != null;
        //widget.toCharArray(); // ...
        // do more stuff with this widget
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBarPlotExample.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import javax.swing.*;
import java.awt.*;

public class TestBarPlotExample extends JFrame {

    public TestBarPlotExample(String title) {
        super(title);
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Verileri temsil eden dizi
        int[] values = {10, 20, 15, 25};

        // Etiketler
        String[] labels = {"Bar 1", "Bar 2", "Bar 3", "Bar 4"};

        // Grafik paneli
        JPanel chartPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                drawBarPlot(g, values, labels);
            }
        };

        setContentPane(chartPanel);
    }

    private void drawBarPlot(Graphics g, int[] values, String[] labels) {
        int barWidth = 40;
        int spacing = 10;
        int x = 50;
        int yScale = 5;

        for (int i = 0; i < values.length; i++) {
            int barHeight = values[i] * yScale;

            // Bar'ı yukarı doğru çiz
            g.fillRect(x, getHeight() - barHeight, barWidth, barHeight);

            // Etiketleri çiz
            g.setColor(Color.BLACK);
            drawRotatedString(g, labels[i], x + barWidth / 2, getHeight() - barHeight - 5, -Math.PI / 2);

            x += barWidth + spacing;
        }
    }

    private void drawRotatedString(Graphics g, String text, int x, int y, double angle) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.rotate(angle, x, y);
        g2d.drawString(text, x, y);
        g2d.rotate(-angle, x, y);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            TestBarPlotExample example = new TestBarPlotExample("Bar Plot Örneği");
            example.setVisible(true);
        });
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBenchMark.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import jazari.matrix.CMatrix;
import jazari.types.TMatrixCell;

/**
 *
 * @author cezerilab
 */
public class TestBenchMark {

    public static void main(String[] args) {
        List<String> lst=new ArrayList();
//        test_1(3,4096);
//        test_multiply_matrices();
        test_find_max_min(10, 4096);
    }

    private static void test_multiply_matrices() {
        CMatrix cm_1 = CMatrix.getInstance().range(4).reshape(2, 2).println();
        CMatrix cm_2 = CMatrix.getInstance().range(4).reshape(2, 2).println();
        CMatrix cm_3 = cm_1.mul(cm_2).println();
        CMatrix cm_4 = cm_1.dot(cm_2).println();
    }

    private static void test_1(int n, int size) {
        CMatrix cm_1 = CMatrix.getInstance().randn(size, size).mul(100).round();
        CMatrix cm_2 = CMatrix.getInstance().randn(size, size).mul(100).round();
        CMatrix cm_3 = cm_1.dot(cm_2);
        long t = System.currentTimeMillis();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                long cmt = System.currentTimeMillis();
                CMatrix cm1 = CMatrix.getInstance().randn(size, size).multiplyScalar(100).round();
                CMatrix cm2 = CMatrix.getInstance().randn(size, size).multiplyScalar(100).round();
                CMatrix cm3 = cm1.mul(cm2);
                System.out.println((i * n + j) + ". loop cmatrix cost = " + (System.currentTimeMillis() - cmt) + " ms");
            }
            System.gc();
        }
        System.out.println("\naverage overall cost = " + (1.0 * (System.currentTimeMillis() - t) / (n * n)) + " ms");
    }

    private static void test_find_max_min(int n, int size) {
        CMatrix.getInstance().randn(size, size).mul(10000).round().max();
//        float f=cmx.argMax();
//        float val=cmx.getArray1Dfloat()[(int)f];
//        System.out.println("val = " + val);
//        System.out.println("f = " + f);
//        System.out.println("max="+cmx.max());
        long t = System.currentTimeMillis();
        CMatrix cm = CMatrix.getInstance().randn(size, size).mul(10000).round();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                long cmt = System.currentTimeMillis();
//                CMatrix.getInstance().randn(size, size).mul(10000).round().max();
//                CMatrix.getInstance().randn(size, size).mul(10000).round().min();
//                float max=cm.argMax();
//                float min=cm.argMin();
//                CMatrix cm = CMatrix.getInstance().randn(size, size).mul(10000).round();
                TMatrixCell mc_max = cm.max();
                TMatrixCell mc_min = cm.min();
                System.out.println((i * n + j) + ". loop cmatrix cost = " + (System.currentTimeMillis() - cmt) + " ms " + mc_max + " " + mc_min);
            }
            System.gc();
        }
        System.out.println("\naverage overall cost = " + (1.0 * (System.currentTimeMillis() - t) / (n * n)) + " ms");
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBenchmarkCMatrix.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestBenchmarkCMatrix {
    public static void main(String[] args) {
        int n=5000;
        for (int i = 0; i < 10; i++) {
            long t1 = System.currentTimeMillis();
            CMatrix cm = CMatrix.getInstance().randn(n, n).dot(CMatrix.getInstance().randn(n,n));
            long t2 = System.currentTimeMillis() - t1;
            System.out.println("t2 = " + t2);
        }
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBigData.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TLearningType;

/**
 *
 * @author BAP1
 */
public class TestBigData {
    public static void main(String[] args) {
        CMatrix cm=CMatrix.getInstanceFromFile("data\\Kaggle_Digits_1000.txt", ",");
        CMatrix cm1=cm.cmd(":","1:end");
        CMatrix cm2=cm.cmd(":","0");
        CMatrix cm3=cm1.cat(1, cm2).showDataGrid().toWekaArff("data\\digit.arff",TLearningType.CLASSIFICATION);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBigDecimal.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.math.BigDecimal;
import jazari.utils.bigdecimal.BigDecimalMath;

/**
 *
 * @author cezerilab
 */
public class TestBigDecimal {

    public static void main(String[] args) {
        BigDecimal b1 = new BigDecimal("4");
        BigDecimal b2 = new BigDecimal("2500000");//.divide(new BigDecimal(31536000));
        System.out.println("sonuc b1 taban:"+b1.pow(b2.intValue()));
        System.out.println("sonuc b2 taban:"+b2.pow(b1.intValue()));
//        int n = 365 * 24 * 3600;
//        System.out.println("n = " + n);
//        BigDecimal ret=BigDecimalMath.pow(b2, b2);
//        System.out.println("ret = " + ret);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBitPlaneSlicing.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryUtils;

/**
 *
 * @author BAP1
 */
public class TestBitPlaneSlicing {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg").rgb2gray().imshow();
                cm.clone().bitPlaneMSB().imshow("MSB image");
                cm.clone().bitPlane(7).add(cm.clone().bitPlane(6)).add(cm.clone().bitPlane(5)).imshow("first three msb image");
                cm.clone().bitPlane(0).imshow("first slice image");
                cm.clone().bitPlane(1).imshow("second slice image");
                cm.clone().bitPlane(2).imshow("third slice image");
                cm.clone().bitPlane(3).imshow("forth slice image");
                cm.clone().bitPlane(4).imshow("fifth slice image");
                cm.clone().bitPlane(5).imshow("sixth slice image");
                cm.clone().bitPlane(6).imshow("seventh slice image");
                cm.clone().bitPlane(7).imshow("eighth slice image the most significant bit");

//        int a = 23;
//        System.out.println("a = " + Integer.toBinaryString(a));
//        System.out.println("a = " + FactoryUtils.formatBinary(8,a));
//        for (int i = 0; i < 8; i++) {
//            char c=Integer.toBinaryString(a).toCharArray()[i];
//            System.out.print(c);
//        }
//        System.out.println("");

    }

    private static String formatBinary(int n,int p) {
        char[] chars = new char[n];
        for (int j = 0; j < n; j++) {
            chars[j] = (char) (((p >>> (n - j - 1)) & 1) + '0');
        }
        System.out.println(chars);
        return String.valueOf(chars);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBlobDetection.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestBlobDetection {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/coins.png")
                .imshow()
                .histeq()
                .imshow()
                .filterGaussian(5)
                .imshow()            
                
                ;
//        CMatrix cm2 = CMatrix.getInstance()
//                .make_blobs(500, 5, 5)
//                .scatter()
//                //.println()
//                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBoundingBox.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import jazari.utils.pascalvoc.PascalVocBoundingBox;
import jazari.utils.pascalvoc.AnnotationPascalVOCFormat;
import jazari.utils.pascalvoc.PascalVocObject;

/**
 *
 * @author cezerilab
 */
public class TestBoundingBox {
    public static void main(String[] args) {
        String pathXML="D:\\Dropbox\\NetbeansProjects\\OpenJazariLibrary\\images\\images\\images";
//        //yazmak için
//        List<PascalVocObject> lst = new ArrayList();
//        lst.add(new PascalVocObject(new BoundingBox("levha_1", new Rectangle(12, 13, 100, 100),0,0)));
//        lst.add(new PascalVocObject(new BoundingBox("levha_2", new Rectangle(40, 43, 50, 30),0,0)));
//        String xml=BoundingBoxUtils.serializePascalVocXML("images", "bird.jpg", "C:\\Dropbox\\NetbeansProjects\\OpenJazariLibrary\\images\\bird.jpg", lst);
//        System.out.println("xml = " + xml);
//        
//        //okumak için
        AnnotationPascalVOCFormat bb=FactoryUtils.deserializePascalVocXML(pathXML+"\\43.xml");
        System.out.println(bb.lstObjects.get(0).bndbox);
        
        //pascal voc formatından csv formatına almak için
        String csvString=FactoryUtils.convertPascalVoc2CsvFormatBndBox(pathXML,"D:/train.csv");
        System.out.println("csvString = " + csvString);
        
        //resimden bounding box yapmak için
        //CMatrix cm = CMatrix.getInstance().imread("images/bird.jpg").imshow();

        //pascalvocxml dosyalarını reference table a göre yolo formatına döndürmek
//        BoundingBoxUtils.convertPascalVoc2YoloFormat("images/images/images", "labels_map.txt");
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBrowseFile.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.io.File;
import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestBrowseFile {
    public static void main(String[] args) {
        File file=FactoryUtils.browseFile();
        System.out.println("file = " + file);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestBruteForceAttack.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestBruteForceAttack {

    public static void main(String[] args) {
        String pass = "zdemox";
        char[] pool = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        for (int i = 0; i < 1; i++) {
            CMatrix.getInstance().bruteForceAttack(pool, pass, false, 1_000_000_000);
        }
        System.out.println("merhaba");
        System.exit(0);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestByte.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

/**
 *
 * @author hakmesyo
 */
public class TestByte {
    
    public static void main(String[] args) {
        byte a=127;
        System.out.println("a:"+a);
        a+=128;
        System.out.println("a:"+a);
        int b=a&0xFF;
        System.out.println("b:"+b);
        char c='a';
        byte q=(byte)c;
        System.out.println("q:"+q);
        short s=(short)255;
        System.out.println("short val:"+s);
        s+=127;
        System.out.println("short val:"+s);
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCalculateFileHistogramInFolder.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.Map;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestCalculateFileHistogramInFolder {
    static String path = "D:\\Dropbox\\NetbeansProjects\\LaserWeedingImageAcquisitionApp\\images\\ds";
    public static void main(String[] args) {
        //byFileName(path);
        byFolderName("C:\\Users\\cezerilab\\Desktop\\structured_folder");
    }

    private static void byFileName(String path) {
        Map map=FactoryUtils.getHashMapHistogramByFileName(path,"_");
        String[] labels=FactoryUtils.resolveHashMapToLabels(map);
        float[] val=FactoryUtils.resolveHashMapToArray(map);
        CMatrix cm = CMatrix.getInstance(val)
                .showBar(labels)
                ;
    }

    private static void byFolderName(String path) {
        Map map=FactoryUtils.getHashMapHistogramByFolderName(path);
        String[] labels=FactoryUtils.resolveHashMapToLabels(map);
        float[] val=FactoryUtils.resolveHashMapToArray(map);
        CMatrix cm = CMatrix.getInstance(val)
                .showBar(labels)
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCamera.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import jazari.factory.FactoryUtils;
import jazari.factory.FactoryWebCam;
import jazari.gui.FrameBasicImage;
import jazari.gui.FrameImage;
import jazari.image_processing.ImageProcess;
import jazari.interfaces.call_back_interface.CallBackCamera;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestCamera {

    public static void main(String[] args) {
        //        CMatrix cm = CMatrix.getInstance() //                .startCamera(0, new Dimension(1280, 720),new Dimension(640,360))  
        //                .startCamera(new Dimension(640, 480), 30)
        //                .startCamera(0, new Dimension(1280, 720)) 
        //                .startCamera(0, new Dimension(1920, 1080), new Dimension(640,360))               
        //                .startCamera(0, new Dimension(1920, 1080))               
        //                .startCamera(0)               
        ;
//        FactoryWebCam factoryWebCam = new FactoryWebCam().openWebCam(0).startWebCAM(30);
//        Webcam webCam = factoryWebCam.webCam;
//        WebcamPanel panel = new WebcamPanel(webCam);
//        panel.setImageSizeDisplayed(true);
//        //panel.setFPSLimited(true);
//        //panel.setFPSLimit(30);
//        panel.setFPSDisplayed(true);
//
//        JFrame window = new JFrame("Test webcam panel");
//        window.add(panel);
//        window.setResizable(true);
//        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        window.pack();
//        window.setVisible(true);

//        FactoryWebCam factoryWebCam = FactoryWebCam.getInstance().openWebCam(0);
//        FrameBasicImage frm=new FrameBasicImage();
//        frm.setVisible(true);
//        frm.setSize(640, 480);
//
//        new Thread(new Runnable() {
//            @Override
//            public void run() {
//                while (true) {
//                    BufferedImage img = factoryWebCam.getImage();
//                    img=ImageProcess.rgb2gray(img);
//                    //img=ImageProcess.pixelsToImageGray(ImageProcess.edgeDetectionCanny(img));
//                    frm.setImage(img);
//                    try {
//                        Thread.sleep(30);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(TestCamera.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        }).start();
//        FactoryWebCam cam = FactoryWebCam.getInstance().openWebCam(0);
//        cam.setCallback(true, new CallBackCamera() {
//            @Override
//            public BufferedImage onFrame(BufferedImage image) {
//                image = ImageProcess.rgb2gray(image);
//                image = ImageProcess.flipImageLeft2Right(image);
//                return image;
//            }
//        });
        //CMatrix cm1 = CMatrix.getInstance();
        FrameBasicImage frm=new FrameBasicImage();
        frm.setVisible(true);
        CMatrix cm = CMatrix.getInstance()
//                .startCamera(0)
                .startCamera(0,false, (BufferedImage image) -> {
                    //image = ImageProcess.rgb2gray(image);
                    image = ImageProcess.flipImageLeft2Right(image);
                    //image = ImageProcess.rgb2hsv(image);
                    //image = ImageProcess.edgeDetectionCannyAsImage(image);
                    //image = ImageProcess.mosaicImageFast(image, 15);
                    frm.setImage(image);
                    return image;
        })
        ;
        
        FactoryUtils.bekleUntilPressEnter();
        System.exit(0);

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCameraObserverSarxos.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.device.webcam.TestWebCamViewer;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author BAP1
 */
public class TestCameraObserverSarxos implements WebcamListener{
    private Webcam webcam;
    
    public static void main(String[] args) {
        TestCameraObserverSarxos frm=new TestCameraObserverSarxos();
        frm.start();
    }

    @Override
    public void webcamOpen(WebcamEvent we) {
        System.out.println("Webcam is opened now");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
        System.out.println("Webcam is closed now");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
        System.out.println("Webcam is disposed now");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
        System.out.println("received new image");
    }

    private void start() {
        webcam = Webcam.getWebcams().get(1);
        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(TestCameraObserverSarxos.this);
        webcam.open();  
        BufferedImage bf=webcam.getImage();
        try {
            Thread.sleep(10000);
        } catch (InterruptedException ex) {
            Logger.getLogger(TestCameraObserverSarxos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCezeriMLP.java
============================================================
package test;

import jazari.machine_learning.classifiers.C_MLP;
import jazari.matrix.CMatrix;

public class TestCezeriMLP {

    public static void main(String[] args) {
        float[] class_labels = {-1,1}; CMatrix[][] cm = CMatrix.getInstance().importdata("data\\diabetes.txt", ",").shuffleRows().crossValidationSets(10);
//        float[] class_labels = {1, 2, 3}; CMatrix[][] cm = CMatrix.getInstance().importdata("data\\iris.txt", ",").shuffleRows().crossValidationSets(10);
//        float[] class_labels = {-1, 1}; CMatrix[][] cm = CMatrix.getInstance().importdata("data\\tic-tac-toe_all.txt", ",").shuffleRows().crossValidationSets(10);
        
        float acc=0,sum=0;
        for (int i = 0; i < cm.length; i++) {
            float[][] dsTrain = cm[i][0].toFloatArray2D();
            float[][] dsTest = cm[i][1].toFloatArray2D();
            C_MLP mlp = new C_MLP(dsTrain, dsTest, class_labels, 1, 10, 3, 1000, 0.1f, 0.3f);
            mlp.doTrain();
            acc=mlp.doTest();
            sum+=acc;
            System.out.println(i+".fold accuracy:"+acc);
        }
        System.out.println("accuracy:"+sum/cm.length);

//        CMatrix cm = CMatrix.getInstance().vector(1,5).println().normalizeMinMax().println();

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestChangeImageFileExtension.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestChangeImageFileExtension {
    public static void main(String[] args) {
        String path="C:\\Users\\cezerilab\\Desktop\\ds_robotaksi\\trafik_dataset\\segmentation\\ds_lane";
        FactoryUtils.changeImageFileExtension(path, "png", "jpg");
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestChangeImageType.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.image.BufferedImage;
import java.io.File;
import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;

/**
 *
 * @author cezerilab
 */
public class TestChangeImageType {
    public static void main(String[] args) {
        String path="C:\\Users\\cezerilab\\Desktop\\UYZ_veriseti\\Train";
        FactoryUtils.makeDirectory(path+"/ds");
        File[] files=FactoryUtils.getFileArrayInFolder(path);
        for (File file : files) {
            if (file.isDirectory()) {
                continue;
            }
            BufferedImage img=ImageProcess.imread(file);
            ImageProcess.saveImage(img, file.getParent()+"/ds/"+System.currentTimeMillis()+".jpg");
        }
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCheckerBoard.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;

/**
 *
 * @author cezerilab
 */
public class TestCheckerBoard {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .ones(50,50)
                .cat(1, CMatrix.getInstance().zeros(50,50))                
                .cat(2, CMatrix.getInstance().zeros(50,50).cat(1, CMatrix.getInstance().ones(50,50)))
                .map(0, 255)                
//                .replicateColumn(3)
//                .replicateRow(3)
//                .replicate(3)
                .replicate(3,3)
                .imshow()  
//                .heatmap(Color.BLUE)
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCircularProgressBar.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestCircularProgressBar {
    public static void main(String[] args) {
        for (int i = 1; i <= 100; i++) {
            FactoryUtils.showCircularProgressBar(i);
            FactoryUtils.sleep(10);
        }
        for (int i = 1; i <= 100; i++) {
            FactoryUtils.showCircularProgressBar(i);
            FactoryUtils.sleep(10);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCMatrix.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryUtils;
import jazari.types.TMatrixOperator;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.IntPredicate;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 *
 * @author BAP1
 */
public class TestCMatrix {

    public static void main(String[] args) {
        
        System.out.println("current dir:" + FactoryUtils.getCurrentDirectory());
        CMatrix.getInstance().range(10, 20).println();
        //CMatrix cm = CMatrix.getInstance().rand(3, 5).println();
        CMatrix cm = CMatrix.getInstance().diag(CMatrix.getInstance().range(10, 20)).println();
        //test_vector_or_range();

//        CMatrix.getInstance().rand(500,300).imshow().scale(255).imshow();
//        String path = ".\\images\\E1.jpg";
//        Path p = Paths.get(path);
//        String file = p.getFileName().toString();
//        System.out.println(file);
//        Java approach
//        CMatrix.getInstance().readImage().show().showHistogram().showRGB().showHistogramRed().showHistogramGreen().showHistogramBlue().showHistogramAlpha();
//        Matlab approach
//        CMatrix cm=CMatrix.getInstance().imread("C:\\Machine Vision Images\\BAP\\Test\\450_0.01.bmp").imshow();//.imhist().imhistAlpha().imhistRed().imhistGreen().imhistBlue().imhistGray();//.imshowRGB();//.imhist().imshowRGB().pdf().imshow().imhist().showDataGrid();
//        System.out.println("skewness:"+CMatrix.getInstance().imread(".\\images\\t1.bmp").getSkewness());
//        System.out.println("kurtosis:"+CMatrix.getInstance().imread(".\\images\\t1.bmp").getKurtosis());
//        CMatrix.getInstance().randn(500).timesScalar(10000).imshow();
//        CMatrix.getInstance().linspace(0, 360, 360).scale(Math.PI/180).sin().plot().showDataGrid().showImage();
//        CMatrix.getInstance().imread(".\\images\\E2.jpg").imshowRGB().imhist();
//        CMatrix.getInstance().imread(".\\images\\E3.jpg").imshowRGB().imhist();
//        CMatrix.getInstance().readImage().showHistogramAlpha();
//        CMatrix.getInstance().vector(0,255).minusScalar(127).pow(2).plot();
//        CMatrix y=CMatrix.getInstance().vector(0,255).minusScalar(127).pow(2);
//        double n=0.3;
//        System.out.println("n:"+n);
//        System.out.println("n:"+FactoryUtils.formatDouble(n,2));
//        System.out.println("n:"+FactoryUtils.formatDoubleAsString(n, 4));
    }

    private static void test_vector_or_range() {
//        IntStream s1 = IntStream.range(1, 3);
//        IntStream s2 = IntStream.range(1, 3);
//
//        IntStream s3 = Arrays.stream(new int[5]);
//
//        IntStream ist = new Random().ints(850, 0, 100).distinct();

//        for (int i = 0; i < 3; i++) {
//            long t1 = FactoryUtils.tic();
//            new Random()
//                    .ints(85_000_000, 0, 10_000)
//                    .distinct()
//                    .map(e->(int)(2*e*e-3*Math.sin(e*Math.PI/180)))
//                    .filter(e -> (e >= 66 && e <= 720))
//                    .boxed()
//                    .sorted(Collections.reverseOrder())
//                    .forEach(System.out::println);
//            t1 = FactoryUtils.toc("java 8 stream api:", t1);
//        }

//        Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
//        for (int i = 0; i < 100; i++) {
//            long t1 = FactoryUtils.tic();
//            CMatrix cm1 = CMatrix.getInstance()
//                    .rand(1, 85_000, 0, 10_000)
//                    .round()
//                    .distinct();
//            cm1 = cm1.cmd(cm1.find(TMatrixOperator.BETWEEN, 66, 72).toIntArray1D())
//                    .sort("column", "descend")
//                    .println();
//            ;
//            t1 = FactoryUtils.toc("OCL api:", t1);
//        }

//        IntStream ds=IntStream.range(0, 100)
//                .
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCMatrixDirectMatrixInitialization.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestCMatrixDirectMatrixInitialization {
    public static void main(String[] args) {
        CMatrix A = CMatrix.getInstance(new int[][]{{-4,2,1},{1,6,2},{1,-2,5}}).dump();
        CMatrix b = CMatrix.getInstance(new int[]{-4,23,19}).dump();
        CMatrix x = A.inv().timesElement(b).dump();
        CMatrix xJac = CMatrix.getInstance().jacobianApproximation(A,b,5E-5f).dump();
        CMatrix xJac2 = A.jacobianApproximation(b,5E-5f).dump();
//        System.out.printf("n:%e\n",3E-2);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCMatrixView.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestCMatrixView {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range(30)                
                .println()
                .reshape(1,5,1,6,1)
                .println()
                .squeeze()
                .println()
                .unsqueeze(2)
                .println()
                ;
//        CMatrix cm2 = CMatrix.getInstance()
//                .reshape(cm,6,5)
//                .println()
//                .shape()
//                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestColorSpace.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestColorSpace {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\pullar.png")
                .imshow("rgb")
                .imhist("rgb")
                .rgb2gray()
                .imshow("gray")
                .imhist("gray")
                .rgb2hsv()
                .imshow("hsv")
                .imhist("hsv")
                .rgb2gray()
                .imshow("gray of hsv")
                .imhist("gray of hsv")
//                .im2bw()
//                .imshow("binary")
                .threshold(90,240)
                .imshow("thresholded image")
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCombinationPairs.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.util.Arrays;

/**
 *
 * @author BAP1
 */
public class TestCombinationPairs {
    public static void main(String[] args) {
        String pass="aabd";
        char[] pool="abcçdefgğhıijklmnoöprsştuüvwyz0123456789".toCharArray();
        int n=pool.length;
        String[] comb=CMatrix.getInstance().combinationPairs(pool,4).combinationPairs;
        Arrays.asList(comb).forEach(System.out::println);        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCombinatorial.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryCombination;

/**
 * Get All combination pairs as matlab nchoosek but nchoosek(n,k) 
 * generates only subset k pairs
 * @author BAP1
 */
public class TestCombinatorial {
    public static void main(String[] args) {
        String[] s={"a","b","c","d","e","f","g","h"};
        FactoryCombination.toString(FactoryCombination.getAllCombinations(s));
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCommandParser.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestCommandParser {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().rand(10,5,0,100).round().println();
        CMatrix cm1=cm.cmd(5+":end",":").println();
        cm.cmd("1:3", "1:3").println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestComPorts.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author dell_lab
 */
public class TestComPorts {
    public static void main(String[] args) {
//        String s=FactoryUtils.listPorts();
//        System.out.println("s = " + s);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestConcatenate.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author elcezerilab
 */
public class TestConcatenate {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().rand(2, 3, 1, 7)
                .round()
                .println()
                .concatenateRows()
                .println()
                .concatenateColumns()
                .println()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestConcurrencyAndParallelExecution.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dell_lab
 */
public class TestConcurrencyAndParallelExecution {

    static final int NUM_THREADS = 20;
    //static AtomicLong cnt = new AtomicLong(0);
    static long cnt2 = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
//        long t1 = System.currentTimeMillis();
//        cnt.set(doSequential(0, 100_000_000_000l));
//        System.out.println("cnt = " + cnt + " elapsed:" + (System.currentTimeMillis() - t1));
        
        long t2 = System.currentTimeMillis();
        doParallel(0, 10_000_000_000l);
        //System.out.println("cnt = " + cnt + " elapsed:" + (System.currentTimeMillis() - t2));
        System.out.println("cnt2 = " + cnt2 + " elapsed:" + (System.currentTimeMillis() - t2));
    }

    private static long doSequential(long from, long to) {
        long localCnt = 0;
        //cnt.set(0);
        for (long i = from; i < to; i++) {
            //for (int j = from; j < to; j++) {
                localCnt ++;
            //}
            
        }
        return localCnt;
    }

    private static long doParallel(long from, long to) {
        //cnt.set(0);
        cnt2=0;
        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
        long chunkSize = (to - from) / NUM_THREADS;
        long remainder = (to - from) % NUM_THREADS;

        for (int i = 0; i < NUM_THREADS; i++) {
            long start = from + i * chunkSize;
            long end = start + chunkSize + (i == NUM_THREADS - 1 ? remainder : 0);
            executor.submit(new CounterTask(start, end));
        }

        executor.shutdown();

        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return cnt2;
    }

    static class CounterTask implements Runnable {
        private final long start;
        private final long end;

        public CounterTask(long start, long end) {
            this.start = start;
            this.end = end;
        }

        @Override
        public void run() {
            long localCnt = 0;
            for (long i = start; i < end; i++) {
                //for (int j = start; j < end; j++) {
                    localCnt ++;
                    //cnt.addAndGet(1);
                    //cnt2++;
                //}
                
            }
            //cnt.addAndGet(localCnt);
            cnt2+=localCnt;
        }
    }
}



============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestContrastStretching.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestContrastStretching {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\low_contrast.jpg")
                .imshow()
                .imhist()
                ;
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestConversionColorSpace.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Color;

/**
 *
 * @author BAP1
 */
public class TestConversionColorSpace {

    public static void main(String[] args) {
        int red = 51;
        int green = 102;
        int blue = 153;

// Convert RGB to HSB
        float[] hsb = Color.RGBtoHSB(red, green, blue, null);
        float hue = hsb[0];
        float saturation = hsb[1];
        float brightness = hsb[2];
        System.out.println("RGB [" + red + "," + green + "," + blue + "] converted to HSB [" + hue + "," + saturation + "," + brightness + "]");

// Convert HSB to RGB value
        int rgb = Color.HSBtoRGB(hue, saturation, brightness);

        red = (rgb >> 16) & 0xFF;

        green = (rgb >> 8) & 0xFF;

        blue = rgb & 0xFF;

        System.out.println(
                "HSB [" + hue + "," + saturation + "," + brightness + "] converted to RGB [" + red + "," + green + "," + blue + "]");

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestConvertJsonToPascalVoc.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.File;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import jazari.utils.pascalvoc.AnnotationPascalVOCFormat;

/**
 *
 * @author cezerilab
 */
public class TestConvertJsonToPascalVoc {

    public static void main(String[] args) {
        String folderPath = "C:\\Users\\cezerilab\\Desktop\\dataset\\butterfly_segmentation_yolov8\\butterfly_dataset\\Nature\\test";
        //convertJsonToPascalVoc(folderPath);
        //String filePath = folderPath + "\\butterfly (1).xml";
        //CMatrix cm = CMatrix.getInstance().annotateImagesByFolderPath(folderPath);
        
        //String path=FactoryUtils.convertPascalVoc2YoloFormatBatch(folderPath,"yolov8","segmentation");
        
        //String ret = FactoryUtils.convertPascalVoc2YoloFormatPolygonBatch(filePath, new String[]{"0:butterfly"});
        //FactoryUtils.writeToFile(folderPath + "/" + FactoryUtils.getFileName(filePath) + ".txt", ret);

    }

    private static void convertJsonToPascalVoc(String folderPath) {
        File[] files = FactoryUtils.getFileArrayInFolderByExtension(folderPath, "json");
        int k = 0;
        for (File file : files) {
            AnnotationPascalVOCFormat apv = FactoryUtils.convertJSONtoPascalVoc4Polygon(file.getAbsolutePath());
            if (FactoryUtils.isFileExist(folderPath + "/" + FactoryUtils.getFileName(file.getName()) + ".png")) {
                FactoryUtils.serializePascalVocXML(folderPath, FactoryUtils.getFileName(file.getName()) + ".png", folderPath + "/" + FactoryUtils.getFileName(file.getName()) + ".png", apv.source, apv.lstObjects);
            } else {
                FactoryUtils.serializePascalVocXML(folderPath, FactoryUtils.getFileName(file.getName()) + ".jpg", folderPath + "/" + FactoryUtils.getFileName(file.getName()) + ".jpg", apv.source, apv.lstObjects);
            }
            System.out.println((k++) + ". file = " + file.getName() + " converted to pascalvoc format successfully");
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestConvolution.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import static test.TestOptimizedConvolution.convolve;
import static test.TestOptimizedConvolution.printMatrix;

/**
 *
 * @author BAP1
 */
public class TestConvolution {

    public static void main(String[] args) {
        float[][] kernel = {
            {-1, -1, -1},
            {0, 0, 0},
            {1, 1, 1}
        };
        CMatrix cm_kernel = CMatrix.getInstance(kernel);

        CMatrix cm = CMatrix.getInstance()
                .imread("images/chessboard.PNG")
                .imresize(0.5f)
                .rgb2gray()
                .imshow()
                ;
        
        CMatrix cm1 = cm.clone().conv(cm_kernel).round().map(0, 255).binarizeImage().imshow();//.map(0, 255);//.println().imshow();                
        CMatrix cm2 = cm.clone().conv(cm_kernel.clone().T()).round().map(0, 255).binarizeImage().imshow();//.map(0, 255);//.println().imshow();                
        cm1.add(cm2).map(0, 255).println().imshow();//.add(cm2).add(cm2_1).imshow();
        
//
//        double[][] d_X = {
//            {-1, -1, -1, -1, -1, -1, -1, -1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, -1, 1, -1, -1, -1, 1, -1, -1},
//            {-1, -1, -1, 1, -1, 1, -1, -1, -1},
//            {-1, -1, -1, -1, 1, -1, -1, -1, -1},
//            {-1, -1, -1, 1, -1, 1, -1, -1, -1},
//            {-1, -1, 1, -1, -1, -1, 1, -1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, -1, -1, -1, -1, -1, -1, -1, -1}
//        };
//        double[][] d_M = {
//            {-1, -1, -1, -1, -1, -1, -1, -1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, 1, 1, -1, -1, -1, 1, 1, -1},
//            {-1, 1, -1, 1, -1, 1, -1, 1, -1},
//            {-1, 1, -1, -1, 1, -1, -1, 1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, 1, -1, -1, -1, -1, -1, 1, -1},
//            {-1, -1, -1, -1, -1, -1, -1, -1, -1}
//        };
//        double[][] k_diag_1 = {
//            {1, -1, -1},
//            {-1, 1, -1},
//            {-1, -1, 1}
//        };
//        double[][] k_diag_2 = {
//            {-1, -1, 1},
//            {-1, 1, -1},
//            {1, -1, -1}
//        };
//        int w = 400;
//        CMatrix ck_dg1 = CMatrix.getInstance(k_diag_1).heatmap(Color.cyan, 200, 200, true, true);;
//        CMatrix ck_dg2 = CMatrix.getInstance(k_diag_2).heatmap(Color.cyan, 200, 200, true, true);;
//        CMatrix cm = CMatrix.getInstance(d_X)
//                .heatmap(Color.gray, w, w, true, true);
//        CMatrix cm_dg1 = cm.convolve(ck_dg1)
//                .heatmap(Color.cyan, w, w, true, true);
//        CMatrix cm_dg2 = cm.convolve(ck_dg2)
//                .heatmap(Color.cyan, w, w, true, true);
//
//        // Örnek matris ve kernel
//        int n = 10;
//        float[][] matrix = FactoryMatrix.randMatrix(n, n, 100, 123);
//
//        float[][] kernel = {
//            {1, 0, 1},
//            {0, 1, 0},
//            {1, 0, 1}
//        };
//        CMatrix cm_kernel = CMatrix.getInstance(kernel).heatmap(true);
//
//        // Convolution işlemini paralel olarak gerçekleştir
//        float[][] convolvedMatrix = null;
//        long t1 = FactoryUtils.tic();
//        for (int i = 0; i < 100; i++) {
////            convolvedMatrix = convolveParallel(matrix, kernel);
//            convolvedMatrix = convolve(matrix, kernel);
//            t1 = FactoryUtils.toc(t1);
//        }
////        
////        System.out.println("bitti");
////        // Sonucu yazdır
////        System.out.println("Orijinal Matris:");
////        printMatrix(matrix);
//////
////        System.out.println("\nKernel Matrisi:");
////        printMatrix(kernel);
//////
//        System.out.println("\nConvolution Sonucu:");
//        printMatrix(convolvedMatrix);
//
////        CMatrix cm = CMatrix.getInstance()
////                .randWithSeed(n,n,100,123)
////                
////                
//////                .println()
//////                .convolve(CMatrix.getInstance().setArray(kernel))
//////                .println()
////                ;
////        CMatrix cm2 = CMatrix.getInstance().setArray(kernel);
////        for (int i = 0; i < 2; i++) {            
////            cm.tic().convolve(cm2).toc();
////        }
////        cm.println();
    }

    // Convolution işlemini gerçekleştiren fonksiyon
    public static float[][] convolve(float[][] matrix, float[][] kernel) {
        int matrixRows = matrix.length;
        int matrixCols = matrix[0].length;
        int kernelSize = kernel.length;

        // Sonuç matrisini oluştur
        float[][] convolvedMatrix = new float[matrixRows - kernelSize + 1][matrixCols - kernelSize + 1];

        // Her piksel için convolution işlemini gerçekleştir
        for (int i = 0; i <= matrixRows - kernelSize; i++) {
            for (int j = 0; j <= matrixCols - kernelSize; j++) {
                convolvedMatrix[i][j] = calculateConvolution(matrix, kernel, i, j);
            }
        }

        return convolvedMatrix;
    }

    // Paralel convolution işlemini gerçekleştiren fonksiyon
    public static float[][] convolveParallel(float[][] matrix, float[][] kernel) throws InterruptedException {
        int matrixRows = matrix.length;
        int matrixCols = matrix[0].length;
        int kernelSize = kernel.length;

        // Sonuç matrisini oluştur
        float[][] convolvedMatrix = new float[matrixRows - kernelSize + 1][matrixCols - kernelSize + 1];

        // Kullanılabilir işlemci sayısı kadar thread oluştur
        int numProcessors = Runtime.getRuntime().availableProcessors();
        ExecutorService executor = Executors.newFixedThreadPool(numProcessors);

        // Her satırı ayrı bir thread'de işleyen Runnable'lar oluştur
        for (int i = 0; i <= matrixRows - kernelSize; i++) {
            int row = i;
            executor.execute(() -> {
                for (int j = 0; j <= matrixCols - kernelSize; j++) {
                    convolvedMatrix[row][j] = calculateConvolution(matrix, kernel, row, j);
                }
            });
        }

        // Tüm thread'lerin bitmesini bekle
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);

        return convolvedMatrix;
    }

    // Belirli bir piksel için convolution işlemini hesaplayan fonksiyon
    private static float calculateConvolution(float[][] matrix, float[][] kernel, int row, int col) {
        float sum = 0;
        for (int i = 0; i < kernel.length; i++) {
            for (int j = 0; j < kernel[0].length; j++) {
                sum += matrix[row + i][col + j] * kernel[i][j];
            }
        }
        return sum;
    }

    // Matrisi yazdıran yardımcı fonksiyon
    public static void printMatrix(float[][] matrix) {
        for (float[] row : matrix) {
            System.out.println(Arrays.toString(row));
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCosineTheoremWithDotProduct.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestCosineTheoremWithDotProduct {
    public static void main(String[] args) {
        //buraya bak: https://www.youtube.com/watch?v=Dd16LVt5ct4
        CMatrix cm1 = CMatrix.getInstance(new double[]{3,2,0,5,0,0,0,2,0,0});
        CMatrix cm2 = CMatrix.getInstance(new double[]{3,2,0,5,0,0,0,1,0,2});
        CMatrix cm3 = cm1.cosineSimilarity(cm2).println();
        
        double[][] d1={{1,2,3},{4,5,6},{7,8,9}};
        CMatrix cm_1 = CMatrix.getInstance(d1);
        double[][] d2={{9,8,7},{6,5,4},{3,2,1}};
        CMatrix cm_2 = CMatrix.getInstance(d2);
//        CMatrix cm3 = cm1.getAngle(cm2).println();
        //cm1.dotProduct(cm2).println();
        //cm_1.dot(cm_2).println();
//        cm_1.times(cm_2).println();
        CMatrix cm = CMatrix.getInstance(new double[]{1,2,3}).dotProduct(CMatrix.getInstance(new double[]{1,2,3})).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCovariance.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TMatrixOperator;

/**
 *
 * @author BAP1
 */
public class TestCovariance {
    public static void main(String[] args) {
        double[][] d={{1,0,2,12},{-3,4,1,0},{1,1,11,-121}};
//        CMatrix cm = CMatrix.getInstance(d).println();
        CMatrix cmx = CMatrix.getInstanceFromFile("D:\\Google Drive\\LECTURE NOTES\\EEM533_Y.LİSANS_MACHINE_LEARNING\\homeworks\\homework_5\\data\\gender_train.txt", ",");
        int nc=cmx.getColumnNumber();
        CMatrix cm=cmx.setArray(cmx.cmd(":",(nc-1)+"").findIndex(TMatrixOperator.EQUALS,1).toIntArray1D());
        cm=cm.cmd(":","0:"+(nc-2)).println();
        cm.mean().println();
        cm.std().println();
        cm.var().println();
        cm.cov().println();
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCropOrTileImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestCropOrTileImage {
    public static void main(String[] args) {
        String path="D:\\zeytin_remote_sensing\\tif\\TM39_6125_4134.tif";
        //To Crop or Tile
        CMatrix cm = CMatrix.getInstance()
                .imread(path)
                .imshow("original tif image")
                .cropImageArray2D(20,15,"D:\\zeytin_gis\\cropped_images","temp","png",false);
                ;

        //To Annotate the images
        CMatrix cm1 = CMatrix.getInstance()
                .imread("D:\\zeytin_remote_sensing\\tif\\cropped_images\\temp_0_0.png")
                .imshow()
                ;
        
        //to convert pascal voc format to yolo format
        
        FactoryUtils.convertPascalVoc2YoloFormatBatchProcess("D:\\zeytin_remote_sensing\\tif\\cropped_images", new String[]{"0:zeytin","1:ev"});
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCrossValidationSet.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;

/**
 *
 * @author BAP1
 */
public class TestCrossValidationSet {
    public static void main(String[] args) {
        long t1=FactoryUtils.tic();
        float[][] d=FactoryMatrix.matrixFloatRandom(10000,10000, 0,255);
        t1=FactoryUtils.toc(t1);
//        FactoryMatrix.toString(d);
//        CMatrix cm = CMatrix.getInstance().rand(1000,320*240,0,100);
//        CMatrix[][] cv=cm.crossValidationSets(5);
//        for (int i = 0; i < cv.length; i++) {
//            cv[i][0].println(i+".fold train");
//            cv[i][1].println(i+".fold test");
//        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestCSVReader.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author elcezerilab
 */
public class TestCSVReader {
    public static void main(String[] args) {
        
        CMatrix cmx = CMatrix.getInstance()
                .randn(1000, 1, 100, 120)
                .cat(1, CMatrix.getInstance().randn(1000, 1, -10, 65))
                .cat(1, CMatrix.getInstance().randnMeanVariance(1000, 1, 50, 40.5f))
                .hist(50)
                ;
        
        List lst=Arrays.asList(1,2,3,4);
        CMatrix cm2 = CMatrix.getInstance(lst)
                .println()
                ;
        CMatrix cm = CMatrix.getInstance()
                .readCSV("data\\iris.csv","last")
                .head()
                .pow(2)
                .head()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDataAugment4ObjectDetection.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestDataAugment4ObjectDetection {

    public static void main(String[] args) {
        long t1 = FactoryUtils.tic();
        //String path = "C:\\Users\\cezerilab\\Desktop\\trafik_dataset\\object_detection\\assets";
        String path = "C:\\Users\\dell_lab\\Desktop\\trafik_dataset\\object_detection\\assets";
        String pathImgBackground = path + "/background.jpg";
        String str_ada = path + "/ada.png";
        String str_durak = path + "/durak.png";
        String str_dur = path + "/dur.png";
        String str_girilmez = path + "/girilmez.png";
        String str_park = path + "/park.png";
        String str_park_yapilmaz_1 = path + "/park_yapilmaz_1.png";
        String str_park_yapilmaz_2 = path + "/park_yapilmaz_2.png";
        String str_park_yapilmaz_3 = path + "/park_yapilmaz_3.png";
        String str_park_engelli = path + "/park_engelli.png";
        String str_saga_donulmez = path + "/saga_donulmez.png";
        String str_sola_donulmez = path + "/sola_donulmez.png";
        String str_ileriden_saga = path + "/ileriden_saga.png";
        String str_ileriden_sola = path + "/ileriden_sola.png";
        String str_ileri_veya_saga = path + "/ileri_veya_saga.png";
        String str_ileri_veya_sola = path + "/ileri_veya_sola.png";
        String str_yaya_gecidi = path + "/yaya_gecidi.png";
        BufferedImage img = augmentDataForObjectDetection(pathImgBackground, 10, 
                str_ada, 
                str_durak, 
                str_dur,
                str_girilmez,
                str_park,
                str_park_yapilmaz_1,
                str_park_yapilmaz_2,
                str_park_yapilmaz_3,
                str_park_engelli,
                str_saga_donulmez,
                str_sola_donulmez,
                str_ileriden_saga,
                str_ileriden_sola,
                str_ileri_veya_saga,
                str_ileri_veya_sola,
                str_yaya_gecidi
                
        );
        CMatrix cm = CMatrix.getInstance(img).imshow();
        t1 = FactoryUtils.toc(t1);
    }

    private static BufferedImage augmentDataForObjectDetection(String pathImgBackground, int numberOfAssets, String... pathAsset) {
        BufferedImage img = ImageProcess.imread(pathImgBackground);
        BufferedImage[] assets = new BufferedImage[pathAsset.length];
        for (int i = 0; i < pathAsset.length; i++) {
            assets[i] = ImageProcess.imread(pathAsset[i]);
        }
        int w = img.getWidth();
        int h = img.getHeight();
        List<Rectangle> asset_bbox = new ArrayList();
        for (int j = 0; j < pathAsset.length; j++) {
            int i = 0;
            while (i < numberOfAssets) {
                int resW = (int) (20 + Math.random() * 50);
                BufferedImage temp = ImageProcess.resize(ImageProcess.clone(assets[j]), resW, resW);
                int px = (int) (Math.random() * (w - temp.getWidth()));
                int py = (int) (Math.random() * (h - temp.getWidth()));
                Rectangle rect = new Rectangle(px, py, resW, resW);
                boolean is_intersect = false;
                for (Rectangle rectangle : asset_bbox) {
                    if (rectangle.intersects(rect)) {
                        is_intersect = true;
                        //System.out.println("ne yazık ki intersect asset "+rect+" onceki rect "+rectangle);
                        break;
                    }
                }
                if (is_intersect) {
                    continue;
                }
                i++;
                //System.out.println(i+".bbox helal buldu "+rect);
                asset_bbox.add(rect);
                img = ImageProcess.overlayImage(img, temp,new Point(px, py), 0.85f);
            }
        }
        return img;
    }
}



============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDataAugmentation.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;
import jazari.utils.DataAugmentationOpt;
import org.nd4j.linalg.api.ndarray.INDArray;

/**
 *
 * @author cezerilab
 */
public class TestDataAugmentation {
    public static void main(String[] args) {
        List<BufferedImage> lst=new ArrayList();
        lst.add(ImageProcess.imread("images/bird.jpg"));
        DataAugmentationOpt opt=new DataAugmentationOpt();
        opt.horizontal_flip=true;
        opt.vertical_flip=true;
        opt.brightness_range=new float[]{0.2f,0.99f};
        opt.zoom_range=new float[]{0.7f,1.5f};
        opt.width_shift_range=new float[]{-200,200};
        opt.height_shift_range=new float[]{-200,200};
        CMatrix cm = CMatrix.getInstance()
                .imread("images/bird.jpg")
                .imshow();
        List<BufferedImage> ret=cm.imDataAug(10, lst, opt);
        for (BufferedImage img : ret) {
            cm.setImage(img).imshow();
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDataSetReduction.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestDataSetReduction {
    public static void main(String[] args) {
        String path_from="C:\\Users\\cezerilab\\Desktop\\ds_yabancı_ot_saksı";
        String path_to="C:\\Users\\cezerilab\\Desktop\\ds_yabancı_ot_saksı_reduced";
        FactoryUtils.reduceDataSet(path_from, path_to, "jpg", false, 0.1f);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDCT.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestDCT {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images//eagle.jpg")
                .imshow()
                .rgb2gray()
                .imshow()
                .imresize(512,512)
                .imshow()
                .transformDCT()
                .imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDeepLearning.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.machine_learning.classifiers.deeplearning_ocl.Matrix;
import jazari.machine_learning.classifiers.deeplearning_ocl.MatrixUtils;
import jazari.machine_learning.classifiers.deeplearning_ocl.DeepNeuralNetwork;
import jazari.machine_learning.classifiers.deeplearning_ocl.NNParams;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author BAP1
 */
public class TestDeepLearning {
    public static void main(String[] args) throws Exception {
//        float[][] da = {{1, 3, 5, 7, 9}, {2, 4, 6, 8, 1}, {0, 3, 5, 9, 1}, {3, 0, 2, 5, 9}};
//        float[][] db = new float[da.length][da[0].length];
//        System.arraycopy(da, 0, db, 0, da.length);
//        System.out.println(Arrays.toString(db));
//        
//        float[] d={1,0,-1,3,1,5,4,6,7};
//        float[] target=new float[d.length];
//        System.arraycopy(d, 0, target, 0, d.length);
//        System.out.println(Arrays.toString(target));
        runKaggleDigitsClassification();
    }
    /**
     * Performs classification of Handwritten digits,
     * using a subset (1000 rows) from the Kaggle Digits competition.
     */
    public static void runKaggleDigitsClassification() throws Exception {
        // Read data from CSV-file
        int headerRows = 1;
        char separator = ';';
        Matrix data = MatrixUtils.readCSV("data/Kaggle_Digits_1000.csv", separator, headerRows);

        // Split data into training set and crossvalidation set.
        float crossValidationPercent = 33;
        Matrix[] split = MatrixUtils.split(data, crossValidationPercent, 0);
        Matrix dataTrain = split[0];
        Matrix dataCV = split[1];

        // First column contains the classification label. The rest are the indata.
        Matrix xTrain = dataTrain.getColumns(1, -1);
        Matrix yTrain = dataTrain.getColumns(0, 0);
        Matrix xCV = dataCV.getColumns(1, -1);
        Matrix yCV = dataCV.getColumns(0, 0);

        NNParams params = new NNParams();        
        params.numClasses = 10; // 10 digits to classify
        params.hiddenLayerParams = new NNParams.NNLayerParams[] { 
            new NNParams.NNLayerParams(10, 5, 5, 2, 2) , 
            new NNParams.NNLayerParams(100, 5, 5, 2, 2) };
        params.learningRate = 1E-2f;
        params.maxIterations = 10;
        params.numThreads=1;

        long startTime = System.currentTimeMillis();
        DeepNeuralNetwork nn = new DeepNeuralNetwork(params);
        nn.train(xTrain, yTrain);
        System.out.println("Training time: " + (System.currentTimeMillis() - startTime) / 1000.0 + "s");

        List<Matrix> batchesX = new ArrayList<>();
        List<Matrix> batchesY = new ArrayList<>();
        MatrixUtils.split(xTrain, yTrain, params.batchSize, batchesX, batchesY);
        int correct = 0;
        for (int batch = 0; batch < batchesX.size(); batch++) {
            int[] predictedClasses = nn.getPredictedClasses(batchesX.get(batch));
            for (int i = 0; i < predictedClasses.length; i++) {
                if (predictedClasses[i] == batchesY.get(batch).get(i, 0)) {
                    correct++;
                }
            }
        }
        System.out.println("Training set accuracy: " + (float) correct/xTrain.numRows()*100 + "%");

        batchesX = new ArrayList<>();
        batchesY = new ArrayList<>();
        MatrixUtils.split(xCV, yCV, params.batchSize, batchesX, batchesY);
        correct = 0;
        for (int batch = 0; batch < batchesX.size(); batch++) {
            int[] predictedClasses = nn.getPredictedClasses(batchesX.get(batch));
            for (int i = 0; i < predictedClasses.length; i++) {
                if (predictedClasses[i] == batchesY.get(batch).get(i, 0)) {
                    correct++;
                }
            }
        }
        System.out.println("Crossvalidation set accuracy: " + (float) correct/xCV.numRows()*100 + "%");

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDeneme1.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestDeneme1 {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/bird.jpg")
                .imshow()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDentalFluorisis.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class TestDentalFluorisis {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("C:\\Users\\dell_lab\\Downloads\\1.jpg")
                .imresize(0.3f)
                .imshow()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDiagonalMatrix.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author Cezeri
 */
public class TestDiagonalMatrix {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range2D(0, 100, 100)
                .diag()
                //.println()
                ;
        cm.clone().diag(cm.toFloatArray1D()).heatmap();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDicomImageReader.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import ij.*;
import ij.io.*;
import java.awt.image.BufferedImage;
import jazari.matrix.CMatrix;

public class TestDicomImageReader {

    public static void main(String[] args) {
        String dicomFilePath = "images/dicom_image.dcm"; // DICOM dosyasının yolunu buraya yazın
        CMatrix cm = CMatrix.getInstance().imread(dicomFilePath).imshow();
//        ImagePlus imp = IJ.openImage(dicomFilePath);
//        BufferedImage img=imp.getBufferedImage();
//        CMatrix cm = CMatrix.getInstance(img).imshow();
//
//        // Hastanın adını yazdırın
//        String patientName = (String) imp.getProperty("PatientName");
//        System.out.println("Hasta Adı: " + patientName);
//
//        // İmgeyi görüntüleyin
//        imp.show();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDifferentiateLanguages.java
============================================================
/*
This program is written for being the solution of the researchgate question
How to separate images based on language text using computer vision algorithms?
You have urdu and english text in images dataset and to classify it in their categories (urdu or english).

to do this first we download english-urdu translation table image from net
then we simply call CMatrix method

 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author DELL LAB
 */
public class TestDifferentiateLanguages {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("c:\\logo.png")
//                .imresize(2800, 640)
                .imshow()
                ;
//                .rgb2gray()
//                .binarizeOtsu()
//                .imnegative()
//                .imresize(128, 128)
//                .imshow("original urdu word list as image")
//                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDilateErodeOperations.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;
import java.awt.image.BufferedImage;

/**
 *
 * @author BAP1
 */
public class TestDilateErodeOperations {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg")
                .imshow()
                .rgb2gray()
                .binarizeOtsu()
//                .edgeDetectionCanny()
                .imshow()                
                ;
        
        BufferedImage img=cm.getImage();
        BufferedImage img1=ImageProcess.dilate(img);
        CMatrix cm2 = CMatrix.getInstance(img1).imshow("after dilate operations");
        BufferedImage img2=ImageProcess.erode(img);
        CMatrix cm3 = CMatrix.getInstance(img2).imshow("after erode operations");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDiluteDataSet.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestDiluteDataSet {
    public static void main(String[] args) {
        String pathFolder="D:\\DATASETS\\_bla_bla";
        CMatrix cm = CMatrix.getInstance()
                .diluteDataSet(pathFolder, 0.1f, 123, "jpg")  //dataset reordered randomly based on the seed "123" given and 10% of the dataset is selected. Aim is shrinking the dataset 
                //.reIndexFilesBasedOnPrefixAndTimeStamp(pathFolder,"jpg,xml")
                ;
        
    }    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDotProduct.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.RenderingHints;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestDotProduct {
    public static void main(String[] args) {
        /**
         * dot product sadece vektörlerde çalışır matrisler için dot veya mul veya muli yi deneyiniz.
         */
//        CMatrix cm1 = CMatrix.getInstance(4,2,0,3).reshape(4, 1).dump();
//        CMatrix cm2 = CMatrix.getInstance(4,0,1,4).reshape(4, 1).dump();
//        cm1.dotProduct(cm2).dump();
        
        CMatrix cm = CMatrix.getInstance(11,23,34,7,5,45,19,17,21)
                .reshape(3, 3).dump()
//                .imresize(5,5,RenderingHints.VALUE_INTERPOLATION_BILINEAR).dump()
                .imresize(2,2,RenderingHints.VALUE_INTERPOLATION_BILINEAR).dump()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDrawingShapes.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;

/**
 *
 * @author BAP1
 */
public class TestDrawingShapes {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                //.imread("C:\\Users\\cezerilab\\Desktop\\Kazova\\TIF_IMAGES\\LT05_L1TP_175032_20081017_20180116_01_T1_B1.TIF")
                .imread("images/assets/levha_dur.jpg")
                .drawRect(10, 10, 100, 50, 5, Color.yellow)
                .imshow()
                
                ;
//        FrameImage frm=new FrameImage();
//        CMatrix cm = CMatrix.getInstance().ones(250).timesScalar(127).toNewColorSpace(BufferedImage.TYPE_3BYTE_BGR);
//        
//        cm
//                .drawRoundRect(10, 10, 100, 50, 5, 5, 5, Color.yellow).imshow()
//                .fillRoundRect(10, 10, 100, 50, 5, 5, Color.yellow).imshow()
//                .draw3DRect(10, 70, 100, 50, 5, 5, 5, Color.red).imshow()
//                .fill3DRect(10, 70, 100, 50, 5, 5, Color.green).imshow()
//                .drawArc(10, 70, 100, 100, 90, 220,5, Color.green).imshow()
//                .drawPolygon(new Polygon(new int[]{30,50,70,60,50,40,20},new int[]{10,150,40,60,50,40,20},5),2, Color.green).imshow()
//                .fillPolygon(new Polygon(new int[]{30,50,70,60,50,40,20},new int[]{10,150,40,60,50,40,20},5), Color.yellow).imshow()
//                .drawShape(new Polygon(new int[]{30,50,70,60,50,40,20},new int[]{10,150,40,60,50,40,20},5),2, Color.green).imshow()
//                .fillShape(new Polygon(new int[]{30,50,70,60,50,40,20},new int[]{10,150,40,60,50,40,20},5), Color.yellow).imshow()
//                
//                ;
//        CMatrix cm = CMatrix.getInstance().rand(250).timesScalar(255).toNewColorSpace(BufferedImage.TYPE_INT_RGB);
//        for (int i = 0; i < 100; i++) {
//            cm.drawRect(new CPoint(20+i,5+i),200,100,2, Color.blue).imshow(frm);
//            try {
//                Thread.sleep(100);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestDrawingShapes.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestDynamicROI.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.gui.FrameImage;
import jazari.matrix.CMatrix;
import jazari.matrix.CPoint;
import jazari.factory.FactoryUtils;
import java.awt.Rectangle;

/**
 *
 * @author hakmesyo
 */
public class TestDynamicROI {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg").imshow("rgb").rgb2gray().imshow("gray");
        float[][] d=FactoryUtils.readFromFile("data\\roi.txt",",");
        CPoint[] p=FactoryUtils.getRoiBoundary(d);
//        CMatrix cm2=cm.subMatrix(p[0],p[1]).imshow(true);//.commandParser(p[0].row+":"+p[1].row, p[0].column+":"+p[1].column).imshow();
        float t=0;
        float n=0;
        FrameImage frm=new FrameImage(cm,"","");
        for (int i = p[0].row; i <p[1].row ; i++) {
            for (int j =p[0].column; j < p[1].column; j++) {
                CPoint cp=new CPoint(i, j);
                boolean q=FactoryUtils.isPointInROI(cp, d);
                if (q) {
                    n++;
                    float val=cm.getValue(i, j);
                    t+=val;
                    System.out.println("in ROI row:"+i+" col:"+j);
                    cm.setValue(cp,255);
                }else{
//                    System.out.println("out of ROI row:"+i+" col:"+j);
                }
            }
        }
        cm.imshow(frm);
        float roi_mean=t/n;
        System.out.println("roi mean:"+roi_mean);
//        float roi_mean=cm.getRoiMean(d,p);
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestEdgeDetection.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestEdgeDetection {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/pullar.png")
                .imshow("rgb")
                .imhist()
                //.rgb2gray()
                .edgeDetectionCanny()
                .imshow("edge")
                .imcomplement()
                .imshow("complement")
                ;
        
//        CMatrix cm = CMatrix.getInstance().imread(".//images//rice.png").imshow().detectEdgeCanny().imshow();
//        CMatrix cm = CMatrix.getInstance().imread(".//images//rice.png").rgb2gray().imshow().
//                
//                tic().edgeDetectionCanny().toc().imshow().
//                edgeDetectionMusa(10).toc().imshow();
//        CMatrix cm2 = CMatrix.getInstance().readImage(".//images//horoz.jpg").imshow().rgb2gray().imshow().showHistogram().log().imshow().println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestExcelReadWrite.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestExcelReadWrite {
    public static void main(String[] args) {
        String path="data\\temp.xlsx";
        CMatrix cm = CMatrix.getInstanceFromExcelCSV(path).println();
        CMatrix cm2 = CMatrix.getInstance().csvread(path).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFaceLocation.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.matrix.CRectangle;
import java.awt.Color;

/**
 *
 * @author cezerilab
 */
public class TestFaceLocation {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/yuzler_3.jpg")               
                ;
        //cm.detectFaces("haar").imshow();
//        CRectangle[] rects=cm.getFaceLocationsAsCRectangle("haar");
//        for (int i = 0; i < rects.length; i++) {
//            cm=cm.drawRect(rects[i], 5, Color.yellow);
//        }
//        cm.imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFactoryMatrixClone.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryMatrix;

/**
 *
 * @author BAP1
 */
public class TestFactoryMatrixClone {
    public static void main(String[] args) {
        float[] d=FactoryMatrix.matrixFloatRandom(1,100)[0];
        float[] d2=FactoryMatrix.clone(d);
        FactoryMatrix.toString(d);
        FactoryMatrix.toString(d2);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFactoryObjectDetectionYoloV8.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import ai.djl.engine.Engine;
import ai.djl.modality.cv.Image;
import ai.djl.modality.cv.output.DetectedObjects;
import ai.djl.repository.zoo.ZooModel;
import java.awt.image.BufferedImage;
import java.io.File;
import jazari.factory.FactoryObjectDetectionYoloV8;
import jazari.factory.FactoryUtils;
import jazari.gui.FrameBasicImage;
import jazari.image_processing.ImageProcess;

/**
 *
 * @author cezerilab
 */
public class TestFactoryObjectDetectionYoloV8 {

    public static void main(String[] args) {
//        System.setProperty("ai.djl.onnx.use_cuda", "true");
//        // GPU kullanılabilirliğini kontrol et
//        Engine engine = Engine.getInstance();
//        if (engine.getGpuCount() > 0) {
//            System.out.println("GPU bulundu ve kullanılabilir.");
//        } else {
//            System.out.println("GPU bulunamadı veya kullanılamıyor.");
//        }
        
        String modelPath = "models/my_model/model_n.onnx";
        //String modelPath="models/lane_segment/model.onnx";
        File[] files = FactoryUtils.getFileArrayInFolderByExtension("dataset/ds_simulation/test", "jpg");
        ZooModel<Image, DetectedObjects> model = FactoryObjectDetectionYoloV8.loadModel(modelPath, "OnnxRuntime");
        FrameBasicImage frm = new FrameBasicImage();
        frm.setVisible(true);

        long t1 = FactoryUtils.tic();
        for (File file : files) {
            BufferedImage img = ImageProcess.imread(file);
            DetectedObjects detected = FactoryObjectDetectionYoloV8.predict(model, img, true);
            frm.setImage(img);
            System.out.println("detected = " + detected);
            t1 = FactoryUtils.toc(t1);
        }

        frm.dispose();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFactorySegmentationYoloV8.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import ai.djl.engine.Engine;
import ai.djl.modality.cv.Image;
import ai.djl.modality.cv.output.DetectedObjects;
import ai.djl.repository.zoo.ZooModel;
import java.awt.image.BufferedImage;
import java.io.File;
import jazari.factory.FactorySegmentationYoloV8;
import jazari.factory.FactoryUtils;
import jazari.gui.FrameBasicImage;
import jazari.image_processing.ImageProcess;

public class TestFactorySegmentationYoloV8 {
    public static void main(String[] args) {
        Engine.getAllEngines();
        String modelPath = "models/lane_segment/model.onnx";
        File[] files = FactoryUtils.getFileArrayInFolderByExtension("dataset/ds_simulation/test", "jpg");
        ZooModel<Image, DetectedObjects> model = FactorySegmentationYoloV8.loadModel(modelPath, "OnnxRuntime");
        FrameBasicImage frm = new FrameBasicImage();
        frm.setVisible(true);
        
        long t1 = FactoryUtils.tic();
        for (File file : files) {
            BufferedImage img = ImageProcess.imread(file);
            DetectedObjects detected = FactorySegmentationYoloV8.predict(model, img, true);
            frm.setImage(img);
            System.out.println("detected = " + detected);
            t1 = FactoryUtils.toc(t1);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFactorySerialLib.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import com.fazecast.jSerialComm.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import jazari.factory.FactorySerialLib;

public class TestFactorySerialLib {

    public static void main(String[] args) {
        FactorySerialLib device=new FactorySerialLib("com5", 115200, TestFactorySerialLib::processData);
        /*
        FactorySerialLib serialLib = new FactorySerialLib("COM5", 115200,TestFactorySerialLib::processData);

        if (serialLib.openSerialPort("COM5", 115200)) {
            serialLib.setDataCallback(data -> {
                System.out.println("Alınan veri: " + data);
                // Burada gelen veriyi işleyebilirsiniz
            });

            serialLib.startListening();

            // Veri gönderme örneği
            serialLib.sendData("Merhaba, Arduino!");

            // Programı çalışır durumda tutmak için
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // Program sonlandığında portu kapatın
            serialLib.closePort();
        }
*/
    }
//    private static SerialPort port;
//    private static BufferedReader reader;
//
//    public static void main(String[] args) {
//        connectToPort();
//    }
//
//    private static void connectToPort() {
//        port = SerialPort.getCommPort("com9");
//        port.setComPortParameters(115200, 8, 1, SerialPort.NO_PARITY);
//        port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 1000, 0);
//
//        if (port.openPort()) {
//            System.out.println("Port başarıyla açıldı.");
//            reader = new BufferedReader(new InputStreamReader(port.getInputStream()));
//            addDataListener();
//        } else {
//            System.out.println("Port açılamadı. 5 saniye sonra yeniden denenecek.");
//            try {
//                Thread.sleep(5000);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//            connectToPort();
//        }
//    }
//
//    private static void addDataListener() {
//        port.addDataListener(new SerialPortDataListener() {
//            @Override
//            public int getListeningEvents() {
//                return SerialPort.LISTENING_EVENT_DATA_AVAILABLE;
//            }
//            
//            @Override
//            public void serialEvent(SerialPortEvent event) {
//                if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE) {
//                    return;
//                }
//                try {
//                    String line = reader.readLine();
//                    if (line != null && !line.trim().isEmpty()) {
//                        System.out.println("Alınan veri: " + line.trim());
//                    }
//                } catch (Exception e) {
//                    System.out.println("Veri okuma hatası: " + e.getMessage());
//                    reconnect();
//                }
//            }
//        });
//    }
//
//    private static void reconnect() {
//        System.out.println("Bağlantı koptu. Yeniden bağlanılıyor...");
//        port.closePort();
//        connectToPort();
//    }

    private static void processData(String data) {
        System.out.println("data: " +data );
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFactoryWebCam.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestFactoryWebCam {
    public static void main(String[] args) {
        CMatrix cm=CMatrix.getInstance().startCamera();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFFT.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestFFT {
    
    public static void main(String[] args) {
        //for 1D signal
        CMatrix cm=CMatrix.getInstance().linspace(0,3600, 1024).sin().addNoise(2).plot().
                transformFFT().plot();
        //for 2d signal or image
        CMatrix cm2 = CMatrix.getInstance().imread("images//kaplan2.jpg").imshow().imresize(512,512).imshow()
                .transformFFT().plot();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFilters.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestFilters {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg").imresize(400, 400).rgb2gray().imshow("original");
        CMatrix cm1 = cm.clone().filterMean(5).imshow("mean filter");
        CMatrix cm2 = cm.clone().filterMedian(3).imshow("median filter");
        CMatrix cm3 = cm.clone().filterGaussian(3).imshow("gaussian filter");
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFindBndBoxOnMaskImage.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import jazari.types.TBoundingBox;

/**
 *
 * @author dell_lab
 */
public class TestFindBndBoxOnMaskImage {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images/mask_1.png").rgb2gray();
        
        int[][] d=cm.toIntArray2D();
        TBoundingBox bndbox=null;
        long t1=FactoryUtils.tic();
        for (int i = 0; i < 1000; i++) {
            bndbox=FactoryUtils.findBoundingBox(d);
            t1=FactoryUtils.toc(t1);
        }
        //t1=FactoryUtils.toc(t1);
        System.out.println("bndbox = " + bndbox);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFindIndexes.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.util.Arrays;
import jazari.types.TMatrixOperator;

/**
 *
 * @author cezerilab
 */
public class TestFindIndexes {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .rand(14,13,0,30)
                .round()
                .dump();
        float[] d=cm.toFloatArray1D();
        System.out.println("d = " + Arrays.toString(d));
        CMatrix cm_index = cm
                .findIndex(TMatrixOperator.BETWEEN, 15,20)
                .dump()                
                ;
        cm=cm.getMatrixValueByIndex(cm_index.toIntArray1D()).dump();
        
        float[][] f={{1,2,3},{4,5,6}};
        CMatrix cmx = CMatrix.getInstance(f).dump()
                ;
        
        
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/cezeri_logo.bmp")
//                .rgb2gray()
//                .imshow()
//                .println()
//                .findIndex(TMatrixOperator.EQUALS, 0)
//                .println()
//                ;
//        int[] d=cm.toIntArray1D();
//        int[] satirlar=new int[d.length];
//        int[] sutunlar=new int[d.length];
//        for (int i = 0; i < d.length; i++) {
//            satirlar[i]=d[i]/84;
//            sutunlar[i]=d[i]%84;
//        }
//        System.out.println(Arrays.toString(satirlar));
//        System.out.println(Arrays.toString(sutunlar));
//        System.out.println(1894/84);
//        System.out.println(1894%84);
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFlatten.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class TestFlatten {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .rand(5, 3)
                .map(10, 50)
                .round()
                .dump()
                //.flatten()
                //.dump()
//                .saveNewFileAsCSV("data/p1.txt")
                .saveOnFileAsCSV("data/p1.txt")
                ;
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFramePicture.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.gui.FrameImage;
import jazari.gui.FrameImageAdvanced;
import jazari.image_processing.ImageProcess;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestFramePicture {
    public static void main(String args[]) {
//        FramePicture frm=new FramePicture(FactoryMatrix.rand(100).multiplyScalar(100).toIntegerArray());
//        FramePicture frm=new FramePicture(FactoryMatrix.rand(400).multiplyScalar(300));
//        FramePicture frm=new FramePicture();
        FrameImage frm=new FrameImage(CMatrix.getInstance(ImageProcess.readImage("images//kaplan1.jpg")),"","Test");
        frm.setVisible(true);
//        FrameImageAdvanced frm2=new FrameImageAdvanced(ImageProcess.readImage(".//images//kaplan1.jpg"),"images");
//        frm2.setVisible(true);
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFrameWithFlatDark.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.formdev.flatlaf.FlatDarkLaf;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jazari.gui.FlatLaf;

/**
 *
 * @author dell_lab
 */
public class TestFrameWithFlatDark extends javax.swing.JFrame {

    /**
     * Creates new form TestFrameWithFlatBuf
     */
    public TestFrameWithFlatDark() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FlatLaf.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestFrameWithFlatDark().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestFunctionalProgramming.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestFunctionalProgramming {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap();
        map.put("apple", 12);
        map.put("orange", 3);
        map.put("kivi", 7);
        map.put("apple", 5);
        System.out.println(map.size());
        List<String> list = Arrays.asList("orange", "apple", "banana", "hazelnut", "pistachio");
        List<String> listOfFruits = list.stream()
                .map(e -> e.toUpperCase())
                .filter(e -> e.startsWith("B"))
                .collect(Collectors.toList());
        System.out.println("listOfFruits = " + list);
        System.out.println("listOfFruits = " + listOfFruits);

        IntStream intStream = IntStream.rangeClosed(0, 100);
        List<Integer> listOfInt = intStream.boxed().collect(Collectors.toList());
        System.out.println("listOfInt = " + listOfInt);

        Long fact = IntStream.rangeClosed(1, 25).mapToLong(e -> (long) e).reduce(1, (a, b) -> a * b);
        System.out.println("fact = " + fact);

        int[] a = CMatrix.getInstance().range(0, 10).toIntArray1D();
        Stream aa = Arrays.stream(a).boxed();

        Consumer<String> printOut = e -> System.out.println(e);
        list.forEach(printOut);

        Function<Integer, Integer> functionCall = e -> 3 * e + 5;
        System.out.println("Fucntion<P,R> = " + functionCall.apply(3));
        listOfInt.stream().map(functionCall).forEach(e -> System.out.print(e + " "));

        Function<Integer, String> oddOrEven = x -> {
            return x % 2 == 0 ? "even" : "odd";
        };

        Employee e1 = new Employee("ahmet");
        Employee e2 = new Employee("hasan");
        Employee e3 = new Employee("ali");
        Employee e4 = new Employee("ahmet");
        List<Employee> employees=new ArrayList();
        employees.add(e1);
        employees.add(e2);
        employees.add(e3);
        employees.add(e4);
        
        System.out.println("\nburası:"+employees.stream().map(Employee::getName).collect(Collectors.toList()));
        
        List<Integer> numbers=Arrays.stream(new int[]{1,2,3,4,5}).boxed().collect(Collectors.toList());
        int total=numbers.stream().filter(x->x%2==0).mapToInt(x->x*x).sum();
        System.out.println("total = " + total);
        
        Function<Integer,Integer> sl=x->x*x;
        System.out.println("output:"+sl.apply(5));
        
    }
}
class Employee {

    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestGaussianMF.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author DELL LAB
 */
public class TestGaussianMF {
    public static void main(String[] args) {
        CMatrix x=CMatrix.getInstance().range(-30,30);
        CMatrix cm1=CMatrix.getInstance().range(-30,30).gaussmf(10,0);
        CMatrix cm2=CMatrix.getInstance().range(-30,30).gaussmf(5,-3);
        CMatrix cm3=CMatrix.getInstance().range(-30,30).gaussmf(7,10).println();
        CMatrix cm=cm1.cat(1, cm2).cat(1, cm3).println();
        cm.plot(x.toFloatArray1D());
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestGPS.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import com.google.maps.model.LatLng;
import java.awt.geom.Point2D;
import jazari.factory.FactoryUtils;

//https://coordinates-converter.com/en/decimal/51.000000,10.000000?karte=OpenStreetMap&zoom=8

/**
 *
 * @author dell_lab
 */
public class TestGPS {
    public static void main(String[] args) {
//        aşağıdaki data gebze parkur alanı kml si
        double[][] gpsData = {
            {29.50911482597872, 40.79043673267945},
            {29.50836199373552, 40.78993939708132},
            {29.5088691017504, 40.78949094745692},
            {29.50965094265705, 40.79000447472892}
        };
        LatLng from=new LatLng(gpsData[0][1],gpsData[0][0]);
        LatLng to=new LatLng(gpsData[1][1],gpsData[1][0]);
        double distance=FactoryUtils.gpsDistance(from, to);
        System.out.println("distance = " + distance);
        double angle=FactoryUtils.gpsHeadingAngle(from, to);
        System.out.println("angle = " + angle);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestGpsKmlFile.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.Arrays;
import java.util.List;
import jazari.factory.FactoryUtils;

/**
 *
 * @author Teknofest
 */
public class TestGpsKmlFile {

    public static void main(String[] args) {
        List<double[]> coordinates = List.of(
                new double[]{37.96327558660128, 41.8501618702164},
                new double[]{37.96329006242495, 41.8501530187302},
                new double[]{37.96330404854646, 41.85014398695938},
                new double[]{37.96331128878102, 41.85013339225093},
                new double[]{37.96331543272915, 41.85012029102375}
        );

        FactoryUtils.gpsGenerateKMLFromDoubleLatLong(coordinates, "dataset/output_jak.kml");
        
        List<double[]> map_1=FactoryUtils.gpsGetGPSPointsFromKMLAsDouble("dataset/output_jak.kml");
        for (double[] ds : map_1) {
            System.out.println("ds = " + Arrays.toString(ds));
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestGpsRTK2GoogleEarthFormat.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestGpsRTK2GoogleEarthFormat {
    public static void main(String[] args) {
        String s=FactoryUtils.gpsConvertRtk2LatLongString("3757.8019432,N,04151.0025488,E");
        System.out.println("s = " + s);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHDR.java
============================================================
package test;

import jazari.matrix.CMatrix;
import jazari.types.TMatrixOperator;

public class TestHDR {
    public static void main(String[] args) {
        CMatrix cm_under = CMatrix.getInstance().imread("images\\p1.jpg")                
//                .imresize(0.5)
                .rgb2gray()
                .imshow("under exposure")
                ;
        CMatrix cm_over = CMatrix.getInstance().imread("images\\p13.jpg")                
//                .imresize(0.5)
                .rgb2gray()
                .imshow("over exposure")
                ;
        CMatrix cm_auto = CMatrix.getInstance().imread("images\\samsung_auto.jpg")
                .rgb2gray()
                .imshow("camera auto exposure")
                ;
        
        CMatrix cm = cm_over.add(cm_under).divideScalar(2).imshow("simple average approach");
        
        float[][] d=cm_under.toFloatArray2D();
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                d[i][j]=(d[i][j]<50)?0:d[i][j];
            }
        }
        cm_under=cm_under.setArray(d);
        cm_under.imshow();
        
        d=cm_over.toFloatArray2D();
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                d[i][j]=(d[i][j]>200)?0:d[i][j];
            }
        }
        cm_over=cm_over.setArray(d);       
        cm_over.imshow("after transforming");
        
        CMatrix cm_ortlama = cm_under.add(cm_over).divideScalar(2.0f).imshow("ortalama");
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHeatMap.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;

/**
 *
 * @author elcezerilab
 */
public class TestHeatMap {

    public static void main(String[] args) {
//        CMatrix heatData = CMatrix.getInstance().rand(10, 10).heatmap();
//        CMatrix kernelData = CMatrix.getInstance(FactoryUtils.kernelGaussian2D(11, 5f));
        CMatrix heatData = CMatrix.getInstance().rand(10, 10);
        heatData.clone().heatmap();
        CMatrix barData = CMatrix.getInstance().rand(5, 3);
        barData.clone().bar();
        barData.clone().heatmap();
               
//
//        System.out.println("Matrisler oluşturuldu");

        //        CMatrix heatData = CMatrix.getInstance().rand(10, 10).heatmap();
        //// Display as heatmap
        ////        heatData.heatmap();
        //
        //        FactoryUtils.bekle(3000);
        //        
        //        float[][] gkernel = FactoryUtils.kernelGaussian2D(11, 5f);
        //        CMatrix cm_kernel = CMatrix
        //                .getInstance(gkernel)
        //                .println()
        //                .heatmap()
        //                //.heatmap(true, true)
        //                ;
        //        
        //        FactoryUtils.bekle(3000);
        //
        //// Create data for bar chart
        //        CMatrix barData = CMatrix.getInstance().rand(5, 3);
        //        String[] categories = {"Category 1", "Category 2", "Category 3", "Category 4", "Category 5"};
        //        barData.bar(categories);
        //        //        float[][] kernel = {
        //            {1, 0, 1},
        //            {0, 1, 0},
        //            {1, 0, 1}
        //        };
        //        CMatrix heatData = CMatrix.getInstance().rand(10, 10).heatmap();
        //        float[][] gkernel=FactoryUtils.kernelGaussian2D(11, 5f);
        //        CMatrix cm_kernel = CMatrix
        //                .getInstance(gkernel)
        //                .println()
        //                .heatmap()
        //                .heatmap(true,true)
        //                ;
        //        CMatrix cm2 = CMatrix.getInstance()
        //                .imread("images/pullar.png")
        //                .rgb2gray()
        //                .imhist()
        //                .transpose();
        //        
        //        cm2=    cm2.pow(2)
        //                .timesScalar(3)
        //                .minus(cm2.powerByScalar(4))
        //                .head()
        //                ;
        //        CMatrix cm = CMatrix.getInstance()
        //                .zeros(30,50)
        //                .perlinNoise(0.5)
        ////                .rand()
        ////                .map(0, 255)
        ////                .round()
        ////                .heatmap()
        ////                .head()
        ////                .heatmap()
        ////                .heatmap(Color.decode("0xFFFF00"))
        ////                .heatmap(Color.RED)
        //                .heatmap(Color.cyan)
        //                
        //                .imread("images/pullar.png")
        //                .imshow()
        //                .imhist()
        //                .getRedChannelColor()
        //                .rgb2gray()
        //                .imshow()
        //                .imhist()
        //                .prevFirst()
        //                .getGreenChannelColor()
        //                .rgb2gray()
        //                .imshow()
        //                .imhist()
        //                .prevFirst()
        //                .getBlueChannelColor()
        //                .rgb2gray()
        //                .imshow()
        //                .imhist()
        //                .prevFirst()
        //                
        ////                .rgb2gray()
        ////                .imshow()
        ////                .map(-100, 100)
        ////                .heatmap(true)
        //                
        //                
        ;

        double[][] d = {
            {0.77, -0.11, 0.11, 0.33, 0.55, -0.11, 0.33},
            {-0.11, 1, -0.11, 0.33, -0.11, 0.11, -0.11},
            {0.11, -0.11, 1.00, -0.33, 0.11, -0.11, 0.55},
            {0.33, 0.33, -0.33, 0.55, -0.33, 0.33, 0.33},
            {0.55, -0.11, 0.11, -0.33, 1.00, -0.11, 0.11},
            {-0.11, 0.11, -0.11, 0.33, -0.11, 1.00, -0.11},
            {0.33, -0.11, 0.55, 0.33, 0.11, -0.11, 0.77}
        };
        CMatrix cm = CMatrix.getInstance(d)
                //                        .scatter()
                //                        .plot()
                //                        .heatmap(Color.cyan,500,500,true,true)
                .imread("images/pullar.png") //                        .imshow()
                //                        .imhist()
                //                        .rgb2gray()
                //                        .hist(256)
                //                        .prev()
                //                        .rgb2gray()
                //                        .imshow()
                //                        .hist()
                //.plot()
                //.heatmap()
                ;

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHisteq.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestHisteq {

    public static void main(String[] args) {
        //nativeJava();
        withOJL();
//        CMatrix cm = CMatrix.getInstance()
//                //.rand(150, 150)
//                .imread("images/artificial.jpg")
//                .rgb2gray()
//                .addNoise(5.5f)
//                //.map(0, 255)
//                .imshow();
//        float[][] d = cm.toFloatArray2D();
//
//        for (int i = 0; i < 10; i++) {
//            d = meanFilter(d);
//            //CMatrix.getInstance(d).imshow();
//        }
//        CMatrix.getInstance(d).imshow();

        
    }

    private static void nativeJava() {
        CMatrix cm = CMatrix.getInstance().imread("images/alyuvar.jpg").rgb2gray().imshow();

        CMatrix hist = cm.clone().hist(256);
        float[] pdf = hist.clone().divideScalar(hist.sumTotal()).tr().plot().toFloatArray1D();
        float[] cdf = new float[pdf.length];
        cdf[0] = pdf[0];
        for (int i = 1; i < pdf.length; i++) {
            cdf[i] = cdf[i - 1] + pdf[i];
        }
        CMatrix n_cdf = CMatrix.getInstance(cdf).map(0, 255).tr().floor().plot();
        float[] d_cdf = n_cdf.toFloatArray1D();
        float[][] d = cm.clone().toFloatArray2D();
        float[][] d2 = cm.clone().toFloatArray2D();
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                d2[i][j] = d_cdf[(int) d[i][j]];
            }
        }
        CMatrix.getInstance(d2).imshow();
    }

    private static void withOJL() {
        CMatrix cm = CMatrix.getInstance().imread("images/alyuvar.jpg").rgb2gray().imshow();
        cm.clone().applyFunction(cm.clone().cdf().map(0, 255)).imshow();
        
        
    }

    private static float[][] meanFilter(float[][] d) {
        float[][] fm = new float[d.length][d[0].length];
        float[][] kernel = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        for (int i = 1; i < d.length - 1; i++) {
            for (int j = 1; j < d[0].length - 1; j++) {
                fm[i][j] = applyFilter(crop(d, i, j, kernel.length), kernel);
            }
        }
        return fm;
    }

    private static float[][] crop(float[][] d, int i, int j, int size) {
        float[][] ret = new float[size][size];
        for (int k = 0; k < size; k++) {
            for (int l = 0; l < size; l++) {
                ret[k][l] = d[i - size / 2 + k][j - size / 2 + l];
            }
        }
        return ret;
    }

    private static float applyFilter(float[][] img, float[][] kernel) {
        float sum = 0;
        for (int i = 0; i < img.length; i++) {
            for (int j = 0; j < img[0].length; j++) {
                sum += img[i][j] * kernel[i][j];
            }
        }
        float avg = sum / (img.length * img.length);
        return avg;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHisteqClahe.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestHisteqClahe {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images/bf.jpg").histeqClahe().imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHistogram.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Arrays;
import jazari.matrix.CMatrix;

/**
 *
 * @author hakmesyo
 */
public class TestHistogram {

    public static void main(String[] args) {
//        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg").imshow("kaplan resmi").rgb2gray().imhist();
//        CMatrix cm2 = CMatrix.getInstance().imread("images\\kaplan1.jpg").rgb2gray().matrix(":").hist();
        CMatrix cm = CMatrix.getInstance()
                .imread("images/pullar.png")                
//                .imshow()
//                .imhist()
//                .rgb2gray()
//                .imshow()
//                .imhist()
//                .getHistogram()
//                .plot()
                
                
                ;
        float[] h1=cm.hist(256).toFloatArray1D();
        System.out.println("h1 = " + Arrays.toString(h1));
        
        
//        CMatrix cm1 = CMatrix.getInstance().randn(200000,1).scale(1000);
//        CMatrix cm2 = cm1.scale(0.5).addScalar(2000);
//        CMatrix cm3 = cm2.scale(1.89).addScalar(1000);
//        CMatrix cm4 = cm3.addScalar(4000);
//        CMatrix cmx=cm1.cat(1, cm2).cat(1, cm3).cat(1, cm4).hist(100);
//        CMatrix cmx = CMatrix.getInstance().randn(100,1).transpose().bar();
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHistogram2.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.image_processing.ImageProcess;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestHistogram2 extends JPanel {
    private int SIZE = 256;
    // Red, Green, Blue   
    private int NUMBER_OF_COLOURS = 3;

    public final int RED = 0;
    public final int GREEN = 1;
    public final int BLUE = 2;

    private int[][] colourBins;
    private volatile boolean loaded = false;
    private int maxY;
    
    public TestHistogram2() {
        colourBins = new int[NUMBER_OF_COLOURS][];

        for (int i = 0; i < NUMBER_OF_COLOURS; i++) {
            colourBins[i] = new int[SIZE];
        }

        loaded = false;
    }

    public void load(String path) throws IOException {
        BufferedImage bi = ImageIO.read(new File(path));
        bi=ImageProcess.pixelsToImageGray(ImageProcess.imageToPixelsInt(bi));
//        bi=ImageProcess.convertToGray(bi);
            // Reset all the bins
        for (int i = 0; i < NUMBER_OF_COLOURS; i++) {
           for (int j = 0; j < SIZE; j++) {
                colourBins[i][j] = 0;
           }
        }

        for (int x = 0; x < bi.getWidth(); x++) {
            for (int y = 0; y < bi.getHeight(); y++) {
                Color c = new Color(bi.getRGB(x, y));

                colourBins[RED][c.getRed()]++;
                colourBins[GREEN][c.getGreen()]++;
                colourBins[BLUE][c.getBlue()]++;
            }
        }

        maxY = 0;

        for (int i = 0; i < NUMBER_OF_COLOURS; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (maxY < colourBins[i][j]) {
                    maxY = colourBins[i][j];
                }
            }
        }

        loaded = true;
    }

    @Override
    public void paint(Graphics g) {
        if (loaded) {
            Graphics2D g2 = (Graphics2D)g;

            g2.setColor(Color.white);
            g2.fillRect(0, 0, getWidth(), getHeight());

            g2.setStroke(new BasicStroke(2));

            int xInterval = (int) ((double)getWidth() / ((double)SIZE+1));

            g2.setColor(Color.black);


            for (int i = 0; i < NUMBER_OF_COLOURS; i++) {

                // Set the graph
                if (i == RED) {
                    g2.setColor(Color.red);
                } else if (i == GREEN) {
                    g2.setColor(Color.GREEN);
                } else if (i == BLUE) {
                    g2.setColor(Color.blue);
                }

                // draw the graph for the spesific colour.
                for (int j = 0; j < SIZE - 1 ; j++) {
                    int value = (int) (((double)colourBins[i][j] / (double)maxY) * getHeight());
                    int value2 = (int) (((double)colourBins[i][j+1] / (double)maxY) * getHeight());

                    g2.drawLine(j * xInterval, getHeight() - value, (j+1)*xInterval, getHeight() - value2);
                }
            }
        } else {
            super.paint(g);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Debug Frame");
        frame.setSize(300, 200);
        frame.setLayout(new BorderLayout());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        TestHistogram2 his = new TestHistogram2();

        try {
            his.load("images\\lena_color.gif");
        } catch (IOException e) {
            e.printStackTrace();
        }

        frame.add(his,BorderLayout.CENTER);
        frame.setVisible(true);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHistWithInfo.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestHistWithInfo {
    public static void main(String[] args) {
        String path="C:\\ai\\djl\\dataset_pdr\\AnonimTC";
        
        String path_female=path+"\\female_tc_age.txt";
        CMatrix cm_female = CMatrix.getInstance().readFile(path_female,";");
        CMatrix cm_hist_female=cm_female.cmd(":","1").sort().println().hist(100).println();
        
//        String path_male=path+"\\male_tc_age.txt";
//        CMatrix cm_male = CMatrix.getInstance().readFile(path_male,";");
//        CMatrix cm_hist_male=cm_male.cmd(":","1").sort().println().hist(100).println();
        
//        CMatrix cm=cm_hist_female.cat(1, cm_hist_male).bar();
        //CMatrix cm_ages=cm.cmd(":","1").distinct().println();
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHSV.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import javax.swing.GrayFilter;

/**
 *
 * @author BAP1
 */
public class TestHSV {

    public static void main(String[] args) {

        CMatrix cm = CMatrix.getInstance()
                .imread("images/pullar.png")
                .imshow();

        CMatrix cm2=cm.rgb2hsv().imshow().rgb2gray().imshow();

        CMatrix cm3=cm.toGrayLevel().imshow();
        
        CMatrix cm4 = cm2.multiplyElement(cm3).imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestHttpServerPort.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author cezerilab
 */
public class TestHttpServerPort {
    public static void main(String[] args) {
        String cmd="cmd /c http-server D:\\Dropbox\\NetbeansProjects\\TEKNOFEST_CEZERICAMPUSCAR_2022\\models\\full_detection -p 8087";
        try {
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ex) {
            Logger.getLogger(TestHttpServerPort.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(100000);
        } catch (InterruptedException ex) {
            Logger.getLogger(TestHttpServerPort.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageDataGenerator.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestImageDataGenerator {
    public static void main(String[] args) {
//on batch images
        String folderPath="D:\\zeytin_remote_sensing\\tif\\deneme";
        CMatrix cm = CMatrix.getInstance()
                .range(0, 1200)
                .shape()
                .imageDataGenerator(folderPath,1000,500)  //NCWH
                .shape()
                .slice(0)
                .slice(1)
                .shape()
                .reduce()
                .reshape(500,1000)
                .shape()
//                .slice(0)
//                .slice(0)
//                .flatten()
//                .shape()
//                .println()
                //.permute(1,0)
                //.reshape(500,1000)
                .imshow()
                ;
        
    }    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageMirrorOrFlip.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author Cezeri
 */
public class TestImageMirrorOrFlip {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/dog_cat.jpg")
                //.imshow()
                .imFlipVertical()
                .imshowAutoResized(true)
                .imMirrorHorizontal()
                .imshowAutoResized(true)
                
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageNoise.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 * This test deals with imnoise or addNoise methods
 * @author BAP1
 */
public class TestImageNoise {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images\\kaplan1.jpg")
                .rgb2gray()
                .imshow()
                .imnoise(0,0.2f)
                .imshow();
//        CMatrix cmNoise=CMatrix.getInstance().randn(cm.getRowNumber(),cm.getColumnNumber(),0,255).abs().round();
//        cm.add(cmNoise).imshow(true);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageProcessing.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.gui.FrameImage;
import jazari.matrix.CMatrix;
import java.awt.Color;

/**
 *
 * @author BAP1
 */
public class TestImageProcessing {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .tic()
                .imread("images\\pullar.png")  
                .imshow("rgb")
                .rgb2gray()
                .imshow("gray")
//                .imhist("rice")
//                .binarizeOtsu()
//                .imshow("otsu")
//                .edgeDetectionCanny().imshow("canny")
//                .drawRect(30, 30, 100, 100,4, Color.yellow)
//                .fillRect(30, 30, 100, 100, Color.yellow)
//                .drawLine(30, 30, 100, 100,20,Color.yellow)
                .drawOval(30, 30, 300, 100,5,Color.yellow)
                .imshow("drawed rect")
                .rgb2gray()
                .imshow("gray")
//                .prev().prev().prev().imcomplement().imshow("reverted image")                
                .toc()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageReadUrl.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestImageReadUrl {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                //.imread("images/screenshot.jpg")
                .imread("images/screen_1.png")
                //.imread("images/rice.png")
                .imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageResize.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author musa_
 */
public class TestImageResize {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range(0, 10000)
                .multiplyScalar(0.01f)
                .toRadians()
                .sin()
                .plot()
                
                ;
        
        
        
        
        
        
        
        
        
        
        
        
        
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/gul.png")
//                .imshow("original image")
//                .imresize(8, 8)
//                .imshow("reduced resized image")
//                .imresize(512, 512)
//                .imshow("enlarged image")
//                ;
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/gul.png")
//                //.rgb2gray()
////                .imshow()
//                .imresize(2048,2048)
//                .imshow()
//                .imresize(512,512)
//                .imshow()
////                .imresize(128, 128)
////                .imshow()
//                
//                ;

//          CMatrix cm = CMatrix.getInstance().vector(0, 200)
////                  .plot()
//                  .toRadians()
////                  .plot()
//                  .sin()
//                  .plot("x1")
//                  .prev(2)
//                  .println()
//                  .timesScalar(5)
//                  .toRadians()
//                  .sin()
//                  .timesScalar(10)
//                  .plot("x2")
//                  ;
    } 
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImageShow.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestImageShow {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().readImage("images\\peppers.png").showImage();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestImShowRefresh.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.io.File;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class TestImShowRefresh {
    public static void main(String[] args) {
        File[] files=FactoryUtils.getFileArrayInFolderByExtension("images", "jpg");
        for (File file : files) {
            CMatrix.getInstance(file).imshowRefresh();
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestJSON.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.google.gson.Gson;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author cezerilab
 */
public class TestJSON {

    public static void main(String[] args) {
        List<A> foo = new ArrayList();
        foo.add(new A(11,"php"));
        foo.add(new A(3,"java"));
        foo.add(new A(2,"c"));

        String json = new Gson().toJson(foo);
        System.out.println(json);
    }
}

class A{
    int a=3;
    String b="java";
    
    public A(int a, String b){
        this.a=a;
        this.b=b;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestJTable.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

/**
 *
 * @author BAP1
 */
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.AbstractTableModel;

public class TestJTable {

    public static void main(String[] args) {
        new TestJTable();
    }

    public TestJTable() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }

                JTable table = new JTable(new MyModel());
                final JPopupMenu pm = new JPopupMenu();
                pm.add(new CopyAction(table));
                pm.add(new PasteAction(table));

                table.addMouseListener(new MouseAdapter() {

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            highlightRow(e);
                            doPopup(e);
                        }
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            highlightRow(e);
                            doPopup(e);
                        }
                    }

                    protected void doPopup(MouseEvent e) {
                        pm.show(e.getComponent(), e.getX(), e.getY());
                    }

                    protected void highlightRow(MouseEvent e) {
                        JTable table = (JTable) e.getSource();
                        Point point = e.getPoint();
                        int row = table.rowAtPoint(point);
                        int col = table.columnAtPoint(point);

                        table.setRowSelectionInterval(row, row);
                        table.setColumnSelectionInterval(col, col);
                    }

                });

                JFrame frame = new JFrame("Testing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setLayout(new BorderLayout());
                frame.add(table);
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

            }
        });
    }

    public class MyModel extends AbstractTableModel {

        private String[] names = {"1", "2", "3", "4", "5"};
        private String[][] values = new String[5][5];

        public MyModel() {
            values = new String[10][names.length];
            for (int row = 0; row < 10; row++) {
                for (int col = 0; col < names.length; col++) {
                    values[row][col] = String.valueOf((char) ((row * names.length) + col + 65));
                }
            }
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            if (value instanceof Double || value instanceof Integer) {
                values[row][col] = value.toString();
            } else {
                values[row][col] = (String) value;
            }

            fireTableCellUpdated(row, col);
        }

        @Override
        public int getRowCount() {
            return values.length;
        }

        @Override
        public int getColumnCount() {
            return names.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return values[rowIndex][columnIndex];
        }

    }

    class CopyAction extends AbstractAction {

        private JTable table;

        public CopyAction(JTable table) {
            this.table = table;
            putValue(NAME, "Copy");
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int row = table.getSelectedRow();
            int col = table.getSelectedColumn();

            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            cb.setContents(new CellTransferable(table.getValueAt(row, col)), null);

        }

    }

    class CutAction extends AbstractAction {

        private JTable table;

        public CutAction(JTable table) {
            this.table = table;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int row = table.getSelectedRow();
            int col = table.getSelectedColumn();

            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            cb.setContents(new CellTransferable(table.getValueAt(row, col)), null);

        }

    }

    class PasteAction extends AbstractAction {

        private JTable table;

        public PasteAction(JTable tbl) {

            putValue(NAME, "Paste");

            table = tbl;

            final Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();

            cb.addFlavorListener(new FlavorListener() {
                @Override
                public void flavorsChanged(FlavorEvent e) {
                    setEnabled(cb.isDataFlavorAvailable(CellTransferable.CELL_DATA_FLAVOR));
                }
            });
            setEnabled(cb.isDataFlavorAvailable(CellTransferable.CELL_DATA_FLAVOR));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int row = table.getSelectedRow();
            int col = table.getSelectedColumn();

            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            if (cb.isDataFlavorAvailable(CellTransferable.CELL_DATA_FLAVOR)) {
                try {
                    Object value = cb.getData(CellTransferable.CELL_DATA_FLAVOR);
                    System.out.println(value);
                    table.setValueAt(value, row, col);

                } catch (UnsupportedFlavorException | IOException ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    public static class CellTransferable implements Transferable {

        public static final DataFlavor CELL_DATA_FLAVOR = new DataFlavor(Object.class, "application/x-cell-value");

        private Object cellValue;

        public CellTransferable(Object cellValue) {
            this.cellValue = cellValue;
        }

        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[]{CELL_DATA_FLAVOR};
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return CELL_DATA_FLAVOR.equals(flavor);
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            if (!isDataFlavorSupported(flavor)) {
                throw new UnsupportedFlavorException(flavor);
            }
            return cellValue;
        }

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestKalmanFilter.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TFigureAttribute;
import org.apache.commons.math3.filter.DefaultMeasurementModel;
import org.apache.commons.math3.filter.DefaultProcessModel;
import org.apache.commons.math3.filter.MeasurementModel;
import org.apache.commons.math3.filter.ProcessModel;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.filter.KalmanFilter;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.JDKRandomGenerator;

/**
 *
 * @author cezerilab
 */
public class TestKalmanFilter {

    public static void main(String[] args) {
        testKalman();
    }

    private static void testKalman() {
        // discrete time interval
        double dt = 0.1d;
        // position measurement noise (meter)
        double measurementNoise = 10d;
        // acceleration noise (meter/sec^2)
        double accelNoise = 0.2d;

        // A = [ 1 dt ]
        //     [ 0  1 ]
        RealMatrix A = new Array2DRowRealMatrix(new double[][]{{1, dt}, {0, 1}});
        // B = [ dt^2/2 ]
        //     [ dt     ]
        RealMatrix B = new Array2DRowRealMatrix(new double[][]{{Math.pow(dt, 2d) / 2d}, {dt}});
        // H = [ 1 0 ]
        RealMatrix H = new Array2DRowRealMatrix(new double[][]{{1d, 0d}});
        // x = [ 0 0 ]
        RealVector x = new ArrayRealVector(new double[]{0, 0});

        RealMatrix tmp = new Array2DRowRealMatrix(new double[][]{
            {Math.pow(dt, 4d) / 4d, Math.pow(dt, 3d) / 2d},
            {Math.pow(dt, 3d) / 2d, Math.pow(dt, 2d)}});
        // Q = [ dt^4/4 dt^3/2 ]
        //     [ dt^3/2 dt^2   ]
        RealMatrix Q = tmp.scalarMultiply(Math.pow(accelNoise, 2));
        // P0 = [ 1 1 ]
        //      [ 1 1 ]
        RealMatrix P0 = new Array2DRowRealMatrix(new double[][]{{1, 1}, {1, 1}});
        // R = [ measurementNoise^2 ]
        RealMatrix R = new Array2DRowRealMatrix(new double[]{Math.pow(measurementNoise, 2)});

        // constant control input, increase velocity by 0.1 m/s per cycle
        RealVector u = new ArrayRealVector(new double[]{0.1d});

        ProcessModel pm = new DefaultProcessModel(A, B, Q, x, P0);
        MeasurementModel mm = new DefaultMeasurementModel(H, R);
        KalmanFilter filter = new KalmanFilter(pm, mm);

        RandomGenerator rand = new JDKRandomGenerator();

        RealVector tmpPNoise = new ArrayRealVector(new double[]{Math.pow(dt, 2d) / 2d, dt});
        RealVector mNoise = new ArrayRealVector(1);

        // iterate 60 steps
        double[][] data = new double[60][2];
        for (int i = 0; i < 60; i++) {
            filter.predict(u);

            // simulate the process
            RealVector pNoise = tmpPNoise.mapMultiply(accelNoise * rand.nextGaussian());

            // x = A * x + B * u + pNoise
            x = A.operate(x).add(B.operate(u)).add(pNoise);

            // simulate the measurement
            mNoise.setEntry(0, measurementNoise * rand.nextGaussian());

            // z = H * x + m_noise
            RealVector z = H.operate(x).add(mNoise);

            filter.correct(z);

            double position = filter.getStateEstimation()[0];
            double velocity = filter.getStateEstimation()[1];
            data[i] = new double[]{position, velocity};
            System.out.println("position = " + position + " velocity = " + velocity);
        }
        CMatrix cm = CMatrix.getInstance()
                .setArray(data)
                .plot(new TFigureAttribute("Kalman Example", "Kalman behaviour along time", "Iterations,Value", "position,velocity"));

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestLaserWeeding.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.Dimension;
import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class TestLaserWeeding {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .startCamera(0, new Dimension(640, 480), 10)
                .recordCameraImage("C:\\temp_images",0.5)
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestLatLongToUTM.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

/**
 *
 * @author cezerilab
 */
import org.apache.commons.math3.special.Gamma;
import org.apache.commons.math3.util.FastMath;

public class TestLatLongToUTM {

    private static final double SEMI_MAJOR_AXIS = 6378137.0; // Dünya'nın yarı büyük ekseni (metre cinsinden)
    private static final double ECCENTRICITY_SQUARED = 0.00669437999014; // Dünya'nın dış merkezlik karesi

    public static void main(String[] args) {
        // Giriş LatLong koordinatları
        double latitude = 37.9633970700379;
        double longitude = 41.85015192791282;

        // Hedef UTM bölgesi Siirt
        int utmZone = 37;
        // Hedef UTM bölgesi Gebze
        //int utmZone = 35;
        char utmHemisphere = 'N';

        // Koordinat dönüşümü
        double[] utmCoordinates = convertLatLongToUTM(latitude, longitude, utmZone, utmHemisphere);

        // Dönüştürülmüş UTM koordinatları
        System.out.println("UTM Koordinatları: " + utmCoordinates[0] + " " + utmCoordinates[1]);
    }

    public static double[] convertLatLongToUTM(double latitude, double longitude, int utmZone, char utmHemisphere) {
        // Meridyen konumu
        double centralMeridian = (utmZone * 6 - 183) * Math.PI / 180;

        // Boylamı merkezi meridyenle eşle
        double longitudeRad = longitude * Math.PI / 180;
        double lambda0Rad = centralMeridian;
        double lambdaRad = longitudeRad - lambda0Rad;

        // Geodesi hesaplamaları
        double e2 = ECCENTRICITY_SQUARED;
        double k0 = 0.9996; // UTM ölçek faktörü
        double a = SEMI_MAJOR_AXIS;
        double eccSquared = e2;
        double eccPrimeSquared = (eccSquared) / (1 - eccSquared);

        // Enlem radyan cinsinden
        double phiRad = latitude * Math.PI / 180;
        double N = a / Math.sqrt(1 - eccSquared * Math.sin(phiRad) * Math.sin(phiRad));
        double T = Math.tan(phiRad) * Math.tan(phiRad);
        double C = eccPrimeSquared * Math.cos(phiRad) * Math.cos(phiRad);
        double A = (lambdaRad * Math.cos(phiRad)) / (1 + C);
        double M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * phiRad
                - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * phiRad)
                + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * phiRad)
                - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * phiRad));

        // UTM koordinatlarını hesapla
        double utmEasting = k0 * (N * Math.sin(A) + A * N * T * Math.cos(A) * Math.cos(A) / 2 + (A * A * A * N * T * T * Math.sin(A) * Math.cos(A) * Math.cos(A) / 24)
                - (A * A * A * A * N * T * T * T * Math.cos(A) * Math.cos(A) * Math.cos(A) * Math.cos(A) / 72));
        double utmNorthing = k0 * (M + N * Math.cos(A) * Math.cos(A) / 2 + (A * A * N * T * Math.sin(A) * Math.cos(A) / 24)
                - (A * A * A * A * N * T * T * Math.sin(A) * Math.sin(A) * Math.cos(A) * Math.cos(A) / 72));

        // Kuzey yarımkürede, UTM Kuzey için 5000000 ekle
        if (utmHemisphere == 'N') {
            utmNorthing += 5000000;
        }

        // UTM Bölge numarasını ekle
        double utmZoneNumber = utmZone;
        double utmEastingZone = utmEasting + utmZoneNumber * 100000;

        // Dönüştürülmüş UTM koordinatlarını döndür
        return new double[] { utmEastingZone, utmNorthing };
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestLBP.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestLBP {
    public static void main(String[] args) {
//        CMatrix cm_1 = CMatrix.getInstance().range(-360, 1, 360).multiplyScalar(0.5f).plot().addNoise(2).toRadians().cos();
//        CMatrix cm_2 = CMatrix.getInstance().range(-360, 1, 360).multiplyScalar(3).toRadians().sin().divideScalar(10);
//        CMatrix cm_3 = cm_1.add(cm_2).plot();
        CMatrix cm_1 = CMatrix.getInstance().imread("images/pullar.png")
                .rgb2gray()
                .imshow()
                .convolveLBP(3)
                .map(0, 255)
                .imshow();
        CMatrix cm_2 = CMatrix.getInstance().imread("images/pullar.png")
                .rgb2gray()
                .imshow()
                .getLBP1D(8,true)
                .plot();
                //.getLBP1D(8,true).plot();
//        CMatrix cm_5 = cm_3.getLBP1D(8,false).plot();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestLinear.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestLinear {
    public static void main(String[] args) {
        float[][] A={
            {1,1,1},
            {0,2,5},
            {2,5,-1}
        };
        float[][] B={
            {6},
            {-4},
            {27}
        };
        
        CMatrix cmA = CMatrix.getInstance(A);
        CMatrix cmB = CMatrix.getInstance(B);
        CMatrix cmX = cmA.inv().dot(cmB).println();
        
        float[][] f={
            {1,-1},
            {-1,1}
        };
        CMatrix cmF = CMatrix.getInstance(f).inv().println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestLoadImageFromURL.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestLoadImageFromURL {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("https://www.hepsiburada.com/hayatburada/wp-content/uploads/2021/09/shutterstock_653575417.jpg")
                .imshow()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMachineLearning.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.machine_learning.evaluater.FactoryEvaluation;
import jazari.matrix.CMatrix;
import jazari.types.TFigureAttribute;
import java.awt.BasicStroke;
import weka.classifiers.Classifier;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.trees.REPTree;
import weka.core.Instances;
public class TestMachineLearning {
    public static void main(String[] args) throws Exception {
        String dsTrain = "data\\runoff_4km_train.arff";
        String dsTest = "data\\runoff_4km_test.arff";
        Classifier[] models = {new REPTree(),new MultilayerPerceptron()};    
        Instances trainSCA_4 = CMatrix.getInstance().readARFF(dsTrain).plot().getWekaInstance();
        Instances testSCA_4 = CMatrix.getInstance().readARFF(dsTest).plot().getWekaInstance();
//        perform cross-validation
        for (int i = 0; i < models.length; i++) {
            FactoryEvaluation.performCrossValidate(models[i], trainSCA_4, 7,true,false);
        }
//        perform test process
        TFigureAttribute attr=new TFigureAttribute();
        attr.axis_names=new String[]{"Day", "m3/sn"};;
        attr.items=new String[]{"Observed", "Simulated"};
        attr.title="SCA 4km";
        attr.isStroke=true;
        float[] dashPattern1= { 5, 2, 5, 2 };
        attr.stroke.add(new BasicStroke(3, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER,1,dashPattern1,0));
        float[] dashPattern2= { 10, 5, 10, 5 };
        attr.stroke.add(new BasicStroke(2, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        for (int i = 0; i < models.length; i++) {
            FactoryEvaluation.performTest(models[i], trainSCA_4, testSCA_4, true, true, attr);
        }
    }    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMakeBlobs.java
============================================================
/*
 * The MIT License
 *
 * Copyright 2019 DELL LAB.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TFigureAttribute;

/**
 *
 * @author DELL LAB
 */
public class TestMakeBlobs {

    public static void main(String[] args) {
//        CMatrix cm = CMatrix.getInstance()
//                .imread("images/pullar.png")
//                .imshow()
//                .getRedChannelColor()
//                .imshow()
//                .hist(256)
//                .shape()
////                ;
//        CMatrix cm2 = CMatrix.getInstance()
//                .imread("images/pullar.png")
//                .getGreenChannelColor()
//                .imshow()
//                .hist(256)
//                .shape()
//                .println()
//                ;

        CMatrix jm = CMatrix.getInstance()
                .make_blobs(300, 3, 5)
                .showDataGrid()
                .hist(25)
                .scatterBlob()
                
                ;

        
        //        jm.scatterBlob("0,1", new TFigureAttribute("Python Bloblarından",
        //                "Different Blobs having various means and variances",
        //                "F-1,F-2",
        //                "Class-1,Class-2,Class-3,Class-4,Class-5"))
        //                .savePlot("images/blob.png")
        //                .saveImageAs("images/blob.png","images/blob.svg")
        ;
//        jm.scatterBlob("0,2", new TFigureAttribute("Python Bloblarından",
//                "Different Blobs having various means and variances",
//                "F-1,F-2",
//                "Class-1,Class-2,Class-3,Class-4,Class-5"));

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMap.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestMap {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().range(0, 255);        
                cm.cat(1,cm.pow(0.04f).map(0,255))
                .cat(1,cm.pow(0.1f).map(0, 255))
                .cat(1,cm.pow(0.2f).map(0, 255))
                .cat(1,cm.pow(0.4f).map(0, 255))
                .cat(1,cm.pow(0.67f).map(0, 255))
                .cat(1,cm.pow(1).map(0, 255))
                .cat(1,cm.pow(1.5f).map(0, 255))
                .cat(1,cm.pow(2.5f).map(0, 255))
                .cat(1,cm.pow(5).map(0, 255))
                .cat(1,cm.pow(10).map(0, 255))
                .cat(1,cm.pow(20).map(0, 255))
                
                .plot();
    }
        
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrix.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.types.TFigureAttribute;
import jazari.matrix.CMatrix;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author BAP1
 */
public class TestMatrix {

    public static void main(String[] args) {
//        CMatrix m1 = CMatrix.getInstance().rand(5, 50, -250, 7500).formatDouble(2).transpose();
//        CMatrix m1 = CMatrix.getInstance().rand(5, 50, -2500, 2500).formatDouble(2).transpose();
//        CMatrix m1 = CMatrix.getInstance().rand(5, 50, -1, 1).formatDouble(2).transpose();
//        CMatrix m1 = CMatrix.getInstance().rand(20,30, 0, 255).formatDouble(2).plot("-*").plot("-.").plot("-o");
        TFigureAttribute attr=new TFigureAttribute();
        
        CMatrix m1 = CMatrix.getInstance().rand(20,30, 0, 255).formatFloat(2).plot("*").plot(".").plot("o");
        m1.tic();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(TestMatrix.class.getName()).log(Level.SEVERE, null, ex);
        }
        m1.toc();
//        m1.imshow("merhaba");
//        m1.plot();
//        m1.toString();
//        CMatrix cm = CMatrix.getInstance().randPerm(150).println();
//        int num = 1;
//        for (int ii = 0; ii < 255; ii++) {
//            System.out.println(num);
//            num = (num * 2) % 101;
//        }

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixConcatenation.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.matrix.CMatrix;

/**Concatenate two matrix horizontally and vertically
 *
 * @author BAP1
 */
public class TestMatrixConcatenation {
    public static void main(String[] args) {
        CMatrix m1=CMatrix.getInstance().zeros(5,5).println();
        CMatrix m2=CMatrix.getInstance().ones(5,5).println();
        m1.cat(1, m2).println();
        m1.cat(2, m2).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixEigenValueDecomposition.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import weka.core.matrix.Matrix;

/**
 *
 * @author BAP1
 */
public class TestMatrixEigenValueDecomposition {
    public static void main(String[] args) {
        Matrix cm1 = CMatrix.getInstance().rand(3,3).toWekaMatrix();
        Matrix cm2=cm1.inverse();
        Matrix cm3=cm1.times(cm2);
        CMatrix cm4=CMatrix.getInstance().fromWekaMatrix(cm3).println();
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixMultiplication.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestMatrixMultiplication {
    public static void main(String[] args) {
        CMatrix cm1 = CMatrix.getInstance()
                .range(6)
                .reshape(3,2)
                .println()                
                ;
        CMatrix cm2 = cm1.clone().multiplyScalar(100).transpose().println();
             
        CMatrix cm3 = cm1.matmul(cm2).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixMultiplicationPerformance.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryUtils;

/**
 *
 * @author elcezerilab
 */
public class TestMatrixMultiplicationPerformance {
    public static void main(String[] args) {
        int n=10000;
//        CMatrix.getInstance()
//                .tic()
//                .zeros(n,n)
////                .multiplyElement(CMatrix.getInstance().rand(n,n))
//                .toc("processing time=")
//                ;
//        CMatrix.getInstance()
//                .tic()
//                .rand(n,n)
////                .multiplyElement(CMatrix.getInstance().rand(n,n))
//                .toc("processing time=")
//                ;
        long t1=FactoryUtils.tic();
        double[][] d=new double[n][n];
//        for (int i = 0; i < n; i++) {
//            for (int j = 0; j < n; j++) {
//                d[i][j]=Math.random();
//            }
//        }
        t1=FactoryUtils.toc(t1);

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixMultiplications.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestMatrixMultiplications {
    public static void main(String[] args) {
//        double[][] m1={{1,2},{1,1},{3,1}};
//        double[][] m2={{1,0,3},{2,1,2}};
//        CMatrix cm1 = CMatrix.getInstance(m1);
//        CMatrix cm2=CMatrix.getInstance(m2);
//        CMatrix cm3 = cm1.times(cm2).println();
        
//        double[][] m1={{1,2,1},{-1,3,9},{4,5,12}};
//        double[] m2={11,9,-3};
//        CMatrix cm1 = CMatrix.getInstance(m1);
//        CMatrix cm2=CMatrix.getInstance(m2).transpose();
//        CMatrix cm3 = cm1.times(cm2).println();
        
        //test inverse and pseudoinverse matrix
        double[][] m1={{1,2,1},{-1,3,9},{4,5,12},{2,0,3}};
        double[] m2={-11,9,-3};
        CMatrix cm1 = CMatrix.getInstance(m1).println();
        CMatrix inv = CMatrix.getInstance(m1).inv().println();
        CMatrix cmm = cm1.timesElement(inv).println();
        CMatrix cm2=CMatrix.getInstance(m2).transpose();
        CMatrix cm3 = inv.timesElement(cm2).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMatrixPerformance.java
============================================================
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import java.util.Random;

public class TestMatrixPerformance {

    static float[][] dd = new float[640][480];

    public static void main(String[] args) {
        long t1 = FactoryUtils.tic();
        Random rnd = new Random();
//        CMatrix cm = CMatrix.getInstance();
//        float[][] d=FactoryMatrix.matrixDoubleZeros(2048,2048);

        int nr = dd.length;
        int nc = dd[0].length;
        for (int i = 0; i < nr; i++) {
//            floatFill(dd[i],3.0);
            for (int j = 0; j < nc; j++) {
                dd[i][j] = (int)(Math.random()*10);
            }
        }
        
        int r=3000;
        int c=3000;
        
        t1 = FactoryUtils.toc("rand:",t1);
        float[][] zeros=FactoryMatrix.matrixFloatZeros(r,c);
        t1 = FactoryUtils.toc("zeros:",t1);
        float[][] temp=FactoryMatrix.clone(dd);
        t1 = FactoryUtils.toc("clone:",t1);
        float[][] ones=FactoryMatrix.matrixFloatOnes(r,c);
        t1 = FactoryUtils.toc("ones:",t1);
//        FactoryMatrix.toString(ones);
        


//        float[][] d1=FactoryMatrix.matrixDoubleZeros(2,2);
//        d1[0][0]=12;
//        
//        float[][] d2=FactoryMatrix.cloneMatrix(d1);
//        d2[0][0]=5;
//        
//        System.out.println("d1:"+d1[0][0]);
//        System.out.println("d2:"+d2[0][0]);
    }
    

    /*
 * initialize a smaller piece of the array and use the System.arraycopy 
 * call to fill in the rest of the array in an expanding binary fashion
     */
    public static void bytefill(byte[] array, byte value) {
        int len = array.length;

        if (len > 0) {
            array[0] = value;
        }

        for (int i = 1; i < len; i += i) {
            System.arraycopy(array, 0, array, i, ((len - i) < i) ? (len - i) : i);
        }
    }

    public static void floatFill(float[] array, float value) {
        int len = array.length;

        if (len > 0) {
            array[0] = value;
        }

        for (int i = 1; i < len; i += i) {
            System.arraycopy(array, 0, array, i, ((len - i) < i) ? (len - i) : i);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMeshGrid.java
============================================================
/*
 * The MIT License
 *
 * Copyright 2018 BAP1.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package test;

import jazari.matrix.CMatrix;


/**
 *
 * @author BAP1
 */
public class TestMeshGrid {

    public static void include(){
        
    }
    
    public static void main(String[] args) {
//        CMatrix mesh = CMatrix.getInstance()
//                //                .zeros(9)
//                //                .meshGridX(-3, 3)
//                //                .dump()
//                //                .meshGridY(-4, 4)
//                //                .dump()
//                //                .meshGridX(-4,4,11)
//                //                .dump()
//                //                .meshGrid(-5, 5, 111)
//                .meshGrid(0, 720, 180);


        int max=180;
        float beta=0.01f;
        int size=150;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < max; j++) {
                CMatrix m1 = CMatrix.getInstance().meshGrid(-max - j, max + j, size);
                m1.pow(2).add(m1.transpose().pow(2)).timesScalar(beta).toRadians().cos().map(0, 255).imshowRefresh().delay(10);
            }
            for (int j = max; j > 0; j--) {
                CMatrix m1 = CMatrix.getInstance().meshGrid(-max - j, max + j, size);
                m1.pow(2).add(m1.transpose().pow(2)).timesScalar(beta).toRadians().cos().map(0, 255).imshowRefresh().delay(10);
            }
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMLP.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.machine_learning.mlp.enums.EActivationType;
import jazari.machine_learning.data_loader.DataLoader;
import jazari.machine_learning.mlp.ModelTrainer;
import jazari.machine_learning.mlp.MultiLayerPerceptron;
import jazari.machine_learning.mlp.enums.EOptimizerType;
import jazari.machine_learning.mlp.enums.EProblemType;

/**
 *
 * @author cezerilab
 */
public class TestMLP {
    public static void main(String[] args) {
        performIrisDataSet();
    }

    private static void performIrisDataSet() {
        DataLoader loader = new DataLoader();
        loader.loadCSV("dataset/iris.csv", 4, true);

        loader.splitData(0.7, 0.15, 0.15);
        loader.setBatchSize(4);  // Daha da küçük batch size

        System.out.println("Class mapping: " + loader.getClassMap());

        MultiLayerPerceptron mlp = new MultiLayerPerceptron(EProblemType.CLASSIFICATION, 4);

        // Daha geniş tek layer
        mlp.addLayer(21, EActivationType.RELU, 0.0);
        mlp.addLayer(3, EActivationType.SOFTMAX, 0);

        // Farklı hiperparametreler
        mlp.setLearningRate(0.005);  // Daha küçük learning rate
        mlp.setOptimizer(EOptimizerType.ADAM);
        mlp.setRegularization(0.0001, 0.0001);  // Çok hafif regularization
        mlp.setAdamParameters(0.9, 0.999, 1e-8);

        // Veri setini kontrol edelim
        System.out.println("\nData Distribution:");
        loader.printDataSummary();  // Bu metodu DataLoader'a eklememiz gerekecek

        mlp.summary();

        ModelTrainer trainer = new ModelTrainer(mlp, loader);
        System.out.println("\nInitial performance:");
        trainer.evaluate();

        System.out.println("\nTraining started...");
        trainer.train(50);  // Daha az epoch

        System.out.println("\nFinal performance:");
        trainer.evaluate();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMultiDimensionalGaussianDistribution.java
============================================================
package test;

import jazari.matrix.CMatrix;

public class TestMultiDimensionalGaussianDistribution {
    public static void main(String[] args) {
        CMatrix cm1 = CMatrix.getInstance()
                .make_blobs(600, 2, 3)
                .scatter()                
                ;
        CMatrix cm2 = CMatrix.getInstance()
                .make_blobs(1000, 2, 5, 1000, 150)
                .scatter()                
                ;
        float[] d1=CMatrix.getInstance().randn(1000, 1).toFloatArray1D();
        float[] d2=CMatrix.getInstance().randn(1000, 1).toFloatArray1D();
        CMatrix.getInstance().scatter(d1, d2);
        
//        CMatrix.getInstance(d1).hist(10);
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestMxNetMnist.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import ai.djl.Device;
import ai.djl.MalformedModelException;
import ai.djl.Model;
import ai.djl.basicdataset.cv.classification.Mnist;
import ai.djl.basicmodelzoo.basic.Mlp;

//import ai.djl.basicdataset.cv.classification.Mnist;
//import ai.djl.basicmodelzoo.basic.Mlp;
import jazari.deep_learning.ai.djl.examples.training.util.Arguments;
import ai.djl.inference.Predictor;
import ai.djl.metric.Metrics;
import ai.djl.modality.Classifications;
import ai.djl.modality.cv.Image;
import ai.djl.modality.cv.ImageFactory;
import ai.djl.modality.cv.util.NDImageUtils;
import ai.djl.ndarray.NDArray;
import ai.djl.ndarray.NDList;
import ai.djl.ndarray.types.Shape;
import ai.djl.nn.Activation;
import ai.djl.nn.Block;
import ai.djl.nn.Blocks;
import ai.djl.nn.SequentialBlock;
import ai.djl.nn.core.Linear;
import ai.djl.training.DefaultTrainingConfig;
import ai.djl.training.EasyTrain;
import ai.djl.training.Trainer;
import ai.djl.training.TrainingResult;
import ai.djl.training.dataset.Dataset;
import ai.djl.training.dataset.RandomAccessDataset;
import ai.djl.training.evaluator.Accuracy;
import ai.djl.training.listener.SaveModelTrainingListener;
import ai.djl.training.listener.TrainingListener;
import ai.djl.training.loss.Loss;
import ai.djl.training.util.ProgressBar;
import ai.djl.translate.Batchifier;
import ai.djl.translate.TranslateException;
import ai.djl.translate.Translator;
import ai.djl.translate.TranslatorContext;
import jazari.factory.FactoryUtils;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 *
 * @author cezerilab
 */
public class TestMxNetMnist {

    public static void main(String[] args) {
//        mnistAsANN();
//        mnistAsANN_Sequential();
        minstANNInference();
    }

    private static TrainingResult mnistAsANN() {
        int input = 28 * 28;
        int output = 10;
        int[] hidden = {128, 64};
//        System.out.println("device count:" + Device.getDevices()[0]);
        Block block = new Mlp(input, output, hidden);
        Model model = Model.newInstance("mlp");
        model.setBlock(block);
        Arguments arguments = Arguments.parseArgs(new String[]{});
        try {
            // get training and validation dataset
            RandomAccessDataset trainingSet = getDataset(Dataset.Usage.TRAIN, arguments);
            RandomAccessDataset validateSet = getDataset(Dataset.Usage.TEST, arguments);

            // setup training configuration
            DefaultTrainingConfig config = setupTrainingConfig(arguments);
            try (Trainer trainer = model.newTrainer(config)) {
                trainer.setMetrics(new Metrics());

                /*
                 * MNIST is 28x28 grayscale image and pre processed into 28 * 28 NDArray.
                 * 1st axis is batch axis, we can use 1 for initialization.
                 */
                Shape inputShape = new Shape(1, Mnist.IMAGE_HEIGHT * Mnist.IMAGE_WIDTH);

                // initialize trainer with proper input shape
                trainer.initialize(inputShape);

                EasyTrain.fit(trainer, arguments.getEpoch(), trainingSet, validateSet);

                return trainer.getTrainingResult();

            } catch (IOException ex) {
                Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TranslateException ex) {
                Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private static DefaultTrainingConfig setupTrainingConfig(Arguments arguments) {
        String outputDir = arguments.getOutputDir();
        SaveModelTrainingListener listener = new SaveModelTrainingListener(outputDir);
        listener.setSaveModelCallback(
                trainer -> {
                    TrainingResult result = trainer.getTrainingResult();
                    Model model = trainer.getModel();
                    float accuracy = result.getValidateEvaluation("Accuracy");
                    model.setProperty("Accuracy", String.format("%.5f", accuracy));
                    model.setProperty("Loss", String.format("%.5f", result.getValidateLoss()));
                });
        return new DefaultTrainingConfig(Loss.softmaxCrossEntropyLoss())
                .addEvaluator(new Accuracy())
//                .optDevices(Device.getDevices(arguments.getMaxGpus()))
                //.optDevices(Device.getDevices())                
                .addTrainingListeners(TrainingListener.Defaults.logging(outputDir))
                .addTrainingListeners(listener);
    }

    private static RandomAccessDataset getDataset(Dataset.Usage usage, Arguments arguments)
            throws IOException {
        Mnist mnist
                = Mnist.builder()
                        .optUsage(usage)
                        .setSampling(arguments.getBatchSize(), true)
                        .optLimit(arguments.getLimit())
                        .build();
        mnist.prepare(new ProgressBar());
        return mnist;
    }

    private static void mnistAsANN_Sequential() {
        int inputSize = 28 * 28;
        int outputSize = 10;

        SequentialBlock block = new SequentialBlock();
        block.add(Blocks.batchFlattenBlock(inputSize));
        block.add(Linear.builder().setUnits(128).build());
        block.add(Activation::relu);
        block.add(Linear.builder().setUnits(64).build());
        block.add(Activation::relu);
        block.add(Linear.builder().setUnits(outputSize).build());
        System.out.println(block);

        int batchSize = 32;
        Mnist mnist = Mnist.builder().setSampling(batchSize, true).build();
        try {
            mnist.prepare(new ProgressBar());
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }

        Model model = Model.newInstance("mlp");
        model.setBlock(block);
        DefaultTrainingConfig config = new DefaultTrainingConfig(Loss.softmaxCrossEntropyLoss())
                //softmaxCrossEntropyLoss is a standard loss for classification problems
                .addEvaluator(new Accuracy()) // Use accuracy so we humans can understand how accurate the model is
                .addTrainingListeners(TrainingListener.Defaults.logging());

        // Now that we have our training configuration, we should create a new trainer for our model
        Trainer trainer = model.newTrainer(config);
        trainer.initialize(new Shape(1, 28 * 28));

        int epoch = 2;

        try {
            EasyTrain.fit(trainer, epoch, mnist, null);
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TranslateException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }
        Path modelDir = Paths.get("build/mlp");
        try {
            Files.createDirectories(modelDir);
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }

        model.setProperty("Epoch", String.valueOf(epoch));

        try {
            model.save(modelDir, "mlp");
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static void minstANNInference() {
        Image img = null;
        try {
            img = ImageFactory.getInstance().fromUrl("https://resources.djl.ai/images/0.png");
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }
        img.getWrappedImage();

        Path modelDir = Paths.get("build/mlp");
        Model model = Model.newInstance("mlp");
        model.setBlock(new Mlp(28 * 28, 10, new int[]{128, 64}));
        try {
            model.load(modelDir);
        } catch (IOException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedModelException ex) {
            Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
        }

        Translator<Image, Classifications> translator = new Translator<Image, Classifications>() {
            @Override
            public NDList processInput(TranslatorContext ctx, Image input) {
                // Convert Image to NDArray
                NDArray array = input.toNDArray(ctx.getNDManager(), Image.Flag.GRAYSCALE);
                return new NDList(NDImageUtils.toTensor(array));
            }

            @Override
            public Classifications processOutput(TranslatorContext ctx, NDList list) {
                // Create a Classifications with the output probabilities
                NDArray probabilities = list.singletonOrThrow().softmax(0);
                List<String> classNames = IntStream.range(0, 10).mapToObj(String::valueOf).collect(Collectors.toList());
                return new Classifications(classNames, probabilities);
            }

            @Override
            public Batchifier getBatchifier() {
                // The Batchifier describes how to combine a batch together
                // Stacking, the most common batchifier, takes N [X1, X2, ...] arrays to a single [N, X1, X2, ...] array
                return Batchifier.STACK;
            }
        };
        Predictor predictor = model.newPredictor(translator);
        for (int i = 0; i < 10; i++) {
            long t=FactoryUtils.tic();
            try {
                Classifications predictions = (Classifications) predictor.predict(img);
                String s=predictions.toString();
                System.out.println(predictions.best());
            } catch (TranslateException ex) {
                Logger.getLogger(TestMxNetMnist.class.getName()).log(Level.SEVERE, null, ex);
            }
            t=FactoryUtils.toc(t);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestNDArray.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import ai.djl.Device;
import ai.djl.ndarray.BaseNDManager;
import ai.djl.ndarray.NDArray;
import ai.djl.ndarray.NDManager;
import ai.djl.ndarray.types.DataType;
import ai.djl.ndarray.types.Shape;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestNDArray {

    public static void main(String[] args) {
        int n = 4000;
        ndManager(n, n);
        //ocl(50000,5000);
    }

    private static void ndManager(int nr, int nc) {
        long t = 0;
        try (NDManager manager = NDManager.newBaseManager()) {
//            NDArray nd = manager.randomInteger(121, 159, new Shape(nr, nc), DataType.INT32);//.mul(30);
            NDArray nd = manager.randomUniform(0,100,new Shape(nr, nc));//.mul(30);
            //System.out.println("nd = " + nd);
        }
        for (int i = 0; i < 10; i++) {
            long t1 = System.currentTimeMillis();
            try (NDManager manager = NDManager.newBaseManager(Device.cpu())) {
                //NDArray nd = manager.randomInteger(121, 159, new Shape(nr, nc), DataType.INT32);//.mul(30);
                NDArray nd1 = manager.randomNormal(new Shape(nr, nc));
                NDArray nd2 = manager.randomNormal(new Shape(nr, nc));
                NDArray nd3 = nd1.dot(nd2);
//                System.out.println("nd:"+nd);
//                long tt=FactoryUtils.tic();
//                double[][] d=FactoryUtils.toDoubleArray2D(nd.toFloatArray(),3,3);
//                tt=FactoryUtils.toc(tt);
                //CMatrix.getInstance(d).println();
//                NDArray nd2 = manager.randomUniform(0,1000,new Shape(nr, nc));
//                NDArray nd3 = nd.dot(nd2);
                //System.out.println("type:"+nd.getDataType());
                //System.out.println("nd = " + nd);
            }  
            
            long t2=(System.currentTimeMillis()-t1);
            System.out.println("t2 = " + t2);
            t += t2;
        }
        System.out.println("ort:" + t / 10);
    }

    private static void ocl(int nr, int nc) {
        for (int i = 0; i < 10; i++) {
            long t1 = FactoryUtils.tic();
            CMatrix cm = CMatrix.getInstance().rand(nr, nc, 121, 159);
            t1 = FactoryUtils.toc("ocl:", t1);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestOpenCVBlobDetection.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;
//import org.bytedeco.javacv.Blobs;
//import org.bytedeco.javacv.CanvasFrame;
//import org.bytedeco.javacv.OpenCVFrameConverter;
//import org.bytedeco.opencv.opencv_core.*;
//import org.bytedeco.opencv.opencv_imgproc.*;
//import static org.bytedeco.opencv.global.opencv_core.*;
//import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
//import static org.bytedeco.opencv.global.opencv_imgproc.*;

/**
 *
 * @author cezerilab
 */
public class TestOpenCVBlobDetection {
    

///////////////////////////////////////////////////////////////////
//*                                                             *//
//* As the author of this code, I place all of this code into   *//
//* the public domain. Users can use it for any legal purpose.  *//
//*                                                             *//
//*             - Dave Grossman                                 *//
//*                                                             *//
///////////////////////////////////////////////////////////////////
    public static void main(String[] args)
    {
        System.out.println("STARTING...\n");
        //demo();
        System.out.println("ALL DONE");
    }

    
//    public static void demo()
//    {
//        int MinArea = 6;
//        int ErodeCount =0;
//        int DilateCount = 0;
//        
//        IplImage RawImage = null;
//
//        // Read an image.
//        for(int k = 0; k < 7; k++)
//        {
//            if(k == 0) { RawImage = cvLoadImage("BlackBalls.jpg"); MinArea = 250; ErodeCount = 0; DilateCount = 1; }
//            else if(k == 1) { RawImage = cvLoadImage("Shapes1.jpg"); MinArea = 6; ErodeCount = 0; DilateCount = 1; }
//            else if(k == 2) { RawImage = cvLoadImage("Shapes2.jpg"); MinArea = 250; ErodeCount = 0; DilateCount = 1; }
//            else if(k == 3) { RawImage = cvLoadImage("Blob1.jpg"); MinArea = 2800; ErodeCount = 1; DilateCount = 1; }
//            else if(k == 4) { RawImage = cvLoadImage("Blob2.jpg"); MinArea = 2800; ErodeCount = 1; DilateCount = 1; }
//            else if(k == 5) { RawImage = cvLoadImage("Blob3.jpg"); MinArea = 2800; ErodeCount = 1; DilateCount = 1; }
//            else if(k == 6) { RawImage = cvLoadImage("Rice.jpg"); MinArea = 30; ErodeCount = 2; DilateCount = 1; }
//            //ShowImage(RawImage, "RawImage", 512);
//        
//            IplImage GrayImage = cvCreateImage(cvGetSize(RawImage), IPL_DEPTH_8U, 1);     
//            cvCvtColor(RawImage, GrayImage, CV_BGR2GRAY);
//            //ShowImage(GrayImage, "GrayImage", 512);
//
//            IplImage BWImage = cvCreateImage(cvGetSize(GrayImage), IPL_DEPTH_8U, 1); 
//            cvThreshold(GrayImage, BWImage, 127, 255, CV_THRESH_BINARY);
//            //ShowImage(BWImage, "BWImage");
//            
//            IplImage WorkingImage = cvCreateImage(cvGetSize(BWImage), IPL_DEPTH_8U, 1);     
//            cvErode(BWImage, WorkingImage, null, ErodeCount);    
//            cvDilate(WorkingImage, WorkingImage, null, DilateCount);
//            //ShowImage(WorkingImage, "WorkingImage", 512);
//        
//            //cvSaveImage("Working.jpg", WorkingImage);
//            //PrintGrayImage(WorkingImage, "WorkingImage");
//            //BinaryHistogram(WorkingImage);
//        
//            Blobs Regions = new Blobs();
//            Regions.BlobAnalysis(
//                    WorkingImage,               // image
//                    -1, -1,                     // ROI start col, row
//                    -1, -1,                     // ROI cols, rows
//                    1,                          // border (0 = black; 1 = white)
//                    MinArea);                   // minarea
//            Regions.PrintRegionData();
//
//            for(int i = 1; i <= Blobs.MaxLabel; i++)
//            {
//                double [] Region = Blobs.RegionData[i];
//                int Parent = (int) Region[Blobs.BLOBPARENT];
//                int Color = (int) Region[Blobs.BLOBCOLOR];
//                int MinX = (int) Region[Blobs.BLOBMINX];
//                int MaxX = (int) Region[Blobs.BLOBMAXX];
//                int MinY = (int) Region[Blobs.BLOBMINY];
//                int MaxY = (int) Region[Blobs.BLOBMAXY];
//                Highlight(RawImage,  MinX, MinY, MaxX, MaxY, 1);
//            }
//            
//            ShowImage(RawImage, "RawImage", 512);
//
//            cvReleaseImage(GrayImage); GrayImage = null;
//            cvReleaseImage(BWImage); BWImage = null;
//            cvReleaseImage(WorkingImage); WorkingImage = null;
//        }
//        cvReleaseImage(RawImage); RawImage = null;
//    }

//    // Versions with 2, 3, and 4 parms respectively
//    public static void ShowImage(IplImage image, String caption)
//    {
//        CvMat mat = image.asCvMat();
//        int width = mat.cols(); if(width < 1) width = 1;
//        int height = mat.rows(); if(height < 1) height = 1;
//        double aspect = 1.0 * width / height;
//        if(height < 128) { height = 128; width = (int) ( height * aspect ); }
//        if(width < 128) width = 128;
//        height = (int) ( width / aspect );
//        ShowImage(image, caption, width, height);
//    }
//    public static void ShowImage(IplImage image, String caption, int size)
//    {
//        if(size < 128) size = 128;
//        CvMat mat = image.asCvMat();
//        int width = mat.cols(); if(width < 1) width = 1;
//        int height = mat.rows(); if(height < 1) height = 1;
//        double aspect = 1.0 * width / height;
//        if(height != size) { height = size; width = (int) ( height * aspect ); }
//        if(width != size) width = size;
//        height = (int) ( width / aspect );
//        ShowImage(image, caption, width, height);
//    }
//    public static void ShowImage(IplImage image, String caption, int width, int height)
//    {
//        CanvasFrame canvas = new CanvasFrame(caption, 1);   // gamma=1
//        canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
//        canvas.setCanvasSize(width, height);
//        OpenCVFrameConverter converter = new OpenCVFrameConverter.ToIplImage();
//        canvas.showImage(converter.convert(image));
//    }
//    
//    public static void Highlight(IplImage image, int [] inVec)
//    {
//        Highlight(image, inVec[0], inVec[1], inVec[2], inVec[3], 1);
//    }
//    public static void Highlight(IplImage image, int [] inVec, int Thick)
//    {
//        Highlight(image, inVec[0], inVec[1], inVec[2], inVec[3], Thick);
//    }
//    public static void Highlight(IplImage image, int xMin, int yMin, int xMax, int yMax)
//    {
//        Highlight(image, xMin, yMin, xMax, yMax, 1);
//    }
//    public static void Highlight(IplImage image, int xMin, int yMin, int xMax, int yMax, int Thick)
//    {
//        CvPoint pt1 = cvPoint(xMin,yMin);
//        CvPoint pt2 = cvPoint(xMax,yMax);
//        CvScalar color = cvScalar(255,0,0,0);       // blue [green] [red]
//        cvRectangle(image, pt1, pt2, color, Thick, 4, 0);
//    }
//    
//    public static void PrintGrayImage(IplImage image, String caption)
//    {
//        int size = 512; // impractical to print anything larger
//        CvMat mat = image.asCvMat();
//        int cols = mat.cols(); if(cols < 1) cols = 1;
//        int rows = mat.rows(); if(rows < 1) rows = 1;
//        double aspect = 1.0 * cols / rows;
//        if(rows > size) { rows = size; cols = (int) ( rows * aspect ); }
//        if(cols > size) cols = size;
//        rows = (int) ( cols / aspect );
//        PrintGrayImage(image, caption, 0, cols, 0, rows);
//    }
//    public static void PrintGrayImage(IplImage image, String caption, int MinX, int MaxX, int MinY, int MaxY)
//    {
//        int size = 512; // impractical to print anything larger
//        CvMat mat = image.asCvMat();
//        int cols = mat.cols(); if(cols < 1) cols = 1;
//        int rows = mat.rows(); if(rows < 1) rows = 1;
//        
//        if(MinX < 0) MinX = 0; if(MinX > cols) MinX = cols; 
//        if(MaxX < 0) MaxX = 0; if(MaxX > cols) MaxX = cols; 
//        if(MinY < 0) MinY = 0; if(MinY > rows) MinY = rows; 
//        if(MaxY < 0) MaxY = 0; if(MaxY > rows) MaxY = rows; 
//        
//        System.out.println("\n" + caption);
//        System.out.print("   +");
//        for(int icol = MinX; icol < MaxX; icol++) System.out.print("-");
//        System.out.println("+");
//        
//        for(int irow = MinY; irow < MaxY; irow++)
//        {
//            if(irow<10) System.out.print(" ");
//            if(irow<100) System.out.print(" ");
//            System.out.print(irow);
//            System.out.print("|");
//            for(int icol = MinX; icol < MaxX; icol++)
//            {
//                int val = (int) mat.get(irow,icol);
//                String C = " ";
//                if(val == 0) C = "*";
//                System.out.print(C);
//            }
//            System.out.println("|");
//        }
//        System.out.print("   +");
//        for(int icol = MinX; icol < MaxX; icol++) System.out.print("-");
//        System.out.println("+");
//    }
//
//    public static void PrintImageProperties(IplImage image)
//    {
//        CvMat mat = image.asCvMat();
//        int cols = mat.cols();
//        int rows = mat.rows();
//        int depth = mat.depth();
//        System.out.println("ImageProperties for " + image + " : cols=" + cols + " rows=" + rows + " depth=" + depth);
//    }
//    
//    public static float BinaryHistogram(IplImage image)
//    {
//        CvScalar Sum = cvSum(image);
//        float WhitePixels = (float) ( Sum.getVal(0) / 255 );
//        CvMat mat = image.asCvMat();
//        float TotalPixels = mat.cols() * mat.rows();
//        //float BlackPixels = TotalPixels - WhitePixels;
//        return WhitePixels / TotalPixels;
//    }
//  
//    // Counterclockwise small angle rotation by skewing - Does not stretch border pixels
//    public static IplImage SkewGrayImage(IplImage Src, double angle)    // angle is in radians
//    {
//        //double radians = - Math.PI * angle / 360.0;   // Half because skew is horizontal and vertical
//        double sin = - Math.sin(angle);
//        double AbsSin = Math.abs(sin);
//        
//        int nChannels = Src.nChannels();
//        if(nChannels != 1) 
//        {
//            System.out.println("ERROR: SkewGrayImage: Require 1 channel: nChannels=" + nChannels);
//            System.exit(1);
//        }
//        
//        CvMat SrcMat = Src.asCvMat();
//        int SrcCols = SrcMat.cols();
//        int SrcRows = SrcMat.rows();
//
//        double WidthSkew = AbsSin * SrcRows; 
//        double HeightSkew = AbsSin * SrcCols;
//        
//        int DstCols = (int) ( SrcCols + WidthSkew ); 
//        int DstRows = (int) ( SrcRows + HeightSkew );
//    
//        CvMat DstMat = cvCreateMat(DstRows, DstCols, CV_8UC1);  // Type matches IPL_DEPTH_8U
//        cvSetZero(DstMat);
//        cvNot(DstMat, DstMat);
//        
//        for(int irow = 0; irow < DstRows; irow++)
//        {
//            int dcol = (int) ( WidthSkew * irow / SrcRows );
//            for(int icol = 0; icol < DstCols; icol++)
//            {
//                int drow = (int) ( HeightSkew - HeightSkew * icol / SrcCols );
//                int jrow = irow - drow;
//                int jcol = icol - dcol;
//                if(jrow < 0 || jcol < 0 || jrow >= SrcRows || jcol >= SrcCols) DstMat.put(irow, icol, 255);
//                else DstMat.put(irow, icol, (int) SrcMat.get(jrow,jcol));
//            }
//        }
//        
//        IplImage Dst = cvCreateImage(cvSize(DstCols, DstRows), IPL_DEPTH_8U, 1);
//        Dst = DstMat.asIplImage();
//        return Dst;
//    }
//    
//    public static IplImage TransposeImage(IplImage SrcImage)
//    {
//        CvMat mat = SrcImage.asCvMat();
//        int cols = mat.cols();
//        int rows = mat.rows();
//        IplImage DstImage = cvCreateImage(cvSize(rows, cols), IPL_DEPTH_8U, 1);
//        cvTranspose(SrcImage, DstImage);
//        cvFlip(DstImage,DstImage,1);
//        return DstImage;
//    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestOptimizedConvolution.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

/**
 *
 * @author cezerilab
 */
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

public class TestOptimizedConvolution {

    public static void main(String[] args) throws InterruptedException {
        // Örnek matris ve kernel
        int n=10;
        float[][] matrix = FactoryMatrix.randMatrix(n, n, 100,123);

        float[][] kernel = {
            {1, 0, 1},
            {0, 1, 0},
            {1, 0, 1}
        };

        // Convolution işlemini paralel olarak gerçekleştir
        float[][] convolvedMatrix = null;
        long t1=FactoryUtils.tic();
        for (int i = 0; i < 100; i++) {
//            convolvedMatrix = convolveParallel(matrix, kernel);
            convolvedMatrix = convolve(matrix, kernel);
            t1=FactoryUtils.toc(t1);
        }
//        
//        System.out.println("bitti");
//        // Sonucu yazdır
//        System.out.println("Orijinal Matris:");
//        printMatrix(matrix);
////
//        System.out.println("\nKernel Matrisi:");
//        printMatrix(kernel);
////
        System.out.println("\nConvolution Sonucu:");
        printMatrix(convolvedMatrix);
        
        CMatrix cm = CMatrix.getInstance()
                .randWithSeed(n,n,100,123)
                
                
//                .println()
//                .convolve(CMatrix.getInstance().setArray(kernel))
//                .println()
                ;
        CMatrix cm2 = CMatrix.getInstance().setArray(kernel);
        for (int i = 0; i < 2; i++) {            
            cm.tic().convolve(cm2).toc();
        }
        cm.println();
    }

    // Convolution işlemini gerçekleştiren fonksiyon
    public static float[][] convolve(float[][] matrix, float[][] kernel) {
        int matrixRows = matrix.length;
        int matrixCols = matrix[0].length;
        int kernelSize = kernel.length;

        // Sonuç matrisini oluştur
        float[][] convolvedMatrix = new float[matrixRows - kernelSize + 1][matrixCols - kernelSize + 1];

        // Her piksel için convolution işlemini gerçekleştir
        for (int i = 0; i <= matrixRows - kernelSize; i++) {
            for (int j = 0; j <= matrixCols - kernelSize; j++) {
                convolvedMatrix[i][j] = calculateConvolution(matrix, kernel, i, j);
            }
        }

        return convolvedMatrix;
    }

    // Paralel convolution işlemini gerçekleştiren fonksiyon
    public static float[][] convolveParallel(float[][] matrix, float[][] kernel) throws InterruptedException {
        int matrixRows = matrix.length;
        int matrixCols = matrix[0].length;
        int kernelSize = kernel.length;

        // Sonuç matrisini oluştur
        float[][] convolvedMatrix = new float[matrixRows - kernelSize + 1][matrixCols - kernelSize + 1];

        // Kullanılabilir işlemci sayısı kadar thread oluştur
        int numProcessors = Runtime.getRuntime().availableProcessors();
        ExecutorService executor = Executors.newFixedThreadPool(numProcessors);

        // Her satırı ayrı bir thread'de işleyen Runnable'lar oluştur
        for (int i = 0; i <= matrixRows - kernelSize; i++) {
            int row = i;
            executor.execute(() -> {
                for (int j = 0; j <= matrixCols - kernelSize; j++) {
                    convolvedMatrix[row][j] = calculateConvolution(matrix, kernel, row, j);
                }
            });
        }

        // Tüm thread'lerin bitmesini bekle
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);

        return convolvedMatrix;
    }

    // Belirli bir piksel için convolution işlemini hesaplayan fonksiyon
    private static float calculateConvolution(float[][] matrix, float[][] kernel, int row, int col) {
        float sum = 0;
        for (int i = 0; i < kernel.length; i++) {
            for (int j = 0; j < kernel[0].length; j++) {
                sum += matrix[row + i][col + j] * kernel[i][j];
            }
        }
        return sum;
    }

    // Matrisi yazdıran yardımcı fonksiyon
    public static void printMatrix(float[][] matrix) {
        for (float[] row : matrix) {
            System.out.println(Arrays.toString(row));
        }
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestOverlayImages.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;
import java.awt.image.BufferedImage;

/**
 *
 * @author BAP1
 */
public class TestOverlayImages {

    public static void main(String[] args) {
        CMatrix cm1 = CMatrix.getInstance().imread("images\\horoz.jpg").imresize(550,400);
        CMatrix cm2 = CMatrix.getInstance().imread("images\\pullar.png");
        CMatrix cm3 = CMatrix.getInstance().imread("images\\kaplan1.jpg");
        CMatrix cm4 = cm1.overlay(cm2,0.3f).overlay(cm3, 0.7f).imshow();
        
//        BufferedImage img1 = cm1.getImage();
//        BufferedImage img2 = cm2.getImage();
//        BufferedImage img3 = ImageProcess.overlayImage(img1,img2,0.33f);
//        CMatrix cm = CMatrix.getInstance(img3).imshow();
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPerformanceGUI.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestPerformanceGUI {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan1.jpg").imshow("rgb");
        CMatrix cm1 = cm.rgb2gray().imshow("gray").binarizeOtsu().imshow("otsu");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPerformDataSetArff.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TLearningType;

/**
 *
 * @author elcezerilab
 */
public class TestPerformDataSetArff {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstanceFromFile("C:\\Users\\elcezerilab\\Downloads\\iris.data", ",")
                .toWekaArff("C:\\Users\\elcezerilab\\Downloads\\iris.arff", TLearningType.CLASSIFICATION)
                
                
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPerlinNoise.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestPerlinNoise {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range(-100, 100,1,3)
                .shape()
                .perlinNoise(0.1f)
                .plot()
                ;
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPerlinNoise2D.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestPerlinNoise2D {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                //.zeros(500, 500)
                .perlinNoise2D(300,300,7, 0)
                .rgb2gray()
                .map(0, 255)
                .imshow()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPermutaionPairs.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.util.Arrays;

/**
 *
 * @author BAP1
 */
public class TestPermutaionPairs {
    public static void main(String[] args) {
        String pass="123de45mo";
        char[] pool="abcçdefgğhıijklmnoöprsştuüvwyz0123456789".toCharArray();
        int n=pool.length;
        String[] comb=CMatrix.getInstance().permutationPairs(pass.toCharArray(),4).permutationPairs;
        Arrays.asList(comb).forEach(e->{
            if (e.equals("demo")) {
                System.out.println("buldu");
            }
        });
        
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPermute.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import org.nd4j.linalg.cpu.nativecpu.NDArray;

/**
 *
 * @author cezerilab
 */
public class TestPermute {
    public static void main(String[] args) {
                
        //raw data
        NDArray d=new NDArray(FactoryUtils.vector(0, 1200),new int[]{60,20});
        CMatrix cm1 = CMatrix.getInstance(d)
                .println()
                .reshape(5,4,6,5,2)
                .println()
                .permute(3,4,0,1,2)
                .println()
                ;
        
        
//        float[][] d2=CMatrix.getInstance().rand(2, 3, 0, 10).round().toFloatArray2D();
//        CMatrix.getInstance(d2).println();
//        float[] d3=FactoryUtils.flatten(d2);
//        CMatrix.getInstance(d3).println();
        

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPidController.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.utils.PidController;

/**
 *
 * @author cezerilab
 * further info see
 * http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-direction/improving-the-beginners-pid-introduction
 */
public class TestPidController {

    public static void main(String[] args) {
        PidController pid = new PidController(0.25, 0.01, 0.4);
        pid.setOutputLimits(10);
        //pid.setMaxIOutput(2);
        //pid.setOutputRampRate(3);
        //pid.setOutputFilter(.3);
        pid.setSetpointRange(40);

        double target = 100;

        double actual = 0;
        double output = 0;

        pid.setSetpoint(0);
        pid.setSetpoint(target);
        

        System.err.printf("Target\tActual\tOutput\tError\n");
        //System.err.printf("Output\tP\tI\tD\n");

        // Position based test code
        int n=200;
        double[][] data=new double[4][n];
        for (int i = 0; i < n; i++) {

            //if(i==50)miniPID.setI(.05);
            if (i == n/2) {
                target = target/2;
            }

            //if(i==75)target=(100);
            //if(i>50 && i%4==0)target=target+(Math.random()-.5)*50;
            output = pid.getOutput(actual, target);
            actual = actual + output;

            //System.out.println("=========================="); 
            //System.out.printf("Current: %3.2f , Actual: %3.2f, Error: %3.2f\n",actual, output, (target-actual));
            System.err.printf("%3.2f\t%3.2f\t%3.2f\t%3.2f\n", target, actual, output, (target - actual));
            data[0][i]=target;
            data[1][i]=actual;
            data[2][i]=output;
            data[3][i]=(target - actual);

            //if(i>80 && i%5==0)actual+=(Math.random()-.5)*20;
        }
        
        CMatrix cm = CMatrix.getInstance(data)
                .plot(new String[]{"Pid Controller"},new String[]{"target","actual","output","(target-actual)"})
                ;

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPlot.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestPlot {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .linspace(-360, 360, 360)
                .toRadians()
                
                .sin()
                .jitter(0.05f)
                .plot()
//                .rand(10,5)
//                .plot()
               
                ;
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPlotFigureAttribute.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.types.TFigureAttribute;
import jazari.matrix.CMatrix;
import jazari.types.TPointType;
import jazari.factory.FactoryStroke;
import java.awt.BasicStroke;
import java.awt.Stroke;

/**
 *
 * @author BAP1
 */
public class TestPlotFigureAttribute {

    public static void main(String[] args) {
//        CMatrix cm1=CMatrix.getInstance().linspace(-30,30,60).gaussmf(1.2,10);
        TFigureAttribute a = new TFigureAttribute();
        a.axis_names = new String[]{"Frequency", "Return Losss"};
        a.figureCaption = "Optimum Resonans Figure";
        a.items = new String[]{"patch10", "patch20", "patch30"};
        a.title = "Resonans";
//        a.pointType = TPointType.LINE;
        a.pointType = "-*";
        a.isStroke = true;
        Stroke s = new BasicStroke(2.0f, // Width
                BasicStroke.CAP_ROUND, // End cap
                BasicStroke.JOIN_ROUND, // Join style
                10.0f, // Miter limit
                new float[]{5,3,1,3}, // Dash pattern
//                new float[]{16.0f, 20.0f}, // Dash pattern
                0.0f);                     // Dash phase

        a.stroke.add(FactoryStroke.getDashedWithDotStroke());
        BasicStroke bs2 = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
        a.stroke.add(bs2);
        CMatrix.getInstance().rand(100, 2).plot(a);
//        CMatrix cm2=cm1.sin();
//        CMatrix cm3=cm1.cat(2, cm2);
//        cm3.println().transpose().plot();
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPopup.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;

public class TestPopup extends JFrame {

    private JRadioButtonMenuItem items[];
    private Color colorValues[] = {Color.blue, Color.yellow, Color.red};

    public TestPopup() {
        super("Using JPopupMenus");

        final JPopupMenu popupMenu = new JPopupMenu();
        ItemHandler handler = new ItemHandler();
        String colors[] = {"Blue", "Yellow", "Red"};
        ButtonGroup colorGroup = new ButtonGroup();
        items = new JRadioButtonMenuItem[3];

      // construct each menu item and add to popup menu; also  
        // enable event handling for each menu item  
        for (int i = 0; i < items.length; i++) {
            items[ i] = new JRadioButtonMenuItem(colors[ i]);
            popupMenu.add(items[ i]);
            colorGroup.add(items[ i]);
            items[ i].addActionListener(handler);
        }

        getContentPane().setBackground(Color.white);

      // define a MouseListener for the window that displays  
        // a JPopupMenu when the popup trigger event occurs  
        addMouseListener(
                new MouseAdapter() {
                    public void mousePressed(MouseEvent e) {
                        checkForTriggerEvent(e);
                    }

                    public void mouseReleased(MouseEvent e) {
                        checkForTriggerEvent(e);
                    }

                    private void checkForTriggerEvent(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            popupMenu.show(e.getComponent(),
                                    e.getX(), e.getY());
                        }
                    }
                }
        );

        setSize(300, 200);
        show();
    }

    public static void main(String args[]) {
        TestPopup app = new TestPopup();

        app.addWindowListener(
                new WindowAdapter() {
                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                }
        );
    }

    private class ItemHandler implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            // determine which menu item was selected  
            for (int i = 0; i < items.length; i++) {
                if (e.getSource() == items[ i]) {
                    getContentPane().setBackground(colorValues[ i]);
                    repaint();
                    return;
                }
            }
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPopupMenu.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JFrame;

public class TestPopupMenu extends JFrame {

    JMenuItem item1, item2;
    static JPopupMenu pop;

    public TestPopupMenu() {
        this.setSize(200, 150);
        item1 = new JMenuItem("This is Menu Item");
        item2 = new JMenuItem("This is another Menu Item");

        pop = new JPopupMenu();

        MouseListener popListener = new PopupListener();

        pop.add(item1);
        pop.add(item2);

        addMouseListener(popListener);

        setLocationRelativeTo(null);
        pack();
        setVisible(true);
    }

    public static void main(String a[]) {
        TestPopupMenu obj=new TestPopupMenu();
        obj.setSize(200,200);
    }

}

class PopupListener extends MouseAdapter {

    public void mousePressed(MouseEvent e) {
        maybeShowPopup(e);
    }

    public void mouseReleased(MouseEvent e) {
        maybeShowPopup(e);
    }

    private void maybeShowPopup(MouseEvent e) {
        if (e.isPopupTrigger()) {
            TestPopupMenu.pop.show(e.getComponent(),e.getX(), e.getY());
        }
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPrevNext.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestPrevNext {
    public static void main(String[] args) {
//        CMatrix cm = CMatrix.getInstance().randn(2,10).println("en baş").timesScalar(100).pow(2).log().println("en son");
//        CMatrix cm1=cm.prevFirst().println("en baş").nextLast().println("en son");
//        CMatrix cm2=cm.prev(5).println("en baş").next(5).println("en son");
//        cm1.println();
//        cm1=cm1.next().println();
//        cm1=cm1.next().println();
//        cm1=cm1.next().println();
//        cm1=cm1.next().println();
//        if (cm1.nextMatrix==null) {
//            System.out.println("null");
//        }
//        CMatrix cm2=cm.nextLast().println("en son");
//        cm.println("cm nin kendisi");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestProbabilityDensityFunction.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestProbabilityDensityFunction {
    public static void main(String[] args) {
//        CMatrix cm=CMatrix.getInstance().imread("images\\kaplan2.jpg").imshow().imhist().rgb2gray().getHistogramData().plot();
        CMatrix cm2=CMatrix.getInstance().imread("images\\kaplan2.jpg").rgb2gray().imshow().getPDFData().plot();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestPytorchYoloV8.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

/**
 *
 * @author Teknofest
 */
import ai.djl.Device;
import ai.djl.inference.Predictor;
import ai.djl.modality.cv.Image;
import ai.djl.modality.cv.ImageFactory;
import ai.djl.modality.cv.output.DetectedObjects;
import ai.djl.repository.zoo.Criteria;
import ai.djl.training.util.ProgressBar;
import java.io.File;

public class TestPytorchYoloV8 {
    public static void main(String[] args) throws Exception {
        // Model yolu
        String modelPath = "models/my_model/model.pt";

        // GPU kullanımını etkinleştir
        Device device = Device.gpu();

        // Model yükleme kriterleri
        Criteria<Image, DetectedObjects> criteria = Criteria.builder()
                .setTypes(Image.class, DetectedObjects.class)
                .optModelPath(new File(modelPath).toPath())
                .optEngine("PyTorch")
                .optDevice(device)
                .build();

        // Modeli yükle
        try (Predictor<Image, DetectedObjects> predictor = criteria.loadModel().newPredictor()) {
            // Test görüntüsü yükle
//            Image img = ImageFactory.getInstance().fromFile(new File("path/to/test/image.jpg"));
//
//            // Tahmin yap
//            DetectedObjects detection = predictor.predict(img);
//
//            // Sonuçları yazdır
//            System.out.println(detection);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestQuantizedImage.java
============================================================
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryMatrix;

public class TestQuantizedImage {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images\\kaplan.jpg")
                //.imshow("original")
                .rgb2gray()
                
                .imshow()
                
                ;
        int q=128;
        double[][] img=cm.toDoubleArray2D();
        double[][] d=FactoryMatrix.clone(img);
        for (int i = 0; i < img.length; i++) {
            for (int j = 0; j < img[0].length; j++) {
                d[i][j]=(int)img[i][j]/(256/q);
            }
        }
        CMatrix cm1 = CMatrix.getInstance(d)               
                //.imshow("quantized image")
                .multiplyScalar((256/q))
                
                .imshow()
        
        ;
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRadon.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package test;

import jazari.matrix.CMatrix;
import java.util.List;

/**
 *
 * @author BAP1
 */
public class TestRadon {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().imread("images\\kaplan.jpg").imshow().cmd("0:2:end", "0:2:end").imshow();
        CMatrix cm1=CMatrix.getInstance().imread("images\\chessboard.png").rgb2gray().imshow().imresize(200, 200).imshow();
        CMatrix cm2=cm1.transformRadonForward(180,200).updateImage().imshow("radon");
        CMatrix cm3=cm2.transpose().transformRadonBackward(cm1.getRowNumber()).normalizeWithRange(0, 255).transpose().imshow();
    }   
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRailrod.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;
import jazari.matrix.CRectangle;
import java.awt.image.BufferedImage;

/**
 *
 * @author BAP1
 */
public class TestRailrod {

    private static String[] folders = {"BOLT_LEFT", "BOLT_RIGHT", "FASTENING_MODEL_LEFT", "FASTENING_MODEL_RIGHT"};
    private static String path = "C:\\Users\\BAP1\\Downloads\\RailDataSet\\RailDataSet\\";

    public static void main(String[] args) {
        //reIndexFolder();
        //cropROI();
        //preProcess();
        evaluateClassifierPerformance();
    }

    private static void reIndexFolder() {
        for (int i = 0; i < folders.length; i++) {
            FactoryUtils.renameFilesAsAscIndex(path + "\\" + folders[i], "jpg");
        }
    }

    private static void cropROI() {
        //her klasöre göre resim sayısı ve roi değişiyor
        for (int i = 0; i < 30; i++) {
            CMatrix cm = CMatrix.getInstance().imread(path + "\\" + folders[1] + "\\" + i + ".jpg")
                    .imresize(400, 480)
                    .imshow();

            BufferedImage img = ImageProcess.cropImage(cm.getImage(), new CRectangle(150, 50, 200, 200));
            cm.setImage(img)
                    .imshow()
                    .writeImage(path + "\\" + folders[1] + "\\yeni\\" + (i + 32) + ".jpg");
        }
    }

    private static void preProcess() {
        String dsPath = "C:\\Users\\BAP1\\Downloads\\RailDataSet\\ds\\bolted\\";
        int index=61;
//        String dsPath = "C:\\Users\\BAP1\\Downloads\\RailDataSet\\ds\\fastened\\";
//        int index=205;
        double[] scores=new double[index];
        for (int i = 1; i <= index; i++) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(dsPath + i + ".jpg")
                    //.imshow("original")
                    .rgb2gray()
                    //.imshow("gray")
                    .threshold(10)
                    //.imshow("thresholded")
                    .imcomplement()
                    //.imshow("negative")
                    .cmd("0:125",":")
                    //.imshow("negative cropped")
                    .sum()
                    //.plot()
                    ;
            double n=cm.sumTotal();
            System.out.println(i+":n = " + n);
            scores[i-1]=n;
        }
        
        CMatrix cm1 = CMatrix.getInstance(scores);
        System.out.println("mean = " + cm1.getMean());
        System.out.println("min = " + cm1.getMinTotal());  
        //446896.0 found for fastened class which can be considered as threshold value for linear classifier
        System.out.println("max = " + cm1.getMaxTotal());

    }

    private static void evaluateClassifierPerformance() {
        double thr=900000;
        int nBolted=61;
        int nFastened=205;
        double nTotal=266;
        int errorFastened=getErrorForFastenedClass("C:/Users\\elcezerilab\\Downloads\\ds\\fastened\\",205,thr);
        int errorBolted=getErrorForBoltedClass("C:\\Users\\elcezerilab\\Downloads\\ds\\bolted\\",61,thr);
        double errorRate=(errorBolted+errorFastened)/nTotal*100;
        System.out.println("errorRate = " + errorRate);
    }

    private static int getErrorForBoltedClass(String path, int n, double thr) {
        int nErr=0;
        for (int i = 1; i <= n; i++) {
            double score=calculateWhitePixelCount(path,i);
            if (score>thr) {
                nErr++;
            }
        }
        return nErr;
    }
    
    private static int getErrorForFastenedClass(String path, int n, double thr) {
        int nErr=0;
        for (int i = 1; i <= n; i++) {
            double score=calculateWhitePixelCount(path,i);
            if (score<thr) {
                nErr++;
            }
        }
        return nErr;
    }

    private static double calculateWhitePixelCount(String path, int i) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(path + i + ".jpg")
                    .imshow("original")
                    .rgb2gray()
                    .imshow("gray")
                    .threshold(10)
                    .imshow("thresholded")
                    .imcomplement()
                    .imshow("negative")
                    .cmd("0:125",":")
                    .imshow("negative cropped")
                    .sum()
                    .plot()
                    ;
            return cm.sumTotal();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRandomFunction.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.Random;
import jazari.factory.FactoryMatrix;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestRandomFunction {
    static int max=100000;
    public static void main(String[] args) {
        uniformRandom();
        normalRandom();
    }   

    private static void uniformRandom() {        
        float[] r=new float[max];
        for (int i = 0; i < max; i++) {
            r[i]=(int)(Math.random()*100);
        }
        float[] hist=FactoryUtils.hist(r, 10);                
        CMatrix cm = CMatrix.getInstance(hist).T().bar();
    }

    private static void normalRandom() {
        CMatrix cm = CMatrix.getInstance().randn(max, 1).map(-100, 0);
        float[] r=cm.toFloatArray1D();
        float[] hist=FactoryUtils.hist(r, 10);                
        CMatrix cm2 = CMatrix.getInstance(hist).T().bar();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRandomSeed.java
============================================================
package test;

import jazari.matrix.CMatrix;

public class TestRandomSeed {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .random_seed(1234)
                .randn(100,1)
                .random_sample(1)
                .dump()
                .setArray(CMatrix.getInstance().random_seed(1234).randn(100,1).toDoubleArray2D())
                .plot()
                .random_sample(1)
                .println()
                .plotRefresh()
//                .setRandomSeed(null)
                .randn(100,1)
                .random_sample(1)
                .println()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRandPerm.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestRandPerm {
    public static void main(String[] args) {
//        CMatrix randData=CMatrix.getInstance().rand(62, 20, 0, 255).round();
//        CMatrix[] subsets=split(randData,5); //5 means 5-fold CV which equals to 80% and 20% partitions
        CMatrix rand_indexes=CMatrix.getInstance().randPerm(62).println();
    }

    private static CMatrix[] split(CMatrix randData, int nFolds) {
        CMatrix[] ret=new CMatrix[nFolds];
        int nRows=randData.getRowNumber();
        int nCols=randData.getColumnNumber();
        int delta=nRows/nFolds;
        for (int i = 0; i < nFolds-1; i++) {
            ret[i]=randData.cmd(i*delta+":"+((i+1)*delta-1), ":").println((i+1)+".subset");
        }
        CMatrix cm=CMatrix.getInstance().zeros(1,nCols);
        for (int i = (nFolds-1)*delta; i < nRows; i++) {
            CMatrix temp=randData.getRowMatrix(i).transpose();
            cm=cm.cat(2, temp);
        }
        cm=cm.deleteRow(0);
        ret[nFolds-1]=cm.println((nFolds)+".subset");
        return ret;
    }    
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRange2D.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestRange2D {
    public static void main(String[] args) {
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRangeSqrtPlot.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestRangeSqrtPlot {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range(-200,300)
                .sqrt()
                .plot()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestReadTiffImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.gui.FrameImage;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;
import java.awt.image.BufferedImage;

/**
 *
 * @author cezerilab
 */
public class TestReadTiffImage {

    public static void main(String[] args) {
        BufferedImage img = ImageProcess.imread("C:/deneme.tif");
        int w = img.getWidth();
        int h = img.getHeight();
        System.out.println("w = " + w);
        System.out.println("h = " + h);

//        FrameImage frm=new FrameImage();
//        frm.setImage(ImageProcess.readImage("C:\\deneme.tif"));
//        frm.setVisible(true);
//        CMatrix cm = CMatrix.getInstance()
//                .imread("C:/deneme.tif")
//                .imshow()
//                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRegionProposal.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author DELL LAB
 */
public class TestRegionProposal {

    public static void main(String[] args) {
        
        CMatrix cm2 = CMatrix.getInstance().imread("images/dog_1.png").imshow().rgb2gray()
//                .cmd("0:60","75:148")
                .edgeDetectionCanny()
                .imshow();
        System.out.println("total:"+cm2.sumTotal()/(cm2.getRowNumber()*cm2.getColumnNumber()*255)*100);
        
//        CMatrix cm = CMatrix.getInstance()
//                .rand(300, 300)
//                .map(170, 190)
//                .drawLine(10, 10, 100, 50, 3, Color.WHITE)
//                .imshow()
//                .edgeDetectionCanny()
//                .imshow();
//        List<CMatrix> lst = new ArrayList();
//        lst.add(cm.cmd("0:150", "0:150").imshow());
//        lst.add(cm.cmd("150:299", "0:150").imshow());
//        lst.add(cm.cmd("0:150", "150:299").imshow());
//        lst.add(cm.cmd("150:299", "150:299").imshow());
//        double thr = 10;
//        List<String> dizi = new ArrayList();
//        for (int i = 0; i < lst.size(); i++) {
//            if (lst.get(i).sumTotal() > thr) {
//                dizi.add(i+":" + lst.get(i).sumTotal());
//            }
//        }
//
//        int a=3;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestReIndexFilesBasedOnNanoTimeUniqueness.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestReIndexFilesBasedOnNanoTimeUniqueness {
    public static void main(String[] args) {
        String pathFolder="D:\\DATASETS\\_bla_bla";
        CMatrix cm = CMatrix.getInstance()
                .reIndexFilesBasedOnPrefixAndTimeStamp(pathFolder,"jpg,xml") //file names change to current nanotime where files having same name with different extension s ie. jpg and xml in case of annotation dataset to satisfy uniqueness 
                ;
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestReplicateImage.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author Cezeri
 */
public class TestReplicateImage {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/gul_1.jpg")
                .imresize(0.1f)
                .imReplicate(5, 3)
                .imshow()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestResizeAdaptiveImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import java.io.File;
import java.util.Arrays;
import java.util.Collections;

/**
 *
 * @author cezerilab
 */
public class TestResizeAdaptiveImage {

    public static void main(String[] args) {
//        String sourcePath = "C:\\Users\\cezerilab\\Downloads\\d_female";
//        String destPath = "C:\\Users\\cezerilab\\Downloads\\ds\\dfemale";
//        resizeWithAspectRatio(sourcePath, destPath);
//        resize(sourcePath,destPath);
        
        String path = "C:\\Users\\cezerilab\\Downloads\\ds";
        FactoryUtils.splitTrainTestFolder(path, 0.8f, 0.2f);
    }

    private static void resizeWithAspectRatio(String sourcePath, String destPath) {
        FactoryUtils.makeDirectory(destPath);
        File[] imgs = FactoryUtils.getFileArrayInFolderForImages(sourcePath);
        Collections.shuffle(Arrays.asList(imgs));
        for (File img : imgs) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(img)
                    .imresizeWithAspectRatio(224)
                    //.imshow()
                    .imsave(destPath, img.getName());
        }
    }

    private static void resize(String sourcePath, String destPath) {
        FactoryUtils.makeDirectory(destPath);
        File[] imgs = FactoryUtils.getFileArrayInFolderForImages(sourcePath);
        Collections.shuffle(Arrays.asList(imgs));
        for (File img : imgs) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(img)
                    .imresize(224,224)
                    //.imshow()
                    .imsave(destPath, img.getName());
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestResizeImage.java
============================================================
package test;

import jazari.matrix.CMatrix;

public class TestResizeImage {
    public static void main(String[] args) {
        int kat=40;
        CMatrix cm = CMatrix.getInstance()
                .imread("images\\kaplan.jpg")
                .imshow("original")
                .cmd("0:"+kat+":end","0:"+kat+":end")
                .imshow("resized")
//                .imresize(0.5)
//                .imshow("ocl based resized")
                
                ;
//        double[][] img=cm.toDoubleArray2D();
//        double[][] d=new double[img.length/kat][img[0].length/kat];
//        for (int i = 0; i < img.length; i+=kat) {
//            for (int j = 0; j < img[0].length; j+=kat) {
//                d[i/kat][j/kat]=img[i][j];
//            }
//        }
//        cm=CMatrix.getInstance(d)
//                .imshow()
//                ;


    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestResizeImagesInDataSet.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestResizeImagesInDataSet {
    public static void main(String[] args) {
        //String path="D:\\DATASETS\\MASS\\CBIS_DDSM_JPG\\yolo_ds\\calc\\yolo\\images\\val";
        String sourcePath="D:\\DATASETS\\weeds\\CottonWeedDet12\\weedImages_medium";
        String targetPath="D:\\DATASETS\\weeds\\CottonWeedDet12\\weedImages_small";
        FactoryUtils.resizeImages(sourcePath, targetPath, 0.5f);
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestResizeWithAspect.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import java.io.File;

/**
 *
 * @author DELL LAB
 */
public class TestResizeWithAspect {

    public static void main(String[] args) {
        resizeWithAspectRatio();
    }

    private static void resizeWithAspectRatio() {
//        String source="C:\\python_data\\dataset\\gatenet\\datasets\\cats_and_dogs\\test\\cats";
//        String dest="C:\\python_data\\dataset\\gatenet\\datasets\\cats_and_dogs_224\\test\\cats";
//        String source="D:\\Dropbox\\PythonProjects\\GateNET\\simple_images\\ters_lale";
//        String dest="D:\\Dropbox\\PythonProjects\\GateNET\\simple_images\\ters_lale_224";
        String source = "C:\\Users\\cezerilab\\Desktop\\pollens";
        String dest = "C:\\Users\\cezerilab\\Desktop\\pollens_224";
        CMatrix cm = CMatrix.getInstance();
        File[] dirs = FactoryUtils.getDirectories(source);
        for (File dir : dirs) {
            FactoryUtils.makeDirectory(dest+"/"+dir.getName());
            File[] files = FactoryUtils.getFileListInFolder(dir.getAbsolutePath());            
            for (File file : files) {
                try {
                   cm.imread(file).imresizeWithAspectRatio(224).imsave(dest+'/'+dir.getName(), file.getName()); 
                } catch (Exception e) {
                    System.out.println("");
                }
                
            }

        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRGBHSVConversions.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryUtils;

/**
 *
 * @author BAP1
 */
public class TestRGBHSVConversions {
    public static void main(String[] args) { 
        String str="images\\blob.jpg";
        CMatrix cmRGB=CMatrix.getInstance().imread(str).imshow();
//        CMatrix cmRed=CMatrix.getInstance().imread(str).getRedChannel().imshow();
//        CMatrix cmGreen=CMatrix.getInstance().imread(str).getGreenChannel().imshow();
//        CMatrix cmBlue=CMatrix.getInstance().imread(str).getBlueChannel().imshow();
//        CMatrix cmHSV=CMatrix.getInstance().imread(str).toHSV().imshow();
        CMatrix cmHue=CMatrix.getInstance().imread(str).getHueChannel().imshow();
//        CMatrix cmSaturation=CMatrix.getInstance().imread(str).getSaturationChannel().imshow();
//        CMatrix cmValue=CMatrix.getInstance().imread(str).getValueChannel().imshow();
    }    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRGBToLAB.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import jazari.image_processing.ImageProcess;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author DELL LAB
 */
public class TestRGBToLAB {
    public static void main(String[] args) {
        
        double[] lab=FactoryUtils.toDoubleArray1D(ImageProcess.rgbToLab(255,0,0));
        for (int i = 0; i < lab.length; i++) {
            System.out.println(lab[i]);
        }
        Arrays.stream(lab).forEach(e->System.out.println(e+";"));
        Arrays.stream(lab).forEach(System.out::println);
        //d.forEach(System.out::println);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestRotatingCube.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author cappello
 */
public class TestRotatingCube extends JPanel {

    private double vertex[][][][]
            = {
                {
                    {
                        {-1, -1, -1},
                        {1, -1, -1}
                    },
                    {
                        {-1, 1, -1},
                        {1, 1, -1}
                    }
                },
                {
                    {
                        {-1, -1, 1},
                        {1, -1, 1}
                    },
                    {
                        {-1, 1, 1},
                        {1, 1, 1}
                    }
                }
            };

    // rotations in radians
    private double xyR = 0.005,
            xzR = 0.005,
            yzR = 0.005;

    // view attributes
    private final static int IMAGE_SIZE = 500,
            SCALE = 100,
            OFFSET = 200,
            DIAMETER = 8;

    @Override
    public void paintComponent(Graphics graphics) {
        graphics.setColor(Color.white);
        graphics.fillRect(0, 0, IMAGE_SIZE, IMAGE_SIZE);

        // rotate cube
        for (int x = 0; x < 2; x++) {
            for (int y = 0; y < 2; y++) {
                for (int z = 0; z < 2; z++) {
                    xyRotate(vertex[x][y][z], Math.sin(xyR), Math.cos(xyR));
                    xzRotate(vertex[x][y][z], Math.sin(xzR), Math.cos(xzR));
                    yzRotate(vertex[x][y][z], Math.sin(yzR), Math.cos(yzR));
                }
            }
        }

        // draw cube edges
        for (int x = 0; x < 2; x++) {
            for (int y = 0; y < 2; y++) {
                graphics.setColor(Color.red);
                drawEdge(vertex[x][y][0][0], vertex[x][y][0][1], vertex[x][y][1][0], vertex[x][y][1][1], graphics);
                graphics.setColor(Color.blue);
                drawEdge(vertex[x][0][y][0], vertex[x][0][y][1], vertex[x][1][y][0], vertex[x][1][y][1], graphics);
                graphics.setColor(Color.green);
                drawEdge(vertex[0][x][y][0], vertex[0][x][y][1], vertex[1][x][y][0], vertex[1][x][y][1], graphics);
            }
        }

        // draw cube vertices
        for (int x = 0; x < 2; x++) {
            for (int y = 0; y < 2; y++) {
                for (int z = 0; z < 2; z++) {
                    drawVertex(vertex[x][y][z][0], vertex[x][y][z][1], graphics);
                }
            }
        }
    }

    // apply plane rotation to 3D point, only 2 coordinates are affected
    final void xyRotate(double p[], double sin, double cos) {
        double temp;
        temp = cos * p[0] + sin * p[1];
        p[1] = -sin * p[0] + cos * p[1];
        p[0] = temp;
    }

    final void xzRotate(double p[], double sin, double cos) {
        double temp;
        temp = cos * p[0] + sin * p[2];
        p[2] = -sin * p[0] + cos * p[2];
        p[0] = temp;
    }

    final void yzRotate(double p[], double sin, double cos) {
        double temp;
        temp = cos * p[1] + sin * p[2];
        p[2] = -sin * p[1] + cos * p[2];
        p[1] = temp;
    }

    final void drawEdge(double x1, double y1, double x2, double y2, Graphics g) {
        g.drawLine((int) (x1 * SCALE) + OFFSET, (int) (-y1 * SCALE) + OFFSET, (int) (x2 * SCALE) + OFFSET, (int) (-y2 * SCALE) + OFFSET);
    }

    final void drawVertex(double x, double y, Graphics g) {
        g.setColor(Color.yellow);
        g.fillOval((int) (SCALE * x) + OFFSET - DIAMETER / 2, (int) (SCALE * (-y)) + OFFSET - DIAMETER / 2, DIAMETER, DIAMETER);

        g.setColor(Color.black);
        g.drawOval((int) (SCALE * x) + OFFSET - DIAMETER / 2, (int) (SCALE * (-y)) + OFFSET - DIAMETER / 2, DIAMETER, DIAMETER);
    }

    /**
     * @param args the command line arguments: Unused
     */
    public static void main(String[] args) {
        TestRotatingCube jPanel = new TestRotatingCube();
        JFrame application = new JFrame("Animation");
        application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        application.add(jPanel);
        application.setSize(500, 500);
        application.setVisible(true);
        while (true) {
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
                Logger.getLogger(TestRotatingCube.class.getName()).log(Level.SEVERE, null, ex);
            }
            jPanel.repaint();
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestScatter.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestScatter {

    public static void main(String[] args) {
//        CMatrix cm1 = CMatrix.getInstance().rand(1,100).timesScalar(100).transpose();
//        CMatrix cm2 = cm1.jitter(20);
//        CMatrix cm3 = cm1.cat(1, cm2).scatter().plot();

        //iki farklı random dist seçtiğimde
//        CMatrix cm1 = CMatrix.getInstance().rand(1,100).transpose();
//        CMatrix cm2 = CMatrix.getInstance().rand(1,100).transpose();
//        CMatrix cm3=cm1.cat(1, cm2).scatter();

        //iki farklı random dist seçtiğimde
        CMatrix cm1 = CMatrix.getInstance().rand(1,100);
        CMatrix cm2 = cm1.clone().jitter(100);
        CMatrix cm3=cm1.cat(2, cm2).tr().println().scatter();

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSensorsPC.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.profesorfalken.jsensors.JSensors;
import com.profesorfalken.jsensors.model.components.Components;
import com.profesorfalken.jsensors.model.components.Gpu;
import java.util.List;

/**
 *
 * @author cezerilab
 */
public class TestSensorsPC {
    public static void main(String[] args) {
        Components comp = JSensors.get.components();
        List<Gpu> lst=comp.gpus;
        for (Gpu gpu : lst) {
            System.out.println("gpu.name = " + gpu.name);
            System.out.println("gpu fans count= " + gpu.sensors.fans.size());
            System.out.println("fan speed:"+gpu.sensors.fans.get(0).value);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSerialization.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author DELL LAB
 */
public class TestSerialization {
    public static void main(String[] args) {
        CMatrix cm=CMatrix.getInstance().rand(10,8).println().serialize("data\\res.res");
        System.out.println("merhaba");
        CMatrix cm2=CMatrix.getInstance().deSerialize("data\\res.res").println("deserialize matrix");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestShowMessage.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author Teknofest
 */
public class TestShowMessage {
    public static void main(String[] args) {
        FactoryUtils.showMessageTemp("merhaba kamran", 5000, null);
        for (int i = 0; i < 100; i++) {
            System.out.println("i = " + i);
            
        }
    }
     
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestShuffle.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestShuffle {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().rand(10, 5, 0, 255).round().dump("before shuffling").shuffleRows().dump("after shuffling");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestShuffleImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author elcezerilab
 */
public class TestShuffleImage {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
//                .range("-360:360:5")
//                .toRadians()
//                .sin()
//                .map(0, 255)
//                .replicateColumn(720/5)
//                .imshow()
//                .shape()
                .imread("images/kaplan1.jpg")
//                .imread("images/rice.png")
//                .rgb2gray()
                .imshow()
                .shufflePixelImage()
                .imshow(true)
                .deShufllePixelImage()
                .imshow(true)
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestShufflePixelImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestShufflePixelImage {
    public static void main(String[] args) {
        CMatrix cm=CMatrix.getInstance()
                .imread("images/kaplan.jpg")
//                .rgb2gray()
                .imshow("original")
//                .shufflePixelImage()
//                .updateImage()
//                .imshow("shuffled")
//                .updateImage()
//                .deShufllePixelImage()
//                .imshow("recovered image")
//                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSinc.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.factory.FactoryUtils;

public class TestSinc {

    public static void main(String[] args) {
        for (int i = 0; i < 1; i++) {
            long t1 = FactoryUtils.tic();
            CMatrix x = CMatrix.getInstance().range(-10, 10, 0.01f).shape();
            CMatrix cm = x.clone().sinc().jitter(0.01f).plot(x.toFloatArray1D()).println();
            CMatrix cm2 = cm.cat(2, cm.clone().addScalar(1.5f)).transpose().plot(x.getArray1Dfloat());
            long t2 = FactoryUtils.toc(t1);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSobelEdgeDetector.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.image_processing.SobelEdgeDetector;
import jazari.matrix.CMatrix;

/**
 *
 * @author DELL LAB
 */
public class TestSobelEdgeDetector {
    public static void main(String[] args) {
        CMatrix cm1 = CMatrix.getInstance().imread("images\\yaprak.jpg").rgb2gray().tic().edgeDetectionSobel(10).toc().imshow();
        CMatrix cm2 = CMatrix.getInstance().imread("images\\yaprak.jpg").rgb2gray().imshow().tic().edgeDetectionCanny().toc().imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSolvingLinearEquationMatrixForm.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestSolvingLinearEquationMatrixForm {

    /**
     * x	+	y	+	z	=	6
     * 2y	+	5z	=	−4 2x	+	5y	−	z	=	27
     *
     * @param args
     */
    public static void main(String[] args) {
        float[][] A = {
            {1, 1, 1},
            {0, 2, 5},
            {2, 5, -1}
        };

//        //singular matrix
//        float[][] A = {
//            {-1, 2, -3},
//            {4, -5, 6},
//            {-7, 8, -9}
//        };
        float[][] B = {
            {6},
            {-4},
            {27}
        };

        CMatrix cmA = CMatrix.getInstance(A).println();
        CMatrix cmB = CMatrix.getInstance(B).println();
        /**
         * AX = B X = A(-1)B
         */
        CMatrix cmX = cmA.clone().inv().println().dot(cmB).println();

        /**
         * first take transposes of all given matrixes XA = B XAA(-1)=BA(-1)
         */
        CMatrix cmX2 = cmB.clone().T().println().dot(cmA.clone().tr().inv()).println();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSplineDraw.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Path2D;
import java.util.ArrayList;

public class TestSplineDraw extends JFrame {

    private EditableSplinePanel splinePanel;

    public TestSplineDraw() {
        setTitle("Düzenlenebilir Spline Çizimi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);

        splinePanel = new EditableSplinePanel();
        add(splinePanel);

        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TestSplineDraw());
    }

    private class EditableSplinePanel extends JPanel {

        private ArrayList<ArrayList<Point>> splines;
        private ArrayList<Point> currentSpline;
        private Point selectedPoint;

        public EditableSplinePanel() {
            splines = new ArrayList<>();
            currentSpline = new ArrayList<>();
            selectedPoint = null;

            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        if (!currentSpline.isEmpty()) {
                            splines.add(new ArrayList<>(currentSpline));
                            currentSpline.clear();
                        }
                    } else {
                        currentSpline.add(e.getPoint());
                    }
                    repaint();
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    selectedPoint = findSelectedPoint(e.getPoint());
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    selectedPoint = null;
                }
            });

            addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    if (selectedPoint != null) {
                        selectedPoint.setLocation(e.getPoint());
                        repaint();
                    }
                }
            });
        }

        private Point findSelectedPoint(Point mousePoint) {
            for (ArrayList<Point> spline : splines) {
                for (Point point : spline) {
                    if (point.distance(mousePoint) <= 5) { // Assuming a point is selected if it's within 5 pixels
                        return point;
                    }
                }
            }
            return null;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            Graphics2D g2d = (Graphics2D) g;
            g2d.setColor(Color.BLACK);

            // Set the stroke to a thicker line (20 pixels)
            g2d.setStroke(new BasicStroke(20, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));

            for (ArrayList<Point> spline : splines) {
                g2d.setColor(Color.BLUE);
                if (spline.size() > 1) {
                    drawSpline(g2d, spline);
                }

                // Draw clicked points
                g2d.setColor(Color.RED);
                for (Point point : spline) {
                    g2d.fillOval(point.x - 5, point.y - 5, 10, 10);
                }
            }

            // Draw current spline
            g2d.setColor(Color.BLUE);
            if (currentSpline.size() > 1) {
                drawSpline(g2d, currentSpline);
            }

            // Draw clicked points for current spline
            g2d.setColor(Color.RED);
            for (Point point : currentSpline) {
                g2d.fillOval(point.x - 5, point.y - 5, 10, 10);
            }
        }

        private void drawSpline(Graphics2D g2d, ArrayList<Point> spline) {
            Path2D path = new Path2D.Double();
            path.moveTo(spline.get(0).getX(), spline.get(0).getY());

            for (int i = 0; i < spline.size() - 1; i++) {
                double xAvg = (spline.get(i).getX() + spline.get(i + 1).getX()) / 2;
                double yAvg = (spline.get(i).getY() + spline.get(i + 1).getY()) / 2;
                path.quadTo(spline.get(i).getX(), spline.get(i).getY(), xAvg, yAvg);
            }

            Point lastPoint = spline.get(spline.size() - 1);
            path.lineTo(lastPoint.getX(), lastPoint.getY());

            g2d.draw(path);
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSplitImageBndBox.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.awt.image.BufferedImage;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestSplitImageBndBox {

    public static void main(String[] args) {
        //String path = "D:\\Dropbox\\LibGDXProjects\\JumpyHero\\assets\\images\\entities\\JumpPlant2.png";
        String path = "D:\\Dropbox\\LibGDXProjects\\JumpyHero\\assets\\images\\entities\\SlimeOrange-outline.png";
        BufferedImage img = ImageProcess.imread(path);
        BufferedImage[][] imgs = ImageProcess.tileImage(img, 5, 6);
        
//        System.out.println(imgs.length);
//        CMatrix cm;
        int k=0;
        for (int i = 0; i < imgs.length; i++) {
            for (int j = 0; j < imgs[0].length; j++) {
                CMatrix.getInstance(imgs[i][j]).imshow();
                ImageProcess.saveImage(imgs[i][j], "D:\\Dropbox\\LibGDXProjects\\JumpyHero\\assets\\images\\entities\\plant_"+k+".png");
                k++;
            }
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSplitPath.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;
import java.util.Arrays;

/**
 *
 * @author cezerilab
 */
public class TestSplitPath {
    public static void main(String[] args) {
        String path="./\\images\\test\\dfemale\\h_693.jpg";
        String[] str=FactoryUtils.splitPath(path);
        System.out.println("str = " + Arrays.toString(str));
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSplitRange.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestSplitRange {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .range2D(0, 10, 2, 20)
                .println()
                
                ;
        CMatrix[] cms = cm.clone().split(5);
        for (CMatrix cm1 : cms) {
            cm1.println();
        }
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestStreamAPI.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @author cezerilab
 */
public class TestStreamAPI {
    public static void main(String[] args) {
        List lst=toUpperCase("ahmet","MUSa","Salih","Beyazid","Mustafa","hasan","AbdulKadir");
        System.out.println("lst = " + lst);
        long cnt=getCountLongerThanFive(lst);
        System.out.println("cnt = " + cnt);
    }
    
    public static List toUpperCase(String ... str){
        return Arrays.stream(str).map(e -> e.toUpperCase()).collect(Collectors.toList());
    }

    private static long getCountLongerThanFive(List<String> lst) {
        return lst.stream().filter(e -> e.length()>5).mapToInt(e -> e.length()).count();
    }
    
    private static List<String> toFlatMap(List<List<String>> lst){
        return lst.stream().flatMap(Collection::stream).collect(Collectors.toList());
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestStroke.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

/**
 *
 * @author BAP1
 */
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;

import javax.swing.JComponent;
import javax.swing.JFrame;

public class TestStroke{
  public static void main(String[] args) {
    JFrame jf = new JFrame("Demo");
    Container cp = jf.getContentPane();
    MyCanvas tl = new MyCanvas();
    cp.add(tl);
    jf.setSize(300, 200);
    jf.setVisible(true);
  }
}

class MyCanvas extends JComponent {
  Shape shape;

  public MyCanvas() {
    shape = create();
  }

  protected Shape create() {
    float cm = 72 / 2.54f;
    return new Rectangle2D.Float(cm, cm, 2 * cm, cm);
  }


  public void paint(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;

    Stroke s = new BasicStroke(4.0f,                      // Width
                           BasicStroke.CAP_SQUARE,    // End cap
                           BasicStroke.JOIN_MITER,    // Join style
                           10.0f,                     // Miter limit
                           new float[] {16.0f,20.0f}, // Dash pattern
                           0.0f);                     // Dash phase
    Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,new float[] { 3, 1 }, 0);
    Stroke stroke2 = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
    g2.setStroke(s);

    
    g2.setPaint(Color.black);
    g2.draw(shape);
    
  }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestStrToSetChars.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.Set;
import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestStrToSetChars {
    public static void main(String[] args) {
        String s="e-mail:hakmesyo@gmail.com";
        Set<Character> set=FactoryUtils.str2set(s);
        System.out.println("set = " + set);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSunCalculator.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class TestSunCalculator {

    private static final double RAD = Math.PI / 180;

    // Yılın gününü hesapla (1-365)
    private int getDayOfYear(LocalDate date) {
        LocalDate startOfYear = LocalDate.of(date.getYear(), 1, 1);
        return (int) ChronoUnit.DAYS.between(startOfYear, date) + 1;
    }

    // Güneşin konumunu hesapla
    private double getSunPosition(int dayOfYear) {
        // Güneşin eğimi (declination)
        return -23.45 * Math.cos(360.0 / 365.0 * (dayOfYear + 10) * RAD);
    }

    // Saat açısını hesapla
    private double getHourAngle(double latitude, double declination) {
        double latRad = latitude * RAD;
        double decRad = declination * RAD;

        // Güneş yüksekliği -0.833 derece olduğunda doğuş/batış gerçekleşir
        return Math.toDegrees(Math.acos(
                (-Math.sin(-0.833 * RAD) - Math.sin(latRad) * Math.sin(decRad))
                / (Math.cos(latRad) * Math.cos(decRad))
        ));
    }

    // Güneş doğuş ve batış zamanlarını hesapla
    public SunTimes calculateSunTimes(LocalDate date, double latitude, double longitude) {
        int dayOfYear = getDayOfYear(date);
        double declination = getSunPosition(dayOfYear);
        double hourAngle = getHourAngle(latitude, declination);

        // Zaman düzeltmesi (equation of time)
        double B = 360.0 * (dayOfYear - 81) / 365.0;
        double EoT = 9.87 * Math.sin(2 * B * RAD) - 7.53 * Math.cos(B * RAD) - 1.5 * Math.sin(B * RAD);

        // UTC+3 için düzeltme (Türkiye saat dilimi)
        int zoneDiff = 3;
        double timeCorrection = EoT + (4 * longitude) - (60 * zoneDiff);

        // Güneş doğuş ve batış zamanları (dakika cinsinden)
        double sunriseMinutes = 720 - 4 * hourAngle - timeCorrection;
        double sunsetMinutes = 720 + 4 * hourAngle - timeCorrection;

        return new SunTimes(
                formatTime(sunriseMinutes),
                formatTime(sunsetMinutes)
        );
    }

    // Dakikaları saat:dakika formatına çevir
    private String formatTime(double minutes) {
        int hours = (int) (minutes / 60);
        int mins = (int) Math.round(minutes % 60);
        return String.format("%02d:%02d", hours, mins);
    }

    // Sonuçları tutmak için iç sınıf
    public static class SunTimes {

        public final String sunrise;
        public final String sunset;

        public SunTimes(String sunrise, String sunset) {
            this.sunrise = sunrise;
            this.sunset = sunset;
        }

        @Override
        public String toString() {
            return "Güneş doğuş: " + sunrise + ", Güneş batış: " + sunset;
        }
    }

    public static void main(String[] args) {
        TestSunCalculator calculator = new TestSunCalculator();

        // Bazı örnek şehirler ve koordinatları
        System.out.println("Örnek şehir koordinatları:");
        System.out.println("İstanbul: 41.0082, 28.9784");
        System.out.println("Siirt: 37.9333, 41.9500");
        System.out.println("Ankara: 39.9334, 32.8597");
        System.out.println("İzmir: 38.4237, 27.1428");
        System.out.println();

        // Koordinatları burada değiştirebilirsiniz
//        double latitude = 41.0082;  // İstanbul için örnek enlem
//        double longitude = 28.9784; // İstanbul için örnek boylam
        double latitude = 37.9333;  // siirt için örnek enlem
        double longitude = 41.9500; // siirt için örnek boylam
        //LocalDate date = LocalDate.of(2025, 1, 20); // Tarihi buradan değiştirebilirsiniz
        LocalDate date = LocalDate.of(2025, 6, 20); // Tarihi buradan değiştirebilirsiniz

        SunTimes times = calculator.calculateSunTimes(date, latitude, longitude);

        System.out.println("Seçilen koordinatlar için " + date + " tarihinde:");
        System.out.println("Enlem: " + latitude + "°, Boylam: " + longitude + "°");
        System.out.println(times);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSuperResolution.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestSuperResolution {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/fox.png")
                .imshow()
                .imresize(4)
                .imshow()
                .imread("images/fox_1.png")
                .imshow()
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSuperResolutionV2.java
============================================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package test;

import java.util.ArrayList;
import java.util.List;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestSuperResolutionV2 {

    public static void main(String[] args) {
// Load a low-resolution image
        CMatrix lowRes = CMatrix.getInstance()
                .imread("images/fox.png")
                //.rgb2gray()
                .imshow("Low Resolution Image");

// Scale factor for super-resolution
        int scaleFactor = 4;

// Create initial high-resolution image using bicubic interpolation
        CMatrix initialHighRes = lowRes.clone()
                .imresize(lowRes.getColumnNumber() * scaleFactor,
                        lowRes.getRowNumber() * scaleFactor)
                .imshow("Initial Bicubic Upscaled");

// Parameters for patch-based super-resolution
        int lowPatchSize = 5;
        int highPatchSize = lowPatchSize * scaleFactor;
        int overlap = 2;
        int lowStep = lowPatchSize - overlap;
        int highStep = lowStep * scaleFactor;

// Create a training set from the image itself (self-similarity)
// In a real implementation, you might use an external database of patches
        List<CMatrix> lowPatches = new ArrayList<>();
        List<CMatrix> highPatches = new ArrayList<>();

// Extract training patches from different scales of the original image
        CMatrix trainLow = lowRes.clone()
                .imresize((int) (lowRes.getColumnNumber() * 0.5f), (int) (lowRes.getRowNumber() * 0.5f));

        CMatrix trainHigh = lowRes.clone(); // Original becomes the high-res for training

// Extract patch pairs
        for (int y = 0; y < trainLow.getRowNumber() - lowPatchSize; y += lowStep) {
            for (int x = 0; x < trainLow.getColumnNumber() - lowPatchSize; x += lowStep) {
                // Extract low-res patch
                CMatrix lowPatch = trainLow.clone().cmd(
                        y + ":" + (y + lowPatchSize),
                        x + ":" + (x + lowPatchSize)
                );

                // Extract corresponding high-res patch (at 2x scale)
                int hy = y * 2;
                int hx = x * 2;
                if (hy + highPatchSize <= trainHigh.getRowNumber()
                        && hx + highPatchSize <= trainHigh.getColumnNumber()) {

                    CMatrix highPatch = trainHigh.clone().cmd(
                            hy + ":" + (hy + highPatchSize),
                            hx + ":" + (hx + highPatchSize)
                    );

                    lowPatches.add(lowPatch);
                    highPatches.add(highPatch);
                }
            }
        }

        System.out.println("Collected " + lowPatches.size() + " training patch pairs");

// Create the final high-resolution image
        CMatrix superResImage = initialHighRes.clone();

// Process each patch in the low-resolution input
        for (int y = 0; y < lowRes.getRowNumber() - lowPatchSize; y += lowStep) {
            for (int x = 0; x < lowRes.getColumnNumber() - lowPatchSize; x += lowStep) {
                // Extract query patch from low-res image
                CMatrix queryPatch = lowRes.clone().cmd(
                        y + ":" + (y + lowPatchSize),
                        x + ":" + (x + lowPatchSize)
                );

                // Find the most similar patch in the training set
                int bestMatch = -1;
                float minDistance = Float.MAX_VALUE;

                for (int i = 0; i < lowPatches.size(); i++) {
                    CMatrix diff = queryPatch.clone().minus(lowPatches.get(i));
                    float distance = diff.clone().pow(2).sumTotal();

                    if (distance < minDistance) {
                        minDistance = distance;
                        bestMatch = i;
                    }
                }

                // If we found a match, replace the patch in the high-res image
                if (bestMatch != -1) {
                    // Coordinates in high-res image
                    int hy = y * scaleFactor;
                    int hx = x * scaleFactor;

                    // High-res patch dimensions
                    int patchHeight = Math.min(highPatchSize, superResImage.getRowNumber() - hy);
                    int patchWidth = Math.min(highPatchSize, superResImage.getColumnNumber() - hx);

                    // Extract corresponding high-res patch from the match
                    CMatrix highPatch = highPatches.get(bestMatch).clone().cmd(
                            "0:" + patchHeight,
                            "0:" + patchWidth
                    );

                    // Replace the patch in the super-res image
                    for (int py = 0; py < patchHeight; py++) {
                        for (int px = 0; px < patchWidth; px++) {
                            superResImage.setValue(hy + py, hx + px, highPatch.getValue(py, px));
                        }
                    }
                }
            }
        }

// Display the final super-resolution result
        superResImage.imshow("Patch-based Super Resolution");

// If a ground truth high-resolution image is available, evaluate quality
        CMatrix groundTruth = CMatrix.getInstance()
                .imread("images/fox_1.png")
                //.rgb2gray()
                .imshow("Ground Truth (if available)");

// Calculate PSNR improvement if ground truth is available
        if (groundTruth != null) {
            CMatrix bicubicError = groundTruth.clone().minus(initialHighRes).pow(2);
            float bicubicMSE = bicubicError.meanTotal();
            float bicubicPSNR = (float) (10 * Math.log10(255 * 255 / bicubicMSE));

            CMatrix superResError = groundTruth.clone().minus(superResImage).pow(2);
            float superResMSE = superResError.meanTotal();
            float superResPSNR = (float) (10 * Math.log10(255 * 255 / superResMSE));

            System.out.println("Bicubic upscaling PSNR: " + bicubicPSNR + " dB");
            System.out.println("Super-resolution PSNR: " + superResPSNR + " dB");
            System.out.println("Improvement: " + (superResPSNR - bicubicPSNR) + " dB");
        }

    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestSVG.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.image_processing.RasterToVector;
import jazari.matrix.CMatrix;
import java.awt.image.BufferedImage;

/**
 *
 * @author BAP1
 */
public class TestSVG {
    public static void main(String[] args) {
//        RasterToVector rtv=new RasterToVector("images\\kaplan1.jpg");
//        rtv.convertToSVG("images\\kaplan1.svg");
        RasterToVector rtv=new RasterToVector("images\\blob.jpg");
        rtv.convertToSVG("images\\blob.svg");
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestTiffImages.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestTiffImages {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images/snow.tiff")
                .imshow()
                
                ;
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestTileImage.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author dell_lab
 */
public class TestTileImage {
    public static void main(String[] args) {
        //tif imgeleri 15_000 x 10_000 piksel çözünürlüğündedir. Bunları 1000 x 500 lük imgelere bölütleyeceğiz
        String path="D:\\zeytin_remote_sensing\\tif\\TM39_6125_4134.tif";
        CMatrix cm = CMatrix.getInstance()
                //.imread("images/peppers.png")
                .imread(path)
                //.imshow("zeytin")
                .cropImageArray2D(20,15,"D:\\zeytin_remote_sensing\\tif\\cropped_images","temp","png",false);
                ;

//        CMatrix cm = CMatrix.getInstance()
//                .imread("D:\\zeytin_remote_sensing\\tif\\cropped_images\\temp_0_0.png")
//                .imshow()
//                ;
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestTimeSeries.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import jazari.types.TFigureAttribute;

/**
 *
 * @author cezerilab
 */
public class TestTimeSeries {
    public static void main(String[] args) {
        int length=100;
        TFigureAttribute attrib = new TFigureAttribute();
        attrib.pointType = "-o";
        CMatrix cm = CMatrix.getInstance()
               .random_seed(12)
                .randTimeSeries(length, 1, -1, 1)
                .cat(1, CMatrix.getInstance()
                        .random_seed(13)
                        .randTimeSeries(length, 1, -1, 1))
                .map(0, length)
                .plot(attrib)                
                ;
//        double[] d1=CMatrix.getInstance()
//                .random_seed(12)
//                .randTimeSeries(length, 1, -1, 1)
//                .map(0, length).toDoubleArray1D();
//        double[] d2=CMatrix.getInstance()
//                .random_seed(13)
//                .randTimeSeries(length, 1, -1, 1)
//                .map(0, length).toDoubleArray1D();
//        double sum_abs_dif=sumAbsDif(d1,d2);
//        System.out.println("sum_abs_dif = " + sum_abs_dif);
                
        
//        CMatrix cm1 = CMatrix.getInstance(cm.transpose().toDoubleArray2D()[0]).plot();
//        CMatrix cm2 = CMatrix.getInstance(cm.transpose().toDoubleArray2D()[1]).plot();
//        System.out.println(cm1.absDifference(cm2).println().sumTotal());
//        
//        cm1.addScalar(-0.5).plot();
        
    }

    private static double sumAbsDif(double[] d1, double[] d2) {
        double ret=0;
        int n=d1.length;
        for (int i = 0; i < n; i++) {
            ret+=Math.abs(d1[i]-d2[i]);
        }
        return ret;
    }
    
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestTrainValidTestFolderGenerator.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author DELL LAB
 */
public class TestTrainValidTestFolderGenerator {

    public static void main(String[] args) {
        trainValidTest();
    }

    private static void trainValidTest() {
//        String base_path = "C:\\python_data\\dataset\\gatenet\\datasets\\pollens\\ds\\";
        String base_path ="C:\\Users\\cezerilab\\Desktop\\pollens_224\\ds";
        
        FactoryUtils.splitTrainValidTestFolder(base_path,0.7f,0.1f,0.2f);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestTwoSumInArray.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestTwoSumInArray {
    public static void main(String[] args) {
        int[] d=CMatrix.getInstance().rand(20, 1, 0, 20).round().toIntArray1D();
        System.out.println("d = " + Arrays.toString(d));
        twoSum(d,17);
        //System.out.println("ret = " + Arrays.toString(ret));
    }

    private static void twoSum(int[] d, int t) {
        Map<String,Integer> lst=new HashMap();
        for (int i = 0; i < d.length; i++) {
            for (int j = i; j < d.length; j++) {
                int s=d[i]+d[j];
                if (s==t) {
                    lst.put(""+d[i]+"+"+d[j],t);
                }
            }
        }
        System.out.println("lst = " + lst);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestUUID.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class TestUUID {
    //5ce7c5da-5b0b-4f56-8326-2109b837c9d5
    public static void main(String[] args) {
        System.out.println(FactoryUtils.getUUID());
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestVector.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestVector {
    public static void main(String[] args) {
//        String path="images\\kaplan1.jpg";
//        CMatrix y1 = CMatrix.getInstance().vector(0, 127).minusScalar(127).pow(8);
//        CMatrix y2 = CMatrix.getInstance().vector(128, 255).minusScalar(128).pow(8);
//        CMatrix y=y1.cat(2,y2).normalizeMinMax().plot();
//        y=y.sign(127).plot();
                
//        CMatrix y = CMatrix.getInstance().vector(0, 255).minusScalar(128).pow(8).plot().normalizeMinMax().plot();
//        CMatrix pdf = CMatrix.getInstance().imread(path).rgb2gray().imshow().getImageHistogramData().normalizeMinMax().plot();
        
//        CMatrix pdf = CMatrix.getInstance().imread(path).rgb2gray().imshow().getPDFData().plot();
//        CMatrix target = y.multiplyElement(pdf).multiplyElement(y.signum(127)).plot();
//        System.out.println("sum:"+target.sumTotal());
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestVectorization.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.Arrays;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestVectorization {
    public static void main(String[] args) {
        testArray1DBuild();
    }

    private static void testArray1DBuild() {
        int[] d1=CMatrix.intArray1D(100);
        System.out.println("d1 = " + Arrays.toString(d1));
        
        int[] d2=CMatrix.intArray1D(100, 45);
        System.out.println("d2 = " + Arrays.toString(d2));
        
        int[] d3=CMatrix.intArray1D(-10, 10, 3);
        System.out.println("d3 = " + Arrays.toString(d3));
        
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestVegetationAgiri.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestVegetationAgiri {
    public static void main(String[] args) {
        String formatted = String.format("%03d", 1);
        System.out.println("formatted = " + formatted);
        String labelPath="C:\\Users\\cezerilab\\Downloads\\Ağrı Dağı Görüntü-20220209T160314Z-001\\ground_truth.txt";
        String imgPath="C:\\Users\\cezerilab\\Downloads\\Ağrı Dağı Görüntü-20220209T160314Z-001\\Ağrı Dağı Görüntü\\";
        CMatrix cmLabel = CMatrix.getInstance().readFile(labelPath, ";").println();
        CMatrix cm1 = CMatrix.getInstance().imread(imgPath+String.format("%03d", 110)+".png").imresize(0.5f).imshow();
        CMatrix cm2 = CMatrix.getInstance().imread(imgPath+String.format("%03d", 24)+".png").imresize(0.5f).imshow();
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestVisDroneAnnotationsToPascalVoc.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Rectangle;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import jazari.utils.pascalvoc.PascalVocBoundingBox;
import jazari.utils.pascalvoc.PascalVocObject;
import jazari.utils.pascalvoc.PascalVocSource;

/**
 *
 * @author cezerilab
 */
public class TestVisDroneAnnotationsToPascalVoc {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("C:\\Users\\cezerilab\\Desktop\\visdrone_selected_train\\images\\0000002_00005_d_0000014.jpg")
//                .imread("images/pullar.png")
                //.imread("D:\\zeytin_remote_sensing\\tif\\cropped_images\\temp_0_0.png")
                .imshow()
                ;
        
//        copyAnnotations();

//        convertVisDroneToPascalVOC();

    }

    private static void copyAnnotations() {
        File[] files = FactoryUtils.getFileArrayInFolderForImages("C:\\Users\\dell_lab\\Desktop\\Yeni klasör (2)\\images");
        String path_from = "D:\\DATASETS\\VisDrone\\image\\VisDrone2019-DET-train\\VisDrone2019-DET-train\\annotations";
        String path_to = "C:\\Users\\dell_lab\\Desktop\\Yeni klasör (2)\\annotations";
        for (File file : files) {
            String f = FactoryUtils.getFileName(file.getName()) + ".txt";
            FactoryUtils.copyFile(new File(path_from + "\\" + f), new File(path_to + "\\" + f));
            System.out.println("file = " + f + " copied");
        }
    }

    private static void convertVisDroneToPascalVOC() {
        String path = "C:\\Users\\cezerilab\\Desktop\\visdrone_selected_train\\annotations";
        File[] files = FactoryUtils.getFileListInFolder(path);
        for (File file : files) {
            String[] str = FactoryUtils.readFile(file.getAbsolutePath()).split("\n");
            List<PascalVocObject> lstObjects = new ArrayList<>();
            for (int i = 0; i < str.length; i++) {
                System.out.println("str[i] = " + str[i]);
                String[] s = str[i].split(",");
                //http://aiskyeye.com/evaluate/results-format/ linkindeki bilgilere göre
                int px = Integer.parseInt(s[0]);
                int py = Integer.parseInt(s[1]);
                int w = Integer.parseInt(s[2]);
                int h = Integer.parseInt(s[3]);
                int object_id = Integer.parseInt(s[5]);
                String object_name = "";
                switch (object_id) {
                    case 0:
                        object_name = "ignored";
                        break;
                    case 1:
                        object_name = "pedestrian";
                        break;
                    case 2:
                        object_name = "people";
                        break;
                    case 3:
                        object_name = "bicycle";
                        break;
                    case 4:
                        object_name = "car";
                        break;
                    case 5:
                        object_name = "van";
                        break;
                    case 6:
                        object_name = "truck";
                        break;
                    case 7:
                        object_name = "tricycle";
                        break;
                    case 8:
                        object_name = "awning-tricycle";
                        break;
                    case 9:
                        object_name = "bus";
                        break;
                    case 10:
                        object_name = "motor";
                        break;
                    case 11:
                        object_name = "others";
                        break;
                    default:
                        throw new AssertionError();
                }
                PascalVocObject voc = new PascalVocObject(object_name,"",0,0,0,
                        new PascalVocBoundingBox(object_name,
                                new Rectangle(px, py, w, h),
                                0,
                                0,null),null,null);
                lstObjects.add(voc);
            }
            String folderName = "images";
            String imageFileName = file.getName();
            String fullPath = "C:\\Users\\cezerilab\\Desktop\\visdrone_selected_train\\images\\" + FactoryUtils.getFileName(file.getName()) + ".jpg";
            FactoryUtils.serializePascalVocXML(folderName, imageFileName, fullPath, new PascalVocSource(), lstObjects);
        }

    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestVoteMap.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.machine_learning.selection.FeatureSelectionVoteMap;
import jazari.gui.FrameVoteMap;
import jazari.factory.FactoryNormalization;
import jazari.factory.FactoryUtils;
import jazari.types.TVoteMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author BAP1
 */
public class TestVoteMap {

    private String s1 = "Day,P1,P2,T1,T2,Nem,SCA\n"
            + "P2:0.033\n"
            + "P1:0.068\n"
            + "Nem:0.1\n"
            + "P1,P2:0.126\n"
            + "P1,P2,Nem:0.146\n"
            + "P1,Nem:0.161\n"
            + "P2,Nem:0.162\n"
            + "P1,P2,T1:0.448\n"
            + "T1:0.46\n"
            + "P1,T1:0.461\n"
            + "P2,T1:0.461\n"
            + "P1,P2,T1,Nem:0.462\n"
            + "P1,T1,Nem:0.473\n"
            + "T1,Nem:0.478\n"
            + "P2,T1,Nem:0.485\n"
            + "P1,P2,T2:0.493\n"
            + "P1,P2,T1,T2,Nem:0.494\n"
            + "P1,T2,Nem:0.502\n"
            + "P1,T1,T2,Nem:0.502\n"
            + "P1,P2,T2,Nem:0.502\n"
            + "P1,T1,T2:0.502\n"
            + "P1,P2,T1,T2:0.503\n"
            + "P2,T1,T2:0.503\n"
            + "T1,T2:0.504\n"
            + "T2:0.505\n"
            + "P1,T2:0.507\n"
            + "P2,T2:0.507\n"
            + "P2,T1,T2,Nem:0.508\n"
            + "T2,Nem:0.509\n"
            + "T1,T2,Nem:0.51\n"
            + "P2,T2,Nem:0.511\n"
            + "P2,SCA:0.727\n"
            + "P1,P2,SCA:0.73\n"
            + "P1,SCA:0.73\n"
            + "P1,P2,Nem,SCA:0.734\n"
            + "SCA:0.752\n"
            + "Nem,SCA:0.752\n"
            + "P1,P2,T1,Nem,SCA:0.752\n"
            + "T1,SCA:0.753\n"
            + "T2,SCA:0.753\n"
            + "P1,P2,T1,SCA:0.754\n"
            + "P1,T1,Nem,SCA:0.755\n"
            + "P1,P2,T1,T2,Nem,SCA:0.755\n"
            + "P1,P2,T2,Nem,SCA:0.756\n"
            + "P1,Nem,SCA:0.757\n"
            + "P1,T1,SCA:0.757\n"
            + "P1,P2,T2,SCA:0.758\n"
            + "P1,T2,SCA:0.759\n"
            + "P1,T1,T2,Nem,SCA:0.76\n"
            + "P2,Nem,SCA:0.76\n"
            + "P1,T2,Nem,SCA:0.762\n"
            + "P2,T1,SCA:0.762\n"
            + "P2,T1,Nem,SCA:0.762\n"
            + "P1,T1,T2,SCA:0.763\n"
            + "P1,P2,T1,T2,SCA:0.764\n"
            + "P2,T1,T2,Nem,SCA:0.764\n"
            + "P2,T2,SCA:0.764\n"
            + "P2,T2,Nem,SCA:0.766\n"
            + "T1,Nem,SCA:0.767\n"
            + "P2,T1,T2,SCA:0.769\n"
            + "T2,Nem,SCA:0.77\n"
            + "T1,T2,SCA:0.772\n"
            + "Day,P1,Nem:0.784\n"
            + "Day,P1,P2,Nem:0.786\n"
            + "Day,Nem:0.787\n"
            + "Day,P1,P2:0.787\n"
            + "Day,T2:0.787\n"
            + "Day,T1:0.788\n"
            + "Day,P2,Nem:0.788\n"
            + "Day,P1:0.788\n"
            + "Day:0.788\n"
            + "Day,P2:0.788\n"
            + "Day,SCA:0.792\n"
            + "Day,P1,P2,T1,Nem:0.793\n"
            + "T1,T2,Nem,SCA:0.794\n"
            + "Day,P1,P2,T1:0.795\n"
            + "Day,P1,T1:0.795\n"
            + "Day,P2,T1:0.796\n"
            + "Day,P1,T1,Nem:0.798\n"
            + "Day,P1,T2,Nem:0.799\n"
            + "Day,P2,T1,Nem:0.799\n"
            + "Day,P2,T2,Nem:0.8\n"
            + "Day,P1,P2,T2:0.8\n"
            + "Day,P1,T2:0.801\n"
            + "Day,P1,P2,T2,Nem:0.801\n"
            + "Day,P2,T2:0.801\n"
            + "Day,T1,Nem:0.801\n"
            + "Day,P2,T1,T2:0.802\n"
            + "Day,T2,Nem:0.802\n"
            + "Day,T1,T2:0.805\n"
            + "Day,P1,P2,T1,T2:0.807\n"
            + "Day,P1,T1,T2,Nem:0.809\n"
            + "Day,P1,P2,T1,T2,Nem:0.81\n"
            + "Day,P2,T1,T2,Nem:0.812\n"
            + "Day,P1,T1,T2:0.814\n"
            + "Day,T1,T2,Nem:0.847\n"
            + "Day,T2,SCA:0.851\n"
            + "Day,T1,SCA:0.865\n"
            + "Day,P1,P2,Nem,SCA:0.872\n"
            + "Day,P1,Nem,SCA:0.872\n"
            + "Day,P2,Nem,SCA:0.872\n"
            + "Day,P2,T1,SCA:0.873\n"
            + "Day,T2,Nem,SCA:0.873\n"
            + "Day,P1,P2,SCA:0.873\n"
            + "Day,P1,T1,SCA:0.873\n"
            + "Day,Nem,SCA:0.874\n"
            + "Day,P1,P2,T2,SCA:0.874\n"
            + "Day,T1,Nem,SCA:0.874\n"
            + "Day,P2,T2,SCA:0.874\n"
            + "Day,P1,T2,SCA:0.874\n"
            + "Day,P1,SCA:0.875\n"
            + "Day,P2,SCA:0.875\n"
            + "Day,T1,T2,SCA:0.875\n"
            + "Day,P1,P2,T1,T2,Nem,SCA:0.876\n"
            + "Day,P1,P2,T1,SCA:0.877\n"
            + "Day,P1,P2,T2,Nem,SCA:0.877\n"
            + "Day,P1,P2,T1,Nem,SCA:0.878\n"
            + "Day,P2,T1,Nem,SCA:0.878\n"
            + "Day,P1,T1,T2,SCA:0.878\n"
            + "Day,P1,T1,T2,Nem,SCA:0.878\n"
            + "Day,P1,P2,T1,T2,SCA:0.878\n"
            + "Day,P1,T2,Nem,SCA:0.879\n"
            + "Day,P1,T1,Nem,SCA:0.88\n"
            + "Day,P2,T1,T2,SCA:0.881\n"
            + "Day,P2,T1,T2,Nem,SCA:0.882\n"
            + "Day,P2,T2,Nem,SCA:0.883\n"
            + "Day,T1,T2,Nem,SCA:0.883\n"
            + "P1:0.107\n"
            + "P2:0.129\n"
            + "Nem:0.129\n"
            + "P1,P2:0.179\n"
            + "P1,Nem:0.192\n"
            + "P2,Nem:0.211\n"
            + "P1,P2,Nem:0.225\n"
            + "T1:0.493\n"
            + "P1,T1:0.494\n"
            + "P1,P2,T1:0.498\n"
            + "P2,T1:0.498\n"
            + "T1,Nem:0.516\n"
            + "P1,T1,Nem:0.517\n"
            + "P1,P2,T1,Nem:0.523\n"
            + "P2,T1,Nem:0.527\n"
            + "P1,T1,T2:0.559\n"
            + "T2:0.561\n"
            + "P1,T2:0.561\n"
            + "P1,P2,T2:0.561\n"
            + "P1,P2,T1,T2:0.562\n"
            + "P2,T2:0.562\n"
            + "T1,T2:0.563\n"
            + "P2,T1,T2:0.565\n"
            + "P1,T1,T2,Nem:0.565\n"
            + "P1,T2,Nem:0.567\n"
            + "P1,P2,T1,T2,Nem:0.567\n"
            + "P1,P2,T2,Nem:0.569\n"
            + "T2,Nem:0.569\n"
            + "T1,T2,Nem:0.57\n"
            + "P2,T1,T2,Nem:0.571\n"
            + "P2,T2,Nem:0.573\n"
            + "T1,SCA:0.794\n"
            + "T2,SCA:0.795\n"
            + "Nem,SCA:0.796\n"
            + "SCA:0.796\n"
            + "P1,SCA:0.796\n"
            + "P2,SCA:0.798\n"
            + "P1,T1,SCA:0.811\n"
            + "P1,T2,SCA:0.812\n"
            + "P1,P2,T1,SCA:0.812\n"
            + "P1,P2,T2,SCA:0.813\n"
            + "P1,T1,T2,SCA:0.814\n"
            + "P1,T1,Nem,SCA:0.814\n"
            + "Day,P1,P2,Nem:0.815\n"
            + "P1,P2,SCA:0.815\n"
            + "P1,P2,T1,Nem,SCA:0.815\n"
            + "P1,P2,T1,T2,SCA:0.816\n"
            + "P1,Nem,SCA:0.817\n"
            + "P1,T2,Nem,SCA:0.817\n"
            + "P1,P2,T2,Nem,SCA:0.817\n"
            + "P1,P2,T1,T2,Nem,SCA:0.817\n"
            + "P1,P2,Nem,SCA:0.817\n"
            + "P1,T1,T2,Nem,SCA:0.818\n"
            + "P2,T1,Nem,SCA:0.818\n"
            + "P2,T1,SCA:0.818\n"
            + "T1,Nem,SCA:0.818\n"
            + "Day,P1,Nem:0.819\n"
            + "P2,T1,T2,SCA:0.819\n"
            + "Day,P1,P2:0.82\n"
            + "Day,P2,Nem:0.82\n"
            + "P2,T2,SCA:0.82\n"
            + "P2,Nem,SCA:0.82\n"
            + "T2,Nem,SCA:0.821\n"
            + "P2,T2,Nem,SCA:0.821\n"
            + "Day,P1:0.823\n"
            + "T1,T2,SCA:0.823\n"
            + "Day,P2:0.823\n"
            + "Day,T1:0.824\n"
            + "Day,T2:0.824\n"
            + "Day,Nem:0.824\n"
            + "Day,P1,P2,T1,T2:0.824\n"
            + "Day:0.824\n"
            + "P2,T1,T2,Nem,SCA:0.825\n"
            + "Day,P1,P2,T1,Nem:0.826\n"
            + "Day,P1,T1,T2,Nem:0.826\n"
            + "Day,P2,T2,Nem:0.828\n"
            + "T1,T2,Nem,SCA:0.828\n"
            + "Day,P2,T2:0.829\n"
            + "Day,P1,T2,Nem:0.83\n"
            + "Day,T1,T2:0.83\n"
            + "Day,SCA:0.83\n"
            + "Day,P1,T2:0.831\n"
            + "Day,P1,T1,Nem:0.831\n"
            + "Day,T2,Nem:0.833\n"
            + "Day,T1,Nem:0.834\n"
            + "Day,P1,P2,T2,Nem:0.837\n"
            + "Day,P1,P2,T2:0.838\n"
            + "Day,P1,P2,T1:0.839\n"
            + "Day,P2,T1,Nem:0.839\n"
            + "Day,P1,P2,T1,T2,Nem:0.843\n"
            + "Day,P1,T1,T2:0.847\n"
            + "Day,P2,T1,T2,Nem:0.849\n"
            + "Day,P2,T1,T2:0.849\n"
            + "Day,P1,T1:0.849\n"
            + "Day,P2,T1:0.852\n"
            + "Day,T1,T2,Nem:0.857\n"
            + "Day,P1,P2,T1,T2,Nem,SCA:0.859\n"
            + "Day,P1,T1,T2,Nem,SCA:0.861\n"
            + "Day,P1,P2,T2,Nem,SCA:0.862\n"
            + "Day,P1,T2,Nem,SCA:0.862\n"
            + "Day,P1,P2,T1,Nem,SCA:0.862\n"
            + "Day,P1,P2,T1,T2,SCA:0.863\n"
            + "Day,P1,T1,Nem,SCA:0.863\n"
            + "Day,P1,P2,Nem,SCA:0.863\n"
            + "Day,P1,P2,SCA:0.863\n"
            + "Day,P1,T1,T2,SCA:0.863\n"
            + "Day,P1,P2,T2,SCA:0.864\n"
            + "Day,P2,T1,T2,Nem,SCA:0.864\n"
            + "Day,P2,T1,T2,SCA:0.864\n"
            + "Day,P1,P2,T1,SCA:0.864\n"
            + "Day,P1,T2,SCA:0.864\n"
            + "Day,P1,SCA:0.864\n"
            + "Day,P2,SCA:0.865\n"
            + "Day,P1,T1,SCA:0.865\n"
            + "Day,T1,T2,Nem,SCA:0.865\n"
            + "Day,P2,T2,Nem,SCA:0.865\n"
            + "Day,P2,T2,SCA:0.865\n"
            + "Day,T1,T2,SCA:0.866\n"
            + "Day,P2,T1,Nem,SCA:0.866\n"
            + "Day,P2,T1,SCA:0.866\n"
            + "Day,T2,SCA:0.866\n"
            + "Day,T1,SCA:0.866\n"
            + "Day,T1,Nem,SCA:0.866\n"
            + "Day,T2,Nem,SCA:0.866\n"
            + "Day,P1,Nem,SCA:0.866\n"
            + "Day,P2,Nem,SCA:0.867\n"
            + "Day,Nem,SCA:0.868\n"
            + "P1:0.099\n"
            + "P2:0.138\n"
            + "Nem:0.138\n"
            + "P1,P2:0.159\n"
            + "P1,Nem:0.172\n"
            + "P2,Nem:0.191\n"
            + "P1,P2,Nem:0.209\n"
            + "P1,T1:0.432\n"
            + "P1,P2,T1:0.433\n"
            + "T1:0.434\n"
            + "P2,T1:0.436\n"
            + "T1,Nem:0.442\n"
            + "P1,T1,Nem:0.447\n"
            + "P1,P2,T1,Nem:0.448\n"
            + "P2,T1,Nem:0.453\n"
            + "T1,T2:0.464\n"
            + "P1,P2,T1,T2:0.465\n"
            + "P1,T1,T2:0.466\n"
            + "T2,Nem:0.467\n"
            + "P1,T2:0.468\n"
            + "T2:0.468\n"
            + "P2,T1,T2:0.468\n"
            + "P2,T2:0.469\n"
            + "P1,P2,T2:0.471\n"
            + "P1,P2,T1,T2,Nem:0.472\n"
            + "P1,T1,T2,Nem:0.472\n"
            + "P1,T2,Nem:0.476\n"
            + "P1,P2,T2,Nem:0.477\n"
            + "P2,T1,T2,Nem:0.478\n"
            + "P2,T2,Nem:0.481\n"
            + "T1,T2,Nem:0.488\n"
            + "T1,SCA:0.786\n"
            + "T2,SCA:0.786\n"
            + "P2,SCA:0.787\n"
            + "P1,SCA:0.787\n"
            + "Nem,SCA:0.788\n"
            + "SCA:0.789\n"
            + "Day,Nem:0.805\n"
            + "Day,P2:0.805\n"
            + "Day,P1:0.806\n"
            + "Day,T1:0.806\n"
            + "Day:0.806\n"
            + "Day,T2:0.808\n"
            + "Day,SCA:0.811\n"
            + "Day,P1,P2,Nem:0.811\n"
            + "P1,P2,T1,Nem,SCA:0.835\n"
            + "P1,P2,T2,SCA:0.836\n"
            + "P1,P2,T1,T2,SCA:0.837\n"
            + "P1,P2,T1,SCA:0.837\n"
            + "P1,P2,T1,T2,Nem,SCA:0.838\n"
            + "P1,P2,SCA:0.84\n"
            + "P1,P2,Nem,SCA:0.841\n"
            + "P1,T1,T2,SCA:0.841\n"
            + "T1,Nem,SCA:0.841\n"
            + "P1,P2,T2,Nem,SCA:0.841\n"
            + "P1,Nem,SCA:0.842\n"
            + "P2,Nem,SCA:0.842\n"
            + "P1,T1,Nem,SCA:0.844\n"
            + "P2,T1,T2,SCA:0.846\n"
            + "P2,T1,Nem,SCA:0.847\n"
            + "P1,T2,Nem,SCA:0.847\n"
            + "T2,Nem,SCA:0.848\n"
            + "P2,T2,SCA:0.849\n"
            + "P2,T1,SCA:0.849\n"
            + "P1,T1,SCA:0.851\n"
            + "P2,T1,T2,Nem,SCA:0.853\n"
            + "P1,T2,SCA:0.853\n"
            + "P2,T2,Nem,SCA:0.854\n"
            + "P1,T1,T2,Nem,SCA:0.854\n"
            + "Day,P1,P2:0.855\n"
            + "Day,P2,Nem:0.857\n"
            + "T1,T2,SCA:0.86\n"
            + "T1,T2,Nem,SCA:0.86\n"
            + "Day,P1,Nem:0.863\n"
            + "Day,P1,P2,T1,T2:0.877\n"
            + "Day,P1,P2,T1:0.878\n"
            + "Day,P1,T1:0.879\n"
            + "Day,P1,T1,T2,Nem:0.88\n"
            + "Day,P2,T1,T2:0.88\n"
            + "Day,P2,T1:0.881\n"
            + "Day,T1,T2:0.882\n"
            + "Day,P1,P2,T1,T2,Nem:0.882\n"
            + "Day,P1,P2,T1,Nem:0.882\n"
            + "Day,P1,P2,T2:0.882\n"
            + "Day,P1,T1,T2:0.883\n"
            + "Day,P1,T1,Nem:0.883\n"
            + "Day,P1,T2:0.883\n"
            + "Day,P1,P2,T2,Nem:0.884\n"
            + "Day,P1,T2,Nem:0.885\n"
            + "Day,T1,Nem:0.885\n"
            + "Day,P2,T1,Nem:0.885\n"
            + "Day,P2,T1,T2,Nem:0.885\n"
            + "Day,P2,T2:0.885\n"
            + "Day,P2,T2,Nem:0.887\n"
            + "Day,T2,Nem:0.887\n"
            + "Day,T1,T2,Nem:0.89\n"
            + "Day,P1,P2,T1,SCA:0.902\n"
            + "Day,P1,P2,T1,T2,SCA:0.902\n"
            + "Day,P1,P2,T2,SCA:0.904\n"
            + "Day,P1,T1,T2,SCA:0.906\n"
            + "Day,P1,T1,SCA:0.906\n"
            + "Day,P2,T1,T2,SCA:0.906\n"
            + "Day,P1,P2,T1,T2,Nem,SCA:0.907\n"
            + "Day,P1,P2,T1,Nem,SCA:0.907\n"
            + "Day,P1,T2,SCA:0.907\n"
            + "Day,P2,T1,SCA:0.907\n"
            + "Day,P1,T1,T2,Nem,SCA:0.907\n"
            + "Day,P1,P2,Nem,SCA:0.907\n"
            + "Day,P1,P2,SCA:0.908\n"
            + "Day,T1,SCA:0.908\n"
            + "Day,T1,T2,SCA:0.908\n"
            + "Day,P2,T2,SCA:0.908\n"
            + "Day,P1,T1,Nem,SCA:0.908\n"
            + "Day,T2,SCA:0.908\n"
            + "Day,P2,T1,T2,Nem,SCA:0.908\n"
            + "Day,P1,P2,T2,Nem,SCA:0.909\n"
            + "Day,P1,SCA:0.909\n"
            + "Day,T1,T2,Nem,SCA:0.909\n"
            + "Day,P1,T2,Nem,SCA:0.909\n"
            + "Day,P2,SCA:0.91\n"
            + "Day,P1,Nem,SCA:0.91\n"
            + "Day,P2,T1,Nem,SCA:0.91\n"
            + "Day,Nem,SCA:0.911\n"
            + "Day,P2,Nem,SCA:0.911\n"
            + "Day,P2,T2,Nem,SCA:0.911\n"
            + "Day,T1,Nem,SCA:0.911\n"
            + "Day,T2,Nem,SCA:0.912\n"
            + "Nem:0.056\n"
            + "P1:0.062\n"
            + "P2:0.082\n"
            + "P1,Nem:0.095\n"
            + "P2,Nem:0.102\n"
            + "P1,P2:0.111\n"
            + "P1,P2,Nem:0.15\n"
            + "P1,P2,T1:0.35\n"
            + "P1,T1:0.352\n"
            + "T1:0.353\n"
            + "P2,T1:0.354\n"
            + "P2,T2:0.378\n"
            + "T2:0.379\n"
            + "T1,T2:0.379\n"
            + "P1,P2,T1,T2:0.38\n"
            + "P1,P2,T2:0.38\n"
            + "P1,T2:0.38\n"
            + "P1,T1,T2:0.382\n"
            + "P2,T1,T2:0.384\n"
            + "T1,Nem:0.386\n"
            + "T2,Nem:0.391\n"
            + "P1,T1,Nem:0.408\n"
            + "P2,T2,Nem:0.41\n"
            + "P1,P2,T2,Nem:0.411\n"
            + "P1,T2,Nem:0.412\n"
            + "P1,P2,T1,Nem:0.416\n"
            + "P2,T1,Nem:0.416\n"
            + "P1,T1,T2,Nem:0.422\n"
            + "P1,P2,T1,T2,Nem:0.424\n"
            + "T1,T2,Nem:0.424\n"
            + "P2,T1,T2,Nem:0.425\n"
            + "Day,P1,P2:0.756\n"
            + "Day,P1,Nem:0.756\n"
            + "Day,P1,P2,Nem:0.757\n"
            + "Day,T1:0.757\n"
            + "Day,P1:0.758\n"
            + "Day,Nem:0.758\n"
            + "Day,P2:0.759\n"
            + "Day,T2:0.759\n"
            + "Day:0.759\n"
            + "Day,P2,Nem:0.759\n"
            + "P1,SCA:0.77\n"
            + "P2,SCA:0.77\n"
            + "T2,SCA:0.771\n"
            + "SCA:0.771\n"
            + "T1,SCA:0.771\n"
            + "Nem,SCA:0.772\n"
            + "Day,SCA:0.772\n"
            + "Day,P1,T1,T2,Nem:0.785\n"
            + "Day,P1,P2,T2,Nem:0.786\n"
            + "Day,P1,P2,T1,T2,Nem:0.787\n"
            + "Day,P1,P2,T1,T2:0.789\n"
            + "Day,T1,T2:0.789\n"
            + "Day,P1,T1,T2:0.792\n"
            + "Day,P1,P2,T1,Nem:0.794\n"
            + "Day,P2,T1,T2:0.797\n"
            + "Day,P1,T2,Nem:0.799\n"
            + "Day,T2,Nem:0.801\n"
            + "P1,P2,T2,Nem,SCA:0.801\n"
            + "Day,P2,T2,Nem:0.801\n"
            + "P1,P2,T2,SCA:0.802\n"
            + "P1,T1,T2,SCA:0.804\n"
            + "Day,P1,T2:0.804\n"
            + "P2,T1,T2,SCA:0.804\n"
            + "Day,P1,P2,T2:0.805\n"
            + "P1,T2,SCA:0.806\n"
            + "Day,P2,T2:0.806\n"
            + "P1,P2,T1,Nem,SCA:0.807\n"
            + "P1,P2,T1,T2,Nem,SCA:0.807\n"
            + "P1,P2,T1,T2,SCA:0.807\n"
            + "P1,T2,Nem,SCA:0.808\n"
            + "P1,P2,SCA:0.808\n"
            + "Day,P1,T1,Nem:0.808\n"
            + "Day,P1,T1:0.808\n"
            + "P1,P2,T1,SCA:0.809\n"
            + "P1,P2,Nem,SCA:0.81\n"
            + "Day,P2,T1,T2,Nem:0.81\n"
            + "Day,P1,P2,T1:0.81\n"
            + "P2,T2,SCA:0.81\n"
            + "Day,T1,Nem:0.81\n"
            + "P2,T1,T2,Nem,SCA:0.811\n"
            + "P1,T1,SCA:0.811\n"
            + "Day,P2,T1,Nem:0.812\n"
            + "Day,P2,T1:0.812\n"
            + "P2,T2,Nem,SCA:0.812\n"
            + "P1,Nem,SCA:0.812\n"
            + "P1,T1,Nem,SCA:0.813\n"
            + "P2,Nem,SCA:0.814\n"
            + "P2,T1,SCA:0.814\n"
            + "Day,T1,T2,Nem:0.816\n"
            + "P2,T1,Nem,SCA:0.819\n"
            + "P1,T1,T2,Nem,SCA:0.824\n"
            + "T1,Nem,SCA:0.827\n"
            + "T2,Nem,SCA:0.83\n"
            + "Day,P1,T1,T2,Nem,SCA:0.836\n"
            + "T1,T2,SCA:0.839\n"
            + "Day,P1,T2,Nem,SCA:0.843\n"
            + "T1,T2,Nem,SCA:0.844\n"
            + "Day,P1,P2,T2,Nem,SCA:0.844\n"
            + "Day,T2,SCA:0.845\n"
            + "Day,P1,P2,T1,T2,Nem,SCA:0.845\n"
            + "Day,P1,P2,T1,Nem,SCA:0.845\n"
            + "Day,P1,T1,Nem,SCA:0.845\n"
            + "Day,P1,T1,T2,SCA:0.846\n"
            + "Day,T1,T2,Nem,SCA:0.847\n"
            + "Day,P1,P2,T1,T2,SCA:0.849\n"
            + "Day,P2,T1,T2,Nem,SCA:0.85\n"
            + "Day,P1,P2,Nem,SCA:0.85\n"
            + "Day,T1,T2,SCA:0.851\n"
            + "Day,T1,SCA:0.851\n"
            + "Day,T2,Nem,SCA:0.853\n"
            + "Day,P1,P2,T2,SCA:0.853\n"
            + "Day,P1,T2,SCA:0.854\n"
            + "Day,P2,T1,T2,SCA:0.855\n"
            + "Day,T1,Nem,SCA:0.856\n"
            + "Day,P1,P2,T1,SCA:0.856\n"
            + "Day,P2,T2,SCA:0.856\n"
            + "Day,P2,T2,Nem,SCA:0.857\n"
            + "Day,P1,Nem,SCA:0.857\n"
            + "Day,P2,T1,Nem,SCA:0.858\n"
            + "Day,P1,T1,SCA:0.858\n"
            + "Day,P1,P2,SCA:0.86\n"
            + "Day,P2,Nem,SCA:0.86\n"
            + "Day,Nem,SCA:0.86\n"
            + "Day,P2,T1,SCA:0.861\n"
            + "Day,P1,SCA:0.861\n"
            + "Day,P2,SCA:0.863";

//    public Map<String, Double> getVoteMapValue(String features, String ss) {
//        String[] fNames = features.split(",");
//        Map<String, Double> ret = new HashMap<>();
//        for (int i = 0; i < fNames.length; i++) {
//            ret.put(fNames[i], 0.0);
//        }
//        String[] fv = ss.split("\n");
//        for (int i = 1; i < fv.length; i++) {
//            String[] el = fv[i].split(":");
//            String[] f = el[0].split(",");
//            double v = Double.parseDouble(el[1]);
//            for (int j = 0; j < f.length; j++) {
//                double n = ret.get(f[j]) + v;
//                ret.put(f[j], n);
//            }
//        }
//        Object[] dd=ret.values().toArray();
//        double[] d=new double[dd.length];
//        for (int i = 0; i < dd.length; i++) {
//            d[i]=(double)dd[i];
//        }
////        double[] dm=FactoryNormalization.normalizeIntensity(d,0,255);
//        
//        for (int i = 0; i < fNames.length; i++) {
//            ret.put(fNames[i], FactoryUtils.formatDouble(ret.get(fNames[i])/fv.length,2));
//        }
//        return ret;
//    }

    public static void main(String[] args) {
        TestVoteMap obj = new TestVoteMap();
        List<TVoteMap> m=FeatureSelectionVoteMap.getVoteMapValueByList("Day,P1,P2,T1,T2,Nem,SCA",obj.s1);
        new FrameVoteMap(m).setVisible(true);
        int a=21;
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestWebCam.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Dimension;
import javax.swing.JFrame;

/**
 *
 * @author dell_lab
 */
public class TestWebCam {

    public static void main(String[] args) {
        Webcam webcam = Webcam.getDefault();
//        Dimension dim=new Dimension(1920,1080);
        Dimension dim=new Dimension(1280,720);
//        Dimension dim=new Dimension(800,600);
//        Dimension dim=new Dimension(640,480);
        
        webcam.setCustomViewSizes(dim);
        webcam.setViewSize(dim);

//        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(new WebcamListener() {
            @Override
            public void webcamOpen(WebcamEvent we) {
            }

            @Override
            public void webcamClosed(WebcamEvent we) {
            }

            @Override
            public void webcamDisposed(WebcamEvent we) {
            }

            @Override
            public void webcamImageObtained(WebcamEvent we) {                
                System.out.println("fps:"+webcam.getFPS());
            }
        }
        );

        WebcamPanel panel = new WebcamPanel(webcam);
        panel.setImageSizeDisplayed(true);
        panel.setFPSDisplayed(true);
        panel.setFPSLimit(30);

        JFrame window = new JFrame("Webcam");
        window.add(panel);
        window.setResizable(true);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setPreferredSize(new Dimension(640,480));
        window.pack();
        window.setVisible(true);
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestWebCam2.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamImageTransformer;
import com.github.sarxos.webcam.WebcamListener;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import jazari.image_processing.ImageProcess;
import jazari.matrix.CMatrix;

/**
 *
 * @author cezerilab
 */
public class TestWebCam2 {
    public static void main(String[] args) {
        //değişti
        CMatrix cm = CMatrix.getInstance().startCamera(new Dimension(1280, 720),5);
//        CMatrix cm = CMatrix.getInstance().startCamera();
        
        //if you want to make image process on the image taken and then show on the current frame
        cm.addWebCamListener(new WebcamListener() {
            @Override
            public void webcamOpen(WebcamEvent we) {
            }

            @Override
            public void webcamClosed(WebcamEvent we) {
            }

            @Override
            public void webcamDisposed(WebcamEvent we) {
            }

            @Override
            public void webcamImageObtained(WebcamEvent we) {
                cm.webCam.setImageTransformer(new WebcamImageTransformer() {
                    @Override
                    public BufferedImage transform(BufferedImage img) {
                        img = ImageProcess.drawRectangle(img, 50, 50, 250, 150, 3, Color.yellow);
                        return img;
                    }
                });
            }
        });
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestWebSocket.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.interfaces.call_back_interface.CallBackWebSocket;
import jazari.interfaces.InterfaceCallBack;
import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestWebSocket {

    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                
                .startWebSocket(8887,new InterfaceCallBack() {
                    @Override
                    public void onMessageReceived(String str) {
                        System.out.println("str = " + str);
                    }
                });

//        CDL_Utils.startJavaServer();
//        CDL_Utils.connectPythonServer();
//        CDL_Utils.delay(3000);
//        CDL_Utils.stopWebsocketServer();
//        System.exit(0);
//        CMatrix.getInstance()
//                .switchToDeepLearning()
//                .setBackEnd("python",false)
//                .setLearningType("online")
//                .setInferenceModel("path")
//                .setDataSource("sensorType")
//                .setCallBackFunction(Interface)
//                
//                //                .generateTrainSet("")
//                //                .generateValidationSet()
//                //                .generateTestSet()
//                //                .loadModel()
//                //                .fitModel()
//                //                .evaluateModel()
////                .sendMessageToPythonServer("merhaba")
//                
////                .executeCommand("python "+CML.currDir+"\\scripts\\python\\pistachio\\Open_Closed_Inference_WebCam.py")
////                .executeCommand("python "+CML.currDir+"\\scripts\\python\\deneme.py")
////                .switchToCMatrix()
//                ;
//        System.out.println("qw");
////        System.exit(0);
//
////        System.out.println("Working Directory = "+ System.getProperty("user.dir"));
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestWeightCentroid.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.matrix.CMatrix;
import java.awt.Color;

/**
 *
 * @author BAP1
 */
public class TestWeightCentroid {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance()
                .imread("images\\yaprak.jpg");
        CMatrix cm1=cm
                .rgb2gray()
                .imshow()
                .binarizeOtsu()
                .imcomplement()
                .imshow()      
//                .edgeDetectionCanny()
//                .imshow()
                
                ;
        
        //Aşağıdaki kod bloğu binary bir imgenin merkezini bulmaya yarar        
        double[][] d=cm1.toDoubleArray2D();
        int total=0;
        int sumX=0;
        int sumY=0;
        for (int i = 0; i < d.length; i++) {
            for (int j = 0; j < d[0].length; j++) {
                if (d[i][j]>0) {
                    sumY+=i;
                    sumX+=j;
                    total++;
                }
                
            }
        }
        int cX=sumX/total;
        int cY=sumY/total;
        
        CMatrix cm2=cm.drawRect(cY-10, cX-10, 20, 20,1, Color.red).imshow("Center of the image");
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestWekaInstances.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.types.TLearningType;
import jazari.matrix.CMatrix;

/**
 *
 * @author BAP1
 */
public class TestWekaInstances {

    public static void main(String[] args) {
//        String str1 = "..\\DataSet\\Weka_Files\\dental_florisis\\kayac_dental_2C_8A_XRD.arff";
//        CMatrix cm1=CMatrix.fromARFF(str1).plot();
        
        String str2="..\\DataSet\\Weka_Files\\test\\rand_relation.arff";
//        CMatrix cm=CMatrix.getInstance().rand(1000,1).round().plot();
        CMatrix cm2=CMatrix.getInstance().rand(1000,5).cat(1, CMatrix.getInstance().rand(1000,1).round()).toWekaArff(str2,TLearningType.CLASSIFICATION).readARFF(str2).plot();
//        CMatrix cm3=CMatrix.fromARFF(str2).plot();
        
    }

}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\TestXOREncryption.java
============================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import jazari.factory.FactoryUtils;

/**
 *
 * @author BAP1
 */
public class TestXOREncryption {
    public static void main(String[] args) {
        int toBeEncrypted = 9;
        int salt          = 9;
        int encryptedVal  =  FactoryUtils.encrypt(toBeEncrypted, salt);
        int decryptedVal  =  FactoryUtils.decrypt(encryptedVal, salt);
        System.out.println("original:"+toBeEncrypted);
        System.out.println("encrypted:"+encryptedVal);
        System.out.println("decrypted:"+decryptedVal);
        
        int a=21;
        int b=13;
        
//        a ^= (b = (a ^= b)^b);
        a = a ^ b; 
        b = a ^ b; 
        a = a ^ b;
        
        System.out.println("a:"+a+",b:"+b);
    }
}


============================================================
FILE: D:\Dropbox\NetbeansProjects\OJL\src\main\java\test\UseCaseMatrixOperations.java
============================================================
/*
•	Generate a 640 x 480 random matrix values between 0-255.
•	Show histogram
•	Show image
•	Convert matrix to one dimensional vector or column matrix
•	Add some jitter or noise on the matrix
•	Plot original and noised matrixes
•	Plot scatter diagram and show some similarity measures

 */
package test;
import jazari.matrix.CMatrix;

public class UseCaseMatrixOperations {
    public static void main(String[] args) {
        CMatrix cm = CMatrix.getInstance().rand(640,480,0,255).transpose().round()
                .tic()
//                .m_imhist()
                .imshow() 
                .imhist()
//                .println()
                .toc()
                ;
        
    }
}