package jazari.app;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Component;
import javax.swing.TransferHandler;
import jazari.factory.FactoryUtils;
import jazari.matrix.CMatrix;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import javax.swing.JButton;
import java.awt.Image;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jazari.gui.FlatLaf;
import jazari.gui.FrameLLMTools;
import jazari.gui.FrameScreenCapture;
import jazari.interpreter.EnhancedIDE;
import jazari.llm.OllamaGemma3SwingChat;
import jazari.llm_chat.JazariChatApp;
import jazari.llm_forge.JazariChatForge;
import jazari.utils.StuckPixelFix;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author cezerilab
 */
public class Jazo extends javax.swing.JFrame {

    static {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FlatLaf.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Creates new form JAnnotate
     */
    public Jazo() {
        initComponents();
        btn_open.setTransferHandler(new ImageTransferHandler());
        this.setTitle("Open Jazari Library (Jazari Annotation Tool)  [10.09.2025]");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_open = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btn_screen_capture = new javax.swing.JButton();
        btn_ide = new javax.swing.JButton();
        btn_llm_web = new javax.swing.JButton();
        btn_llm_tool = new javax.swing.JButton();
        btn_llm_local = new javax.swing.JButton();
        btn_pixelFix = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jazari Annotation Tool Version:17.07.2025");

        btn_open.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btn_open.setText("Open | Drag & Drop Image|Folder");
        btn_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_screen_capture.setText("Screen Capture");
        btn_screen_capture.setToolTipText("Open Screen Capture Frame (from videos + stationary)");
        btn_screen_capture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_screen_captureActionPerformed(evt);
            }
        });

        btn_ide.setText("Open Jazari IDE");
        btn_ide.setToolTipText("Open Interpreter IDE Frame");
        btn_ide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ideActionPerformed(evt);
            }
        });

        btn_llm_web.setText("Web-LLM");
        btn_llm_web.setToolTipText("Open Screen Capture Frame (from videos + stationary)");
        btn_llm_web.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_llm_webActionPerformed(evt);
            }
        });

        btn_llm_tool.setText("LLM Tools");
        btn_llm_tool.setToolTipText("Open Screen Capture Frame (from videos + stationary)");
        btn_llm_tool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_llm_toolActionPerformed(evt);
            }
        });

        btn_llm_local.setText("Local-LMM");
        btn_llm_local.setToolTipText("Open Screen Capture Frame (from videos + stationary)");
        btn_llm_local.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_llm_localActionPerformed(evt);
            }
        });

        btn_pixelFix.setText("Pixel-Fix");
        btn_pixelFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pixelFixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_screen_capture)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_llm_tool)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_ide, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_llm_local)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_llm_web)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_pixelFix, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_pixelFix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_screen_capture, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(btn_ide, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(btn_llm_web, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(btn_llm_tool, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(btn_llm_local, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_open, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_open, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openActionPerformed
        File pathFile = FactoryUtils.browseFileForImage();
        if (pathFile != null) {
            CMatrix cm = CMatrix.getInstance()
                    .imread(pathFile)
                    .imshow();
        }
    }//GEN-LAST:event_btn_openActionPerformed

    private void btn_screen_captureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_screen_captureActionPerformed
        FrameScreenCapture frm = new FrameScreenCapture();
        frm.setVisible(true);
    }//GEN-LAST:event_btn_screen_captureActionPerformed

    private void btn_ideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ideActionPerformed
        //new FrameLLMTools().setVisible(true);
        new EnhancedIDE().setVisible(true);
    }//GEN-LAST:event_btn_ideActionPerformed

    private void btn_llm_webActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_llm_webActionPerformed
        //new OllamaGemma3SwingChat().setVisible(true);
        JazariChatApp.show();
    }//GEN-LAST:event_btn_llm_webActionPerformed

    private void btn_llm_toolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_llm_toolActionPerformed
        new FrameLLMTools().setVisible(true);
    }//GEN-LAST:event_btn_llm_toolActionPerformed

    private void btn_llm_localActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_llm_localActionPerformed
        new JazariChatForge().setVisible(true);
       //new OllamaGemma3SwingChat().setVisible(true);
    }//GEN-LAST:event_btn_llm_localActionPerformed

    private void btn_pixelFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pixelFixActionPerformed
        StuckPixelFix.process();
    }//GEN-LAST:event_btn_pixelFixActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //FlatDarculaLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Jazo jazo = new Jazo();
                jazo.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ide;
    private javax.swing.JButton btn_llm_local;
    private javax.swing.JButton btn_llm_tool;
    private javax.swing.JButton btn_llm_web;
    private javax.swing.JButton btn_open;
    private javax.swing.JButton btn_pixelFix;
    private javax.swing.JButton btn_screen_capture;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public static class ImageTransferHandler extends TransferHandler {

        public static final DataFlavor[] SUPPORTED_DATA_FLAVORS = new DataFlavor[]{
            DataFlavor.javaFileListFlavor,
            DataFlavor.imageFlavor
        };

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            boolean canImport = false;
            for (DataFlavor flavor : SUPPORTED_DATA_FLAVORS) {
                if (support.isDataFlavorSupported(flavor)) {
                    canImport = true;
                    break;
                }
            }
            return canImport;
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            boolean accept = false;
            if (canImport(support)) {
                try {
                    Transferable t = support.getTransferable();
                    Component component = support.getComponent();
                    if (component instanceof JButton) {
                        Image image = null;
                        if (support.isDataFlavorSupported(DataFlavor.imageFlavor)) {
                            image = (Image) t.getTransferData(DataFlavor.imageFlavor);
                        } else if (support.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                            List files = (List) t.getTransferData(DataFlavor.javaFileListFlavor);
                            if (files.size() > 0) {
                                //image = ImageIO.read((File) files.get(0));
                                CMatrix cm = CMatrix.getInstance().imread((File) files.get(0)).imshow();

                            }
                        }
                        accept = true;
                    }
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
            }
            return accept;
        }
    }
}
