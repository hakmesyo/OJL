/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jazari.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import jazari.factory.FactoryUtils;

/**
 *
 * @author cezerilab
 */
public class FrameScriptEditor extends javax.swing.JFrame {

    Document doc = null;
    public static final Object DUMMY = new Object();

    /**
     * Creates new form FrameScriptEditor
     */
    public FrameScriptEditor() {
        initComponents();
        doc = editor.getDocument();
        editor.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), DUMMY);
        editor.getActionMap().put(DUMMY, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                handleKeyPressed();
            }
        });
        try {
            //doc.putProperty("filterNewlines", Boolean.TRUE);
            doc.insertString(doc.getLength(), "cmd>", null);
        } catch (BadLocationException ex) {
            Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Write OJL Script in editor and then click RUN button");

        editor.setColumns(20);
        editor.setRows(5);
        jScrollPane1.setViewportView(editor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameScriptEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameScriptEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameScriptEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameScriptEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameScriptEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea editor;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void handleKeyPressed() {
        String s = editor.getText();
        int n = s.lastIndexOf("cmd>");
        String cmd = s.substring(n + 4, s.length());
        if (cmd.isEmpty()) {
            try {
                doc.insertString(n + 4, "nothing to execute\ncmd>", null);
                //editor.setCaretPosition(doc.getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String[] cmds = cmd.split("\\.");
            String className = cmds[0];
            int index = cmd.indexOf(".")+1;
            String methodName = cmd.substring(index, cmd.indexOf("("));
            String[] ps=cmd.substring(cmd.indexOf("(")+1, cmd.indexOf(")")).split(",");
            Object[] params=resolveParams(ps);
            if (className.equals("FactoryUtils")) {
                try {
                    Method invokedMethod = FactoryUtils.class.getDeclaredMethod(methodName, int.class, int.class);
                    Integer result = (Integer) invokedMethod.invoke(null, params);
                    doc.insertString(doc.getLength(), "\nresult = "+result+" \ncmd>", null);

                } catch (NoSuchMethodException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SecurityException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadLocationException ex) {
                    Logger.getLogger(FrameScriptEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private Object[] resolveParams(String[] params) {
        Object[] ret=new Object[params.length];
        for (int i=0;i<params.length;i++) {
            
            if (params[i].contains("\"")) {
                ret[i]=String.class;
            }else{
                try {
                    int n=Integer.parseInt(params[i]);
                    ret[i]=n;
                } catch (Exception e) {
                    try {
                        float n=Float.parseFloat(params[i]);
                        ret[i]=n;
                    } catch (Exception e1) {
                    }
                }
            }
        }
        return ret;
    }
}
