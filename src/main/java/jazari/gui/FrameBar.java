/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jazari.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import jazari.image_processing.ImageProcess;
import jazari.factory.FactoryUtils;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jazari.matrix.CMatrix;
import jazari.types.TFigureAttribute;

/**
 *
 * @author BAP1
 */
public class FrameBar extends javax.swing.JFrame {

    static {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FlatLaf.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private float[][] data;
    private String[] labels = null;
    private boolean isValueVisible = false;
    private String[] items = null;
    private TFigureAttribute attr = null;

    public FrameBar(float[][] data, TFigureAttribute attr, String[] labels) {
        super("|Bar");
        //cm.name += "|Bar";
        //this.cm = cm.clone();
        this.attr = attr;
        this.data=data;
        if (attr == null) {
            this.labels = labels;
        }
        initComponents();
    }

    public FrameBar(float[][] data, TFigureAttribute attr, String[] labels, String[] items) {
        super("|Bar");
        //cm.name += "|Bar";
        //this.cm = cm.clone();
        this.data=data;
        this.attr = attr;
        if (attr == null) {
            this.labels = labels;
            this.items = items;
        }
        initComponents();
    }

    public FrameBar(float[][] data, TFigureAttribute attr) {
        super("|Bar");
        //cm.name += "|Bar";
        //this.cm = cm.clone();
        this.data=data;
        this.attr = attr;
        initComponents();
    }

    public void setLabels(String... labels) {
        this.labels = labels;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_bar = new jazari.gui.PanelBar(this,data,attr,labels,items,isValueVisible);
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btn_dataGrid = new javax.swing.JButton();
        btn_scatter = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        txt_dpi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_refresh = new javax.swing.JButton();
        chk_legend = new javax.swing.JCheckBox();
        chk_dark_mode = new javax.swing.JCheckBox();
        chk_gridy = new javax.swing.JCheckBox();
        chk_gridx = new javax.swing.JCheckBox();
        chk_transpose = new javax.swing.JCheckBox();
        chk_val = new javax.swing.JCheckBox();
        chk_x_title = new javax.swing.JCheckBox();
        chk_y_title = new javax.swing.JCheckBox();
        chk_fill_bar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panel_bar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panel_barLayout = new javax.swing.GroupLayout(panel_bar);
        panel_bar.setLayout(panel_barLayout);
        panel_barLayout.setHorizontalGroup(
            panel_barLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_barLayout.setVerticalGroup(
            panel_barLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 545, Short.MAX_VALUE)
        );

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        btn_dataGrid.setText("Data Grid");
        btn_dataGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dataGridActionPerformed(evt);
            }
        });

        btn_scatter.setText("scatter");
        btn_scatter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_scatterActionPerformed(evt);
            }
        });

        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        txt_dpi.setText("96");

        jLabel3.setText("dpi");

        btn_refresh.setText("refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        chk_legend.setSelected(true);
        chk_legend.setText("Legend");
        chk_legend.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_legendItemStateChanged(evt);
            }
        });
        chk_legend.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                chk_legendPropertyChange(evt);
            }
        });

        chk_dark_mode.setSelected(true);
        chk_dark_mode.setText("Dark");
        chk_dark_mode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_dark_modeİtemStateChanged(evt);
            }
        });

        chk_gridy.setSelected(true);
        chk_gridy.setText("Col");
        chk_gridy.setToolTipText("Show Column Lines");
        chk_gridy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_gridyİtemStateChanged(evt);
            }
        });

        chk_gridx.setSelected(true);
        chk_gridx.setText("Row");
        chk_gridx.setToolTipText("Show Row Lines");
        chk_gridx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_gridxİtemStateChanged(evt);
            }
        });

        chk_transpose.setText("T");
        chk_transpose.setToolTipText("Transpose");
        chk_transpose.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_transposeİtemStateChanged(evt);
            }
        });

        chk_val.setText("Val");
        chk_val.setToolTipText("Show values on bars");
        chk_val.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_valİtemStateChanged(evt);
            }
        });

        chk_x_title.setSelected(true);
        chk_x_title.setText("X-Ax");
        chk_x_title.setToolTipText("Show X axis caption/title");
        chk_x_title.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_x_titleİtemStateChanged(evt);
            }
        });

        chk_y_title.setSelected(true);
        chk_y_title.setText("Y-Ax");
        chk_y_title.setToolTipText("Show Y axis caption/title");
        chk_y_title.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_y_titleİtemStateChanged(evt);
            }
        });

        chk_fill_bar.setText("Fill");
        chk_fill_bar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_fill_barİtemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btn_dataGrid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_scatter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_dpi, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_transpose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(chk_val)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_fill_bar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_y_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_x_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_gridx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_gridy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_legend)
                .addGap(2, 2, 2)
                .addComponent(chk_dark_mode)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_dataGrid)
                    .addComponent(btn_scatter)
                    .addComponent(btn_save)
                    .addComponent(txt_dpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btn_refresh)
                    .addComponent(chk_legend)
                    .addComponent(chk_dark_mode)
                    .addComponent(chk_gridy)
                    .addComponent(chk_gridx)
                    .addComponent(chk_transpose)
                    .addComponent(chk_val)
                    .addComponent(chk_x_title)
                    .addComponent(chk_y_title)
                    .addComponent(chk_fill_bar))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(panel_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_dataGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dataGridActionPerformed
        new FrameDataGrid(data).setVisible(true);
    }//GEN-LAST:event_btn_dataGridActionPerformed

    private void btn_scatterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_scatterActionPerformed
        if (getBarPanel().getMatrix().length < 2) {
            System.err.println("number of columns should be at least 2");
            return;
        }
        TFigureAttribute attr = new TFigureAttribute();
        attr.figureCaption = this.getTitle();
        CMatrix.getInstance(data).scatter(attr);
    }//GEN-LAST:event_btn_scatterActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        savePanel();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        getBarPanel().setMatrix(this.data);
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void chk_legendItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_legendItemStateChanged
        getBarPanel().setLegend(chk_legend.isSelected());
    }//GEN-LAST:event_chk_legendItemStateChanged

    private void chk_legendPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_chk_legendPropertyChange

    }//GEN-LAST:event_chk_legendPropertyChange

    private void chk_dark_modeİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_dark_modeİtemStateChanged
        getBarPanel().setDarkMode(chk_dark_mode.isSelected());
    }//GEN-LAST:event_chk_dark_modeİtemStateChanged

    private void chk_gridyİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_gridyİtemStateChanged
        getBarPanel().setGridy(chk_gridy.isSelected());
    }//GEN-LAST:event_chk_gridyİtemStateChanged

    private void chk_gridxİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_gridxİtemStateChanged
        getBarPanel().setGridx(chk_gridx.isSelected());
    }//GEN-LAST:event_chk_gridxİtemStateChanged

    private void chk_transposeİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_transposeİtemStateChanged
        getBarPanel().setTranspose(chk_transpose.isSelected());
    }//GEN-LAST:event_chk_transposeİtemStateChanged

    private void chk_valİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_valİtemStateChanged
        getBarPanel().setValueVisible(chk_val.isSelected());
    }//GEN-LAST:event_chk_valİtemStateChanged

    private void chk_x_titleİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_x_titleİtemStateChanged
        getBarPanel().setXAxisVisible(chk_x_title.isSelected());
    }//GEN-LAST:event_chk_x_titleİtemStateChanged

    private void chk_y_titleİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_y_titleİtemStateChanged
        getBarPanel().setYAxisVisible(chk_y_title.isSelected());
    }//GEN-LAST:event_chk_y_titleİtemStateChanged

    private void chk_fill_barİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_fill_barİtemStateChanged
        getBarPanel().setFillBar(chk_fill_bar.isSelected());
    }//GEN-LAST:event_chk_fill_barİtemStateChanged

    public PanelBar getBarPanel() {
        return (PanelBar) panel_bar;
    }

    public void setBarData(float[][] data) {
        //this.cm = cmx.getHistogram();
        getBarPanel().setMatrix(data);
    }

    public void setBarData(float[][] data, String[] labels) {
        //this.cm = cmx.getHistogram();
        getBarPanel().setMatrix(data, labels);
    }

    /**
     * param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_dataGrid;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_scatter;
    private javax.swing.JCheckBox chk_dark_mode;
    private javax.swing.JCheckBox chk_fill_bar;
    private javax.swing.JCheckBox chk_gridx;
    private javax.swing.JCheckBox chk_gridy;
    private javax.swing.JCheckBox chk_legend;
    private javax.swing.JCheckBox chk_transpose;
    private javax.swing.JCheckBox chk_val;
    private javax.swing.JCheckBox chk_x_title;
    private javax.swing.JCheckBox chk_y_title;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel_bar;
    private javax.swing.JTextField txt_dpi;
    // End of variables declaration//GEN-END:variables

    private void savePanel() {
        PanelBar cp = getBarPanel();
        int dpi = Integer.parseInt(txt_dpi.getText());
        double scale = dpi / 96.0;
        cp.setSize((int) (cp.getWidth() * scale), (int) (cp.getHeight() * scale));
        File file = FactoryUtils.getFileFromChooserSave();
        if (file != null) {
            ImageProcess.saveGridImage(ImageProcess.getBufferedImage(getBarPanel()), file.getAbsolutePath());
        } else {
            FactoryUtils.showMessage("kaydedilemedi CPlotFrame.savePanel()");
        }
        cp.setSize((int) (cp.getWidth() / scale), (int) (cp.getHeight() / scale));
    }

    public void setValuVisible(boolean valueVisible) {
        this.isValueVisible = valueVisible;
        getBarPanel().setValueVisible(isValueVisible);
    }

}
